{"repository_name":"ph-core","body":"# ph-core\n\nPhase is a family of scientific computing libraries written for Crystal. This repository\nimplements Phase's core functionality, including generic multidimensional arrays,\nviews, array slicing, pretty-printing, and fluent arithmetic.\n\n## NOTE\nIf you're seeing this repo right now, please note that Phase is not quite\nready for public use. We have a lot of documentation to write, compatibility\nmodules to test and ship, and specs to implement.\n\nIf you have any questions, feel free to reach out to [sethhinz@me.com](mailto:sethhinz@me.com) or open an issue.\n\n## Links\n- [API Documentation](https://in-phase.github.io/api)\n- [Introduction & Reference Material](https://in-phase.github.io/reference)\n\n## Examples\n\n```crystal\n# You can construct n-dimensional arrays from literals:\nnarr = NArray[[1, 0, 0], [0, 1, 0]]\n\n# Or programatically using the coordinates:\nnarr2 = NArray.build(2,3) do |coord| \n    10 * coord[0] + coord[1]\nend\n\nputs narr\n# 2x3 Phase::NArray(Int32)\n# [[1, 0, 0],\n#  [0, 1, 0]]\n\nputs narr2\n# 2x3 Phase::NArray(Int32)\n# [[ 0,  1,  2],\n#  [10, 11, 12]]\n\n# Use infix operators to easily do element-wise arithmetic\nnarr + narr2 # => NArray[[1, 1, 2], [10, 12, 12]]\nnarr * narr2 # => NArray[[0, 0, 0], [ 0, 11,  0]]\n\n# Access a single element from your n-array:\nnarr.get(0, 0) # => 1\n\n# Or a chunk, via slicing:\nnarr[.., 1] # => NArray[0, 1] (all rows, column one only)\n\n# Create views of your data (to avoid copying it):\nnarr.view(.., 1) # => [0, 1] (as a View)\n\n# And even define procedures to lazily transform data:\nnarr.view(.., 1).process {|x| (x + 4)**2 } # => [16, 25] (as a ProcView)\n\n# Iterate over data in a performance and syntax friendly way:\nargmax = [0, 0]\nmax = narr.get(argmax)\nnarr2.each_with_coord do |el, coord|\n  max, argmax = el, coord if el > max\nend\nputs({max, argmax}) # => {12, [1, 2]}\n\n# Easily take axial slices of data:\nnarr2.slices(axis: 1) # => [NArray[0, 10], NArray[1, 11], NArray[2, 12]]\n\n# Perform any operation on each element of the n-array with `apply`:\nstr_narr = NArray.build(3,3) {|_, i| \"hello world\"[i] }\nputs str_narr.apply.upcase\n```\n\n## Compatibility\nPhase is designed to be modular, extensible, and compatible with other\nscientific computing libraries via [ph-compat](https://github.com/in-phase/ph-compat).\n\n```crystal\nrequire \"ishi\"\n\nrequire \"ph-core\"\nrequire \"ph-compat/ishi\"\n\n# demo this\n```\n\nthings to show off:\n- ease of constructing NArrays\n- slicing\n- arithmetic\n- masking\n- views\n- iterating over an NArray\n- slices\n- demo of ph-compat\n- #.apply\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     ph-core:\n       github: in-phase/ph-core\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"ph-core\"\n```\n\nTODO: Write usage instructions here\n\n## Core Principles\n\nOur primary motivation is to make scientific computing enjoyable, and we do that by putting **user experience above all else**. Phase only requires that you add it to your `shard.yml` - there are no C libraries you have to install.\n\nWe also aim to keep our contribution useful by making Phase as **modular and well-contained** as possible. Writing a serious scientific computing library is a large undertaking. Because ph-core is small and modular, it should still be useful and expansible even after core maintainers leave.\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/in-phase/ph-core/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n- [Emily Love](https://github.com/emgineering) - co-author\n- [Seth Hinz](https://github.com/shinzlet) - co-author\n","program":{"html_id":"ph-core/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"ph-core","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"ph-core/Complex","path":"Complex.html","kind":"struct","full_name":"Complex","name":"Complex","abstract":false,"superclass":{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/patches/complex.cr","line_number":6,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L6"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"doc":"this patch makes it possible to operate elementwise on a Number and an NArray (in that order)\ne.g.\n``` 5 + NArray.new([1,2,3]) #=> [6,7,8] ```","summary":"<p>this patch makes it possible to operate elementwise on a Number and an NArray (in that order) e.g.</p>","instance_methods":[{"html_id":"%(other:MultiIndexable(U))forallU-instance-method","name":"%","doc":"Invokes `#%` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#%</code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"%","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self % elem\nend"},"external_var":false},{"html_id":"&(other:MultiIndexable(U))forallU-instance-method","name":"&","doc":"Invokes `#&` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;</code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"&","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self & elem\nend"},"external_var":false},{"html_id":"&**(other:MultiIndexable(U))forallU-instance-method","name":"&**","doc":"Invokes `#&**` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;**</code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"&**","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self &** elem\nend"},"external_var":false},{"html_id":"&+(other:MultiIndexable(U))forallU-instance-method","name":"&+","doc":"Invokes `#&+` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;+</code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"&+","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self &+ elem\nend"},"external_var":false},{"html_id":"&-(other:MultiIndexable(U))forallU-instance-method","name":"&-","doc":"Invokes `#&-` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;-</code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"&-","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self &- elem\nend"},"external_var":false},{"html_id":"*(other:MultiIndexable(U))forallU-instance-method","name":"*","doc":"Invokes `#*` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Complex.html#%2A%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#*</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"*","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self * elem\nend"},"external_var":false},{"html_id":"**(other:MultiIndexable(U))forallU-instance-method","name":"**","doc":"Invokes `#**` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Complex.html#%2A%2A%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#**</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"**","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self ** elem\nend"},"external_var":false},{"html_id":"+(other:MultiIndexable(U))forallU-instance-method","name":"+","doc":"Invokes `#+` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Complex.html#%2B%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#+</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self + elem\nend"},"external_var":false},{"html_id":"-(other:MultiIndexable(U))forallU-instance-method","name":"-","doc":"Invokes `#-` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Complex.html#-%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#-</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self - elem\nend"},"external_var":false},{"html_id":"/(other:MultiIndexable(U))forallU-instance-method","name":"/","doc":"Invokes `#/` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Complex.html#/%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#/</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self / elem\nend"},"external_var":false},{"html_id":"//(other:MultiIndexable(U))forallU-instance-method","name":"//","doc":"Invokes `#//` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Complex.html#//%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#//</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"//","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self // elem\nend"},"external_var":false},{"html_id":"<(other:MultiIndexable(U))forallU-instance-method","name":"<","doc":"Invokes `#<` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&lt;</code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"<","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self < elem\nend"},"external_var":false},{"html_id":"<=(other:MultiIndexable(U))forallU-instance-method","name":"<=","doc":"Invokes `#<=` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&lt;=</code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"<=","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self <= elem\nend"},"external_var":false},{"html_id":">(other:MultiIndexable(U))forallU-instance-method","name":">","doc":"Invokes `#>` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&gt;</code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":">","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self > elem\nend"},"external_var":false},{"html_id":">=(other:MultiIndexable(U))forallU-instance-method","name":">=","doc":"Invokes `#>=` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&gt;=</code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":">=","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self >= elem\nend"},"external_var":false},{"html_id":"^(other:MultiIndexable(U))forallU-instance-method","name":"^","doc":"Invokes `#^` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Complex.html#%5E%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#^</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"^","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self ^ elem\nend"},"external_var":false},{"html_id":"|(other:MultiIndexable(U))forallU-instance-method","name":"|","doc":"Invokes `#|` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Complex.html#%7C%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#|</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/complex.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L7"},"def":{"name":"|","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self | elem\nend"},"external_var":false},{"html_id":"eq(other:MultiIndexable(U)):MultiIndexable(Bool)forallU-instance-method","name":"eq","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) : MultiIndexable(Bool) forall U","args_html":"(other : MultiIndexable(U)) : MultiIndexable(Bool) forall U","location":{"filename":"src/patches/complex.cr","line_number":19,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/complex.cr#L19"},"def":{"name":"eq","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"return_type":"MultiIndexable(Bool)","visibility":"Public","body":"other.map do |elem|\n  self == elem\nend"},"external_var":false}]},{"html_id":"ph-core/Number","path":"Number.html","kind":"struct","full_name":"Number","name":"Number","abstract":true,"superclass":{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"ph-core/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"ph-core/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"ph-core/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/patches/number.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L4"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"ph-core/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"ph-core/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"}],"doc":"this patch makes it possible to operate elementwise on a Number and an NArray (in that order)\ne.g.\n``` 5 + NArray.new([1,2,3]) #=> [6,7,8] ```","summary":"<p>this patch makes it possible to operate elementwise on a Number and an NArray (in that order) e.g.</p>","instance_methods":[{"html_id":"%(other:MultiIndexable(U))forallU-instance-method","name":"%","doc":"Invokes `#%` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#%</code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"%","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self % elem\nend"},"external_var":false},{"html_id":"&(other:MultiIndexable(U))forallU-instance-method","name":"&","doc":"Invokes `#&` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;</code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"&","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self & elem\nend"},"external_var":false},{"html_id":"&**(other:MultiIndexable(U))forallU-instance-method","name":"&**","doc":"Invokes `#&**` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;**</code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"&**","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self &** elem\nend"},"external_var":false},{"html_id":"&+(other:MultiIndexable(U))forallU-instance-method","name":"&+","doc":"Invokes `#&+` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;+</code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"&+","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self &+ elem\nend"},"external_var":false},{"html_id":"&-(other:MultiIndexable(U))forallU-instance-method","name":"&-","doc":"Invokes `#&-` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;-</code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"&-","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self &- elem\nend"},"external_var":false},{"html_id":"*(other:MultiIndexable(U))forallU-instance-method","name":"*","doc":"Invokes `#*` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Number.html#%2A%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#*</a></code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"*","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self * elem\nend"},"external_var":false},{"html_id":"**(other:MultiIndexable(U))forallU-instance-method","name":"**","doc":"Invokes `#**` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Number.html#%2A%2A%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#**</a></code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"**","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self ** elem\nend"},"external_var":false},{"html_id":"+(other:MultiIndexable(U))forallU-instance-method","name":"+","doc":"Invokes `#+` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Number.html#%2B%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#+</a></code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self + elem\nend"},"external_var":false},{"html_id":"-(other:MultiIndexable(U))forallU-instance-method","name":"-","doc":"Invokes `#-` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Number.html#-%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#-</a></code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self - elem\nend"},"external_var":false},{"html_id":"/(other:MultiIndexable(U))forallU-instance-method","name":"/","doc":"Invokes `#/` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Number.html#/%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#/</a></code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self / elem\nend"},"external_var":false},{"html_id":"//(other:MultiIndexable(U))forallU-instance-method","name":"//","doc":"Invokes `#//` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Number.html#//%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#//</a></code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"//","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self // elem\nend"},"external_var":false},{"html_id":"<(other:MultiIndexable(U))forallU-instance-method","name":"<","doc":"Invokes `#<` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&lt;</code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"<","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self < elem\nend"},"external_var":false},{"html_id":"<=(other:MultiIndexable(U))forallU-instance-method","name":"<=","doc":"Invokes `#<=` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&lt;=</code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"<=","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self <= elem\nend"},"external_var":false},{"html_id":">(other:MultiIndexable(U))forallU-instance-method","name":">","doc":"Invokes `#>` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&gt;</code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":">","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self > elem\nend"},"external_var":false},{"html_id":">=(other:MultiIndexable(U))forallU-instance-method","name":">=","doc":"Invokes `#>=` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&gt;=</code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":">=","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self >= elem\nend"},"external_var":false},{"html_id":"^(other:MultiIndexable(U))forallU-instance-method","name":"^","doc":"Invokes `#^` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Number.html#%5E%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#^</a></code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"^","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self ^ elem\nend"},"external_var":false},{"html_id":"|(other:MultiIndexable(U))forallU-instance-method","name":"|","doc":"Invokes `#|` element-wise between `self` and *other*, returning\r\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"Number.html#%7C%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#|</a></code> element-wise between <code>self</code> and <em>other</em>, returning\r an <code>NArray</code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : MultiIndexable(U)) forall U","location":{"filename":"src/patches/number.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L5"},"def":{"name":"|","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"other.map do |elem|\n  self | elem\nend"},"external_var":false},{"html_id":"eq(other:MultiIndexable(U)):MultiIndexable(Bool)forallU-instance-method","name":"eq","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) : MultiIndexable(Bool) forall U","args_html":"(other : MultiIndexable(U)) : MultiIndexable(Bool) forall U","location":{"filename":"src/patches/number.cr","line_number":17,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/patches/number.cr#L17"},"def":{"name":"eq","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"return_type":"MultiIndexable(Bool)","visibility":"Public","body":"other.map do |elem|\n  self == elem\nend"},"external_var":false}]},{"html_id":"ph-core/Phase","path":"Phase.html","kind":"module","full_name":"Phase","name":"Phase","abstract":false,"locations":[{"filename":"src/buffered/buffered.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/buffered.cr#L1"},{"filename":"src/coord_util.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/coord_util.cr#L1"},{"filename":"src/exceptions/exceptions.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/exceptions/exceptions.cr#L1"},{"filename":"src/index_region.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L5"},{"filename":"src/iterators/colex_iterator.cr","line_number":3,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/colex_iterator.cr#L3"},{"filename":"src/iterators/lex_iterator.cr","line_number":3,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/lex_iterator.cr#L3"},{"filename":"src/iterators/region_iterator.cr","line_number":3,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L3"},{"filename":"src/iterators/stride_iterator.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L1"},{"filename":"src/multi_indexable.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1"},{"filename":"src/multi_indexable/chunk_iterator.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/chunk_iterator.cr#L1"},{"filename":"src/multi_indexable/chunk_region_iterator.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/chunk_region_iterator.cr#L1"},{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L1"},{"filename":"src/multi_indexable/elem_iterator.cr","line_number":3,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L3"},{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":6,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L6"},{"filename":"src/multi_indexable/tiling_lex_iterator.cr","line_number":3,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/tiling_lex_iterator.cr#L3"},{"filename":"src/multi_writable.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L1"},{"filename":"src/n_array.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L7"},{"filename":"src/ph-core.cr","line_number":35,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/ph-core.cr#L35"},{"filename":"src/proc_view.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/proc_view.cr#L1"},{"filename":"src/range_syntax/range_syntax.cr","line_number":3,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L3"},{"filename":"src/readonly_view.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L1"},{"filename":"src/readonly_wrapper.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_wrapper.cr#L1"},{"filename":"src/shape_util.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/shape_util.cr#L1"},{"filename":"src/type_aliases.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/type_aliases.cr#L1"},{"filename":"src/view.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view.cr#L1"},{"filename":"src/view_util/transforms.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L1"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"DOCUMENT: Write documentation for `Phase::Core`","summary":"<p>DOCUMENT: Write documentation for <code>Phase::Core</code></p>","types":[{"html_id":"ph-core/Phase/Buffered","path":"Phase/Buffered.html","kind":"module","full_name":"Phase::Buffered(T)","name":"Buffered","abstract":false,"ancestors":[{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"},{"html_id":"ph-core/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"locations":[{"filename":"src/buffered/buffered.cr","line_number":6,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/buffered.cr#L6"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"}],"including_types":[{"html_id":"ph-core/Phase/NArray","kind":"class","full_name":"Phase::NArray(T)","name":"NArray"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"A collection of convenience functions and optimizations targeted at multidimensional arrays stored linearly in memory\n(in lexicographic/row major/C order).\nThis suggests the concept of a singular \"index\" representing each element, alongside the multidimensional coordinate.\nTODO: This should probably be parameterized by the buffer index type","summary":"<p>A collection of convenience functions and optimizations targeted at multidimensional arrays stored linearly in memory (in lexicographic/row major/C order).</p>","class_methods":[{"html_id":"axis_strides(shape)-class-method","name":"axis_strides","doc":"Given an array of step sizes in each coordinate axis, returns the offset\nin the buffer that a step of that size represents. The buffer index of a\nmultidimensional coordinate, x, is equal to x dotted with axis_strides","summary":"<p>Given an array of step sizes in each coordinate axis, returns the offset in the buffer that a step of that size represents.</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":""}],"args_string":"(shape)","args_html":"(shape)","location":{"filename":"src/buffered/buffered.cr","line_number":15,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/buffered.cr#L15"},"def":{"name":"axis_strides","args":[{"name":"shape","external_name":"shape","restriction":""}],"visibility":"Public","body":"ret = shape.clone\nret[-1] = (typeof(shape[0])).zero + 1\n\n((ret.size - 2)..0).step(-1) do |idx|\n  ret[idx] = ret[idx + 1] * shape[idx + 1]\nend\n\nret\n"},"external_var":false},{"html_id":"coord_to_index(coord,shape):Int-class-method","name":"coord_to_index","doc":"Converts an n-dimensional relative coordinate (e.g. negative indexing\nallowed) into a lexicographic buffer index.","summary":"<p>Converts an n-dimensional relative coordinate (e.g.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""},{"name":"shape","external_name":"shape","restriction":""}],"args_string":"(coord, shape) : Int","args_html":"(coord, shape) : Int","location":{"filename":"src/buffered/buffered.cr","line_number":35,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/buffered.cr#L35"},"def":{"name":"coord_to_index","args":[{"name":"coord","external_name":"coord","restriction":""},{"name":"shape","external_name":"shape","restriction":""}],"return_type":"Int","visibility":"Public","body":"coord = CoordUtil.canonicalize_coord(coord, shape)\nsteps = axis_strides(shape)\n({{ @type }}).coord_to_index_fast(coord, shape, steps)\n"},"external_var":false},{"html_id":"coord_to_index_fast(coord,shape,axis_strides):Int-class-method","name":"coord_to_index_fast","doc":"Converts an n-dimensional canonicalized coordinate (all ordinates\nmust be in bounds and nonnegative) into a lexicographic buffer index.\nThis allows a slight performance increase at the expense of safety.","summary":"<p>Converts an n-dimensional canonicalized coordinate (all ordinates must be in bounds and nonnegative) into a lexicographic buffer index.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""},{"name":"shape","external_name":"shape","restriction":""},{"name":"axis_strides","external_name":"axis_strides","restriction":""}],"args_string":"(coord, shape, axis_strides) : Int","args_html":"(coord, shape, axis_strides) : Int","location":{"filename":"src/buffered/buffered.cr","line_number":44,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/buffered.cr#L44"},"def":{"name":"coord_to_index_fast","args":[{"name":"coord","external_name":"coord","restriction":""},{"name":"shape","external_name":"shape","restriction":""},{"name":"axis_strides","external_name":"axis_strides","restriction":""}],"return_type":"Int","visibility":"Public","body":"begin\n  index = (typeof(shape[0])).zero\n  coord.each_with_index do |elem, idx|\n    index = index + (elem * axis_strides[idx])\n  end\n  index\nrescue exception\n  raise(IndexError.new(\"Cannot convert coordinate to index: the given index is out of bounds for this {{@type}} along at least one dimension.\"))\nend"},"external_var":false},{"html_id":"index_to_coord(index,shape):Array-class-method","name":"index_to_coord","doc":"TODO: OPTIMIZE: This could (maybe) be improved with use of `axis_strides`\nConvert from a buffer location to an n-dimensional coord\nConverts a lexicographic buffer index into its corresponding coordinate\nin this `MultiIndexable`. The coordinate will be produced in canonical \nform (nonnegative indexes).","summary":"<p><span class=\"flag orange\">TODO</span>  OPTIMIZE: This could (maybe) be improved with use of <code><a href=\"../Phase/Buffered.html#axis_strides%28shape%29-class-method\">.axis_strides</a></code> Convert from a buffer location to an n-dimensional coord Converts a lexicographic buffer index into its corresponding coordinate in this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""},{"name":"shape","external_name":"shape","restriction":""}],"args_string":"(index, shape) : Array","args_html":"(index, shape) : Array","location":{"filename":"src/buffered/buffered.cr","line_number":67,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/buffered.cr#L67"},"def":{"name":"index_to_coord","args":[{"name":"index","external_name":"index","restriction":""},{"name":"shape","external_name":"shape","restriction":""}],"return_type":"Array","visibility":"Public","body":"if index > shape.product\n  raise(IndexError.new(\"Cannot convert index to coordinate: the given index is out of bounds for this {{@type}} along at least one dimension.\"))\nend\ncoord = shape.dup\nshape.reverse.each_with_index do |length, dim|\n  coord[dim] = index % length\n  index = index // length\nend\ncoord.reverse\n"},"external_var":false}],"instance_methods":[{"html_id":"buffer:Indexable-instance-method","name":"buffer","doc":"Returns the lexicographic buffer that stores the elements of this `MultiIndexable`.","summary":"<p>Returns the lexicographic buffer that stores the elements of this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":true,"location":{"filename":"src/buffered/buffered.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/buffered.cr#L10"},"def":{"name":"buffer","return_type":"Indexable","visibility":"Public","body":""},"external_var":false},{"html_id":"coord_to_index(coord):Int-instance-method","name":"coord_to_index","doc":"Converts an n-dimensional relative coordinate (e.g. negative indexing\nallowed) into a lexicographic buffer index.","summary":"<p>Converts an n-dimensional relative coordinate (e.g.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""}],"args_string":"(coord) : Int","args_html":"(coord) : Int","location":{"filename":"src/buffered/buffered.cr","line_number":28,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/buffered.cr#L28"},"def":{"name":"coord_to_index","args":[{"name":"coord","external_name":"coord","restriction":""}],"return_type":"Int","visibility":"Public","body":"coord = CoordUtil.canonicalize_coord(coord, shape_internal)\n({{ @type }}).coord_to_index_fast(coord, shape_internal, @axis_strides)\n"},"external_var":false},{"html_id":"index_to_coord(index):Array-instance-method","name":"index_to_coord","doc":"Convert from a buffer location to an n-dimensional coord\nConverts a lexicographic buffer index into its corresponding coordinate\nin this `MultiIndexable`. The coordinate will be produced in canonical \nform (nonnegative indexes).","summary":"<p>Convert from a buffer location to an n-dimensional coord Converts a lexicographic buffer index into its corresponding coordinate in this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index) : Array","args_html":"(index) : Array","location":{"filename":"src/buffered/buffered.cr","line_number":58,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/buffered.cr#L58"},"def":{"name":"index_to_coord","args":[{"name":"index","external_name":"index","restriction":""}],"return_type":"Array","visibility":"Public","body":"(typeof(self)).index_to_coord(index, shape_internal)"},"external_var":false}],"types":[{"html_id":"ph-core/Phase/Buffered/Indexed","path":"Phase/Buffered/Indexed.html","kind":"module","full_name":"Phase::Buffered::Indexed","name":"Indexed","abstract":false,"locations":[{"filename":"src/buffered/indexed/colex_iterator.cr","line_number":3,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/colex_iterator.cr#L3"},{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":3,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L3"},{"filename":"src/buffered/indexed/lex_iterator.cr","line_number":3,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/lex_iterator.cr#L3"},{"filename":"src/buffered/indexed/stride_iterator.cr","line_number":1,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/stride_iterator.cr#L1"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/Buffered","kind":"module","full_name":"Phase::Buffered(T)","name":"Buffered"},"types":[{"html_id":"ph-core/Phase/Buffered/Indexed/ColexIterator","path":"Phase/Buffered/Indexed/ColexIterator.html","kind":"class","full_name":"Phase::Buffered::Indexed::ColexIterator(I)","name":"ColexIterator","abstract":false,"superclass":{"html_id":"ph-core/Phase/Buffered/Indexed/StrideIterator","kind":"class","full_name":"Phase::Buffered::Indexed::StrideIterator","name":"StrideIterator"},"ancestors":[{"html_id":"ph-core/Phase/Buffered/Indexed/StrideIterator","kind":"class","full_name":"Phase::Buffered::Indexed::StrideIterator","name":"StrideIterator"},{"html_id":"ph-core/Phase/StrideIterator","kind":"class","full_name":"Phase::StrideIterator","name":"StrideIterator"},{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/buffered/indexed/colex_iterator.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/colex_iterator.cr#L4"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/Buffered/Indexed","kind":"module","full_name":"Phase::Buffered::Indexed","name":"Indexed"},"instance_methods":[{"html_id":"advance!:Array(I)|Stop-instance-method","name":"advance!","doc":"Advances the internal state of this `StrideIterator` and returns the new coord (or `Iterator::Stop` if iteration is finished).","summary":"<p>Advances the internal state of this <code><a href=\"../../../Phase/Buffered/Indexed/StrideIterator.html\">StrideIterator</a></code> and returns the new coord (or <code>Iterator::Stop</code> if iteration is finished).</p>","abstract":false,"location":{"filename":"src/buffered/indexed/colex_iterator.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/colex_iterator.cr#L7"},"def":{"name":"advance!","return_type":"Array(I) | Stop","visibility":"Public","body":"0.upto(@coord.size - 1) do |i|\n  if (@coord.unsafe_fetch(i)) == (@last.unsafe_fetch(i))\n    @buffer_index = @buffer_index - (((@coord.unsafe_fetch(i)) - (@first.unsafe_fetch(i))) * (@buffer_step.unsafe_fetch(i)))\n    @coord[i] = @first.unsafe_fetch(i)\n    if i == (@coord.size - 1)\n      return stop\n    end\n  else\n    __temp_147 = i\n    @coord[__temp_147] = @coord[__temp_147] + @step[i]\n    @buffer_index = @buffer_index + ((@buffer_step.unsafe_fetch(i)) * (@step.unsafe_fetch(i)))\n    break\n  end\nend\n\n@coord\n"},"external_var":false},{"html_id":"clone:self-instance-method","name":"clone","abstract":false,"location":{"filename":"src/buffered/indexed/colex_iterator.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/colex_iterator.cr#L5"},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"inst = Phase::Buffered::Indexed::ColexIterator(I).allocate\ninst.copy_from(self)\n"},"external_var":false}]},{"html_id":"ph-core/Phase/Buffered/Indexed/ElemAndCoordIterator","path":"Phase/Buffered/Indexed/ElemAndCoordIterator.html","kind":"class","full_name":"Phase::Buffered::Indexed::ElemAndCoordIterator(S, E, I)","name":"ElemAndCoordIterator","abstract":false,"superclass":{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L4"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"namespace":{"html_id":"ph-core/Phase/Buffered/Indexed","kind":"module","full_name":"Phase::Buffered::Indexed","name":"Indexed"},"constructors":[{"html_id":"new(src:Buffered,coord_iter:Indexed::StrideIterator(I))forallI-class-method","name":"new","doc":"Constructs an `ElemAndCoordIterator` that draws coordinates from *coord_iter* and takes the matching elements from *source*.","summary":"<p>Constructs an <code><a href=\"../../../Phase/Buffered/Indexed/ElemAndCoordIterator.html\">ElemAndCoordIterator</a></code> that draws coordinates from <em>coord_iter</em> and takes the matching elements from <em>source</em>.</p>","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"Buffered"},{"name":"coord_iter","external_name":"coord_iter","restriction":"Indexed::StrideIterator(I)"}],"args_string":"(src : Buffered, coord_iter : Indexed::StrideIterator(I)) forall I","args_html":"(src : <a href=\"../../../Phase/Buffered.html\">Buffered</a>, coord_iter : <a href=\"../../../Phase/Buffered/Indexed/StrideIterator.html\">Indexed::StrideIterator</a>(I)) forall I","location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":30,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L30"},"def":{"name":"new","args":[{"name":"src","external_name":"src","restriction":"Buffered"},{"name":"coord_iter","external_name":"coord_iter","restriction":"Indexed::StrideIterator(I)"}],"visibility":"Public","body":"new(src, typeof(src.sample), coord_iter)"},"external_var":false},{"html_id":"new(src:Buffered,idx_region:IndexRegion)-class-method","name":"new","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"Buffered"},{"name":"idx_region","external_name":"idx_region","restriction":"IndexRegion"}],"args_string":"(src : Buffered, idx_region : IndexRegion)","args_html":"(src : <a href=\"../../../Phase/Buffered.html\">Buffered</a>, idx_region : <a href=\"../../../Phase/IndexRegion.html\">IndexRegion</a>)","location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":34,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L34"},"def":{"name":"new","args":[{"name":"src","external_name":"src","restriction":"Buffered"},{"name":"idx_region","external_name":"idx_region","restriction":"IndexRegion"}],"visibility":"Public","body":"if src.dimensions != idx_region.proper_dimensions\n  raise(ShapeError.new(\"The provided IndexRegion has a proper dimension of #{idx_region.proper_dimensions}, which does not match the dimensionality of the MultiIndexable (#{src.dimensions}D).\"))\nend\n\nnew(src, idx_region.each)\n"},"external_var":false},{"html_id":"new(src:Buffered)-class-method","name":"new","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"Buffered"}],"args_string":"(src : Buffered)","args_html":"(src : <a href=\"../../../Phase/Buffered.html\">Buffered</a>)","location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":42,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L42"},"def":{"name":"new","args":[{"name":"src","external_name":"src","restriction":"Buffered"}],"visibility":"Public","body":"iter = Indexed::LexIterator.cover(src.shape)\nnew(src, iter)\n"},"external_var":false}],"instance_methods":[{"html_id":"clone:self-instance-method","name":"clone","abstract":false,"location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":79,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L79"},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"Indexed::ElemAndCoordIterator.new(@src, @coord_iter.clone)"},"external_var":false},{"html_id":"next:Tuple(E,Indexable(I))|Stop-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":47,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L47"},"def":{"name":"next","return_type":"Tuple(E, Indexable(I)) | Stop","visibility":"Public","body":"coord = @coord_iter.next\n\nif coord.is_a?(Stop)\n  stop\nelse\n  {@src.buffer.unsafe_fetch(@coord_iter.current_index), coord}\nend\n"},"external_var":false},{"html_id":"reset(*args,**options)-instance-method","name":"reset","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L10"},"def":{"name":"reset","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@coord_iter.reset(*args, **options)"},"external_var":false},{"html_id":"reset(*args,**options,&)-instance-method","name":"reset","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L10"},"def":{"name":"reset","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@coord_iter.reset(*args, **options) do |*yield_args|\n  yield *yield_args\nend"},"external_var":false},{"html_id":"reverse!(*args,**options)-instance-method","name":"reverse!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L10"},"def":{"name":"reverse!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@coord_iter.reverse!(*args, **options)"},"external_var":false},{"html_id":"reverse!(*args,**options,&)-instance-method","name":"reverse!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L10"},"def":{"name":"reverse!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@coord_iter.reverse!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"},"external_var":false},{"html_id":"reverse_each-instance-method","name":"reverse_each","abstract":false,"location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":67,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L67"},"def":{"name":"reverse_each","visibility":"Public","body":"inst = clone\ninst.reverse!\ninst\n"},"external_var":false},{"html_id":"reverse_each(&)-instance-method","name":"reverse_each","abstract":false,"location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":73,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L73"},"def":{"name":"reverse_each","yields":1,"block_arity":1,"visibility":"Public","body":"reverse_each.each do |tuple|\n  yield tuple\nend"},"external_var":false},{"html_id":"to_a-instance-method","name":"to_a","doc":"Returns an `Array` with all the elements in the collection.\n\n```\n(1..5).to_a # => [1, 2, 3, 4, 5]\n```","summary":"<p>Returns an <code>Array</code> with all the elements in the collection.</p>","abstract":false,"location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":57,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L57"},"def":{"name":"to_a","visibility":"Public","body":"arr = [] of Tuple(E, Array(I))\neach do |el|\n  arr << {el[0], el[1].to_a}\nend\narr\n"},"external_var":false},{"html_id":"unsafe_next:Tuple(E,Indexable(I))-instance-method","name":"unsafe_next","abstract":false,"location":{"filename":"src/buffered/indexed/elem_coord_iterator.cr","line_number":63,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/elem_coord_iterator.cr#L63"},"def":{"name":"unsafe_next","return_type":"Tuple(E, Indexable(I))","visibility":"Public","body":"self.next.as(Tuple(E, Indexable(I)))"},"external_var":false}]},{"html_id":"ph-core/Phase/Buffered/Indexed/LexIterator","path":"Phase/Buffered/Indexed/LexIterator.html","kind":"class","full_name":"Phase::Buffered::Indexed::LexIterator(I)","name":"LexIterator","abstract":false,"superclass":{"html_id":"ph-core/Phase/Buffered/Indexed/StrideIterator","kind":"class","full_name":"Phase::Buffered::Indexed::StrideIterator","name":"StrideIterator"},"ancestors":[{"html_id":"ph-core/Phase/Buffered/Indexed/StrideIterator","kind":"class","full_name":"Phase::Buffered::Indexed::StrideIterator","name":"StrideIterator"},{"html_id":"ph-core/Phase/StrideIterator","kind":"class","full_name":"Phase::StrideIterator","name":"StrideIterator"},{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/buffered/indexed/lex_iterator.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/lex_iterator.cr#L4"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/Buffered/Indexed","kind":"module","full_name":"Phase::Buffered::Indexed","name":"Indexed"},"instance_methods":[{"html_id":"advance!:Array(I)|Stop-instance-method","name":"advance!","doc":"Advances the internal state of this `StrideIterator` and returns the new coord (or `Iterator::Stop` if iteration is finished).","summary":"<p>Advances the internal state of this <code><a href=\"../../../Phase/Buffered/Indexed/StrideIterator.html\">StrideIterator</a></code> and returns the new coord (or <code>Iterator::Stop</code> if iteration is finished).</p>","abstract":false,"location":{"filename":"src/buffered/indexed/lex_iterator.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/lex_iterator.cr#L7"},"def":{"name":"advance!","return_type":"Array(I) | Stop","visibility":"Public","body":"(@coord.size - 1).downto(0) do |i|\n  if (@coord.unsafe_fetch(i)) == (@last.unsafe_fetch(i))\n    @buffer_index = @buffer_index - (((@coord.unsafe_fetch(i)) - (@first.unsafe_fetch(i))) * (@buffer_step.unsafe_fetch(i)))\n    @coord[i] = @first.unsafe_fetch(i)\n    if i == 0\n      return stop\n    end\n  else\n    __temp_149 = i\n    @coord[__temp_149] = @coord[__temp_149] + (@step.unsafe_fetch(i))\n    @buffer_index = @buffer_index + ((@buffer_step.unsafe_fetch(i)) * (@step.unsafe_fetch(i)))\n    break\n  end\nend\n\n@coord\n"},"external_var":false},{"html_id":"clone:self-instance-method","name":"clone","abstract":false,"location":{"filename":"src/buffered/indexed/lex_iterator.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/lex_iterator.cr#L5"},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"inst = Phase::Buffered::Indexed::LexIterator(I).allocate\ninst.copy_from(self)\n"},"external_var":false}]},{"html_id":"ph-core/Phase/Buffered/Indexed/StrideIterator","path":"Phase/Buffered/Indexed/StrideIterator.html","kind":"class","full_name":"Phase::Buffered::Indexed::StrideIterator(I)","name":"StrideIterator","abstract":true,"superclass":{"html_id":"ph-core/Phase/StrideIterator","kind":"class","full_name":"Phase::StrideIterator","name":"StrideIterator"},"ancestors":[{"html_id":"ph-core/Phase/StrideIterator","kind":"class","full_name":"Phase::StrideIterator","name":"StrideIterator"},{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/buffered/indexed/stride_iterator.cr","line_number":2,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/stride_iterator.cr#L2"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"ph-core/Phase/Buffered/Indexed/ColexIterator","kind":"class","full_name":"Phase::Buffered::Indexed::ColexIterator(I)","name":"ColexIterator"},{"html_id":"ph-core/Phase/Buffered/Indexed/LexIterator","kind":"class","full_name":"Phase::Buffered::Indexed::LexIterator(I)","name":"LexIterator"}],"namespace":{"html_id":"ph-core/Phase/Buffered/Indexed","kind":"module","full_name":"Phase::Buffered::Indexed","name":"Indexed"},"class_methods":[{"html_id":"cover(shape)-class-method","name":"cover","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":""}],"args_string":"(shape)","args_html":"(shape)","location":{"filename":"src/buffered/indexed/stride_iterator.cr","line_number":6,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/stride_iterator.cr#L6"},"def":{"name":"cover","args":[{"name":"shape","external_name":"shape","restriction":""}],"visibility":"Public","body":"new(IndexRegion.cover(shape), shape)"},"external_var":false}],"instance_methods":[{"html_id":"current_index:I-instance-method","name":"current_index","abstract":false,"location":{"filename":"src/buffered/indexed/stride_iterator.cr","line_number":28,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/stride_iterator.cr#L28"},"def":{"name":"current_index","return_type":"I","visibility":"Public","body":"@buffer_index"},"external_var":false},{"html_id":"unsafe_next_index:I-instance-method","name":"unsafe_next_index","abstract":false,"location":{"filename":"src/buffered/indexed/stride_iterator.cr","line_number":32,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/stride_iterator.cr#L32"},"def":{"name":"unsafe_next_index","return_type":"I","visibility":"Public","body":"self.next\n@buffer_index\n"},"external_var":false},{"html_id":"unsafe_next_with_index-instance-method","name":"unsafe_next_with_index","abstract":false,"location":{"filename":"src/buffered/indexed/stride_iterator.cr","line_number":24,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/stride_iterator.cr#L24"},"def":{"name":"unsafe_next_with_index","visibility":"Public","body":"{self.next.unsafe_as(ReadonlyWrapper(Array(I), I)), @buffer_index}"},"external_var":false}],"macros":[{"html_id":"def_standard_clone-macro","name":"def_standard_clone","abstract":false,"location":{"filename":"src/buffered/indexed/stride_iterator.cr","line_number":37,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/buffered/indexed/stride_iterator.cr#L37"},"def":{"name":"def_standard_clone","visibility":"Public","body":"      protected def copy_from(other : self)\n        @first = other.@first.clone\n        @step = other.@step.clone\n        @last = other.@last.clone\n        @coord = other.@coord.clone\n        @buffer_index = other.@buffer_index\n        @buffer_step = other.@buffer_step.clone\n        @wrapper = ReadonlyWrapper.new(@coord)\n        self\n      \nend\n      \n      def clone : self\n        inst = \n{{ @type }}\n.allocate\n        inst.copy_from(self)\n      \nend\n    \n"}}]}]}]},{"html_id":"ph-core/Phase/ColexIterator","path":"Phase/ColexIterator.html","kind":"class","full_name":"Phase::ColexIterator(I)","name":"ColexIterator","abstract":false,"superclass":{"html_id":"ph-core/Phase/StrideIterator","kind":"class","full_name":"Phase::StrideIterator","name":"StrideIterator"},"ancestors":[{"html_id":"ph-core/Phase/StrideIterator","kind":"class","full_name":"Phase::StrideIterator","name":"StrideIterator"},{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/iterators/colex_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/colex_iterator.cr#L10"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"An `Iterator` that produces every coordinate in an `IndexRegion` in colexicographic\n(column-major) order. For example:\n\n```crystal\nColexIterator.cover([2, 3]).each.to_a # => [[0, 0], [1, 0], [0, 1], [1, 1], [0, 1], [1, 2]]\n```","summary":"<p>An <code>Iterator</code> that produces every coordinate in an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> in colexicographic (column-major) order.</p>","constructors":[{"html_id":"new(idx_r:IndexRegion(I))-class-method","name":"new","doc":"Constructs an iterator that will provide every coordinate described by an `IndexRegion`.","summary":"<p>Constructs an iterator that will provide every coordinate described by an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"args":[{"name":"idx_r","external_name":"idx_r","restriction":"IndexRegion(I)"}],"args_string":"(idx_r : IndexRegion(I))","args_html":"(idx_r : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>(I))","location":{"filename":"src/iterators/stride_iterator.cr","line_number":85,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L85"},"def":{"name":"new","args":[{"name":"idx_r","external_name":"idx_r","restriction":"IndexRegion(I)"}],"visibility":"Public","body":"new(idx_r.@first, idx_r.@step, idx_r.@last)"},"external_var":false},{"html_id":"new(region_literal:Indexable(I))forallI-class-method","name":"new","doc":"Constructs an iterator that will provide every coordinate described by a region literal.","summary":"<p>Constructs an iterator that will provide every coordinate described by a region literal.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable(I)"}],"args_string":"(region_literal : Indexable(I)) forall I","args_html":"(region_literal : Indexable(I)) forall I","location":{"filename":"src/iterators/stride_iterator.cr","line_number":98,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L98"},"def":{"name":"new","args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable(I)"}],"visibility":"Public","body":"new(IndexRegion(I).new(region_literal))"},"external_var":false}],"instance_methods":[{"html_id":"advance!:Array(I)|Stop-instance-method","name":"advance!","doc":"Advances the internal state of this `StrideIterator` and returns the new coord (or `Iterator::Stop` if iteration is finished).","summary":"<p>Advances the internal state of this <code><a href=\"../Phase/StrideIterator.html\">StrideIterator</a></code> and returns the new coord (or <code>Iterator::Stop</code> if iteration is finished).</p>","abstract":false,"location":{"filename":"src/iterators/colex_iterator.cr","line_number":13,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/colex_iterator.cr#L13"},"def":{"name":"advance!","return_type":"Array(I) | Stop","visibility":"Public","body":"@coord.each_index do |i|\n  if (@coord.unsafe_fetch(i)) == (@last.unsafe_fetch(i))\n    @coord[i] = @first.unsafe_fetch(i)\n    if i == (@coord.size - 1)\n      return stop\n    end\n  else\n    __temp_143 = i\n    @coord[__temp_143] = @coord[__temp_143] + (@step.unsafe_fetch(i))\n    break\n  end\nend\n\n@coord\n"},"external_var":false},{"html_id":"clone:self-instance-method","name":"clone","abstract":false,"location":{"filename":"src/iterators/colex_iterator.cr","line_number":11,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/colex_iterator.cr#L11"},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"inst = Phase::ColexIterator(I).allocate\ninst.copy_from(self)\n"},"external_var":false}]},{"html_id":"ph-core/Phase/Coord","path":"Phase/Coord.html","kind":"alias","full_name":"Phase::Coord","name":"Coord","abstract":false,"locations":[{"filename":"src/type_aliases.cr","line_number":11,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/type_aliases.cr#L11"}],"repository_name":"ph-core","program":false,"enum":false,"alias":true,"aliased":"Indexable(T)","aliased_html":"Indexable(T)","const":false,"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"Should be used for return types and type restriction. This will always be\ndefined as loosely as possible","summary":"<p>Should be used for return types and type restriction.</p>"},{"html_id":"ph-core/Phase/CoordUtil","path":"Phase/CoordUtil.html","kind":"module","full_name":"Phase::CoordUtil","name":"CoordUtil","abstract":false,"locations":[{"filename":"src/coord_util.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/coord_util.cr#L5"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"ph-core/Phase/CoordUtil","kind":"module","full_name":"Phase::CoordUtil","name":"CoordUtil"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"A collection of utility functions for putting coordinates (whose ordinates\nmay be positive, forward indexes, or negative, reverse indexes) into\ncanoncial form.","summary":"<p>A collection of utility functions for putting coordinates (whose ordinates may be positive, forward indexes, or negative, reverse indexes) into canoncial form.</p>","instance_methods":[{"html_id":"canonicalize_coord(coord,shape):Coord-instance-method","name":"canonicalize_coord","doc":"Converts a `coord` into canonical form, such that each index in `coord` is positive.\nThrows an `IndexError` if at least one index specified in `coord` is out of range for the\ncorresponding axis of `shape`.","summary":"<p>Converts a <code>coord</code> into canonical form, such that each index in <code>coord</code> is positive.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""},{"name":"shape","external_name":"shape","restriction":""}],"args_string":"(coord, shape) : Coord","args_html":"(coord, shape) : <a href=\"../Phase/Coord.html\">Coord</a>","location":{"filename":"src/coord_util.cr","line_number":76,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/coord_util.cr#L76"},"def":{"name":"canonicalize_coord","args":[{"name":"coord","external_name":"coord","restriction":""},{"name":"shape","external_name":"shape","restriction":""}],"return_type":"Coord","visibility":"Public","body":"if coord.size != shape.size\n  raise(DimensionError.new(\"Could not canonicalize coordinate #{coord} to fit in shape #{shape}: shape has #{shape.size} dimensions, while coord has #{coord.size}.\"))\nend\n\ncoord.to_a.map_with_index do |index, axis|\n  (canonicalize_index(index, shape, axis)).to_i32\nend\n"},"external_var":false},{"html_id":"canonicalize_index(index,shape,axis)-instance-method","name":"canonicalize_index","doc":"Returns the canonical (positive) form of `index` along a particular `axis` of `shape`.\nThrows an `IndexError` if `index` is out of range of `shape` along this axis.","summary":"<p>Returns the canonical (positive) form of <code>index</code> along a particular <code>axis</code> of <code>shape</code>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""},{"name":"shape","external_name":"shape","restriction":""},{"name":"axis","external_name":"axis","restriction":""}],"args_string":"(index, shape, axis)","args_html":"(index, shape, axis)","location":{"filename":"src/coord_util.cr","line_number":37,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/coord_util.cr#L37"},"def":{"name":"canonicalize_index","args":[{"name":"index","external_name":"index","restriction":""},{"name":"shape","external_name":"shape","restriction":""},{"name":"axis","external_name":"axis","restriction":""}],"visibility":"Public","body":"canonicalize_index(index, shape[axis])"},"external_var":false},{"html_id":"canonicalize_index(index,size)-instance-method","name":"canonicalize_index","doc":"Returns the canonical (positive) form of `index` along a particular axis of a given `size` (number of elements).\nThrows an `IndexError` if `index` is not a valid positive or negative array index for `size` elements.","summary":"<p>Returns the canonical (positive) form of <code>index</code> along a particular axis of a given <code>size</code> (number of elements).</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""},{"name":"size","external_name":"size","restriction":""}],"args_string":"(index, size)","args_html":"(index, size)","location":{"filename":"src/coord_util.cr","line_number":43,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/coord_util.cr#L43"},"def":{"name":"canonicalize_index","args":[{"name":"index","external_name":"index","restriction":""},{"name":"size","external_name":"size","restriction":""}],"visibility":"Public","body":"if !(has_index?(index, size))\n  raise(IndexError.new(\"Could not canonicalize index: #{index} is not a valid index for an axis of length #{size}.\"))\nend\ncanonicalize_index_unsafe(index, size)\n"},"external_var":false},{"html_id":"has_coord?(coord,shape)-instance-method","name":"has_coord?","doc":"Checks if `coord` is a valid coordinate for an array-like object with dimensions specified by `shape`.\nA coord is a list (Enumerable) of integers specifying an index along each axis in `shape`.","summary":"<p>Checks if <code>coord</code> is a valid coordinate for an array-like object with dimensions specified by <code>shape</code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""},{"name":"shape","external_name":"shape","restriction":""}],"args_string":"(coord, shape)","args_html":"(coord, shape)","location":{"filename":"src/coord_util.cr","line_number":30,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/coord_util.cr#L30"},"def":{"name":"has_coord?","args":[{"name":"coord","external_name":"coord","restriction":""},{"name":"shape","external_name":"shape","restriction":""}],"visibility":"Public","body":"if coord.size != shape.size\n  return false\nend\ncoord.to_a.map_with_index do |index, axis|\n  has_index?(index, shape, axis)\nend.all?\n"},"external_var":false},{"html_id":"has_index?(index,shape,axis)-instance-method","name":"has_index?","doc":"Checks if `index` is a valid index along `axis` for an array-like object with dimensions specified by `shape`.","summary":"<p>Checks if <code>index</code> is a valid index along <code>axis</code> for an array-like object with dimensions specified by <code>shape</code>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""},{"name":"shape","external_name":"shape","restriction":""},{"name":"axis","external_name":"axis","restriction":""}],"args_string":"(index, shape, axis)","args_html":"(index, shape, axis)","location":{"filename":"src/coord_util.cr","line_number":24,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/coord_util.cr#L24"},"def":{"name":"has_index?","args":[{"name":"index","external_name":"index","restriction":""},{"name":"shape","external_name":"shape","restriction":""},{"name":"axis","external_name":"axis","restriction":""}],"visibility":"Public","body":"has_index?(index, shape[axis])"},"external_var":false},{"html_id":"has_index?(index,size:Int::Unsigned)-instance-method","name":"has_index?","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""},{"name":"size","external_name":"size","restriction":"Int::Unsigned"}],"args_string":"(index, size : Int::Unsigned)","args_html":"(index, size : Int::Unsigned)","location":{"filename":"src/coord_util.cr","line_number":9,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/coord_util.cr#L9"},"def":{"name":"has_index?","args":[{"name":"index","external_name":"index","restriction":""},{"name":"size","external_name":"size","restriction":"Int::Unsigned"}],"visibility":"Public","body":"index < size && index >= (-(size.to_big_i))"},"external_var":false},{"html_id":"has_index?(index,size:Int)-instance-method","name":"has_index?","doc":"Returns true if a given `index` can be used to access an array axis with `size` elements.","summary":"<p>Returns true if a given <code>index</code> can be used to access an array axis with <code>size</code> elements.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""},{"name":"size","external_name":"size","restriction":"Int"}],"args_string":"(index, size : Int)","args_html":"(index, size : Int)","location":{"filename":"src/coord_util.cr","line_number":19,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/coord_util.cr#L19"},"def":{"name":"has_index?","args":[{"name":"index","external_name":"index","restriction":""},{"name":"size","external_name":"size","restriction":"Int"}],"visibility":"Public","body":"index < size && index >= (-size)"},"external_var":false}]},{"html_id":"ph-core/Phase/DimensionError","path":"Phase/DimensionError.html","kind":"class","full_name":"Phase::DimensionError","name":"DimensionError","abstract":false,"superclass":{"html_id":"ph-core/Phase/ShapeError","kind":"class","full_name":"Phase::ShapeError","name":"ShapeError"},"ancestors":[{"html_id":"ph-core/Phase/ShapeError","kind":"class","full_name":"Phase::ShapeError","name":"ShapeError"},{"html_id":"ph-core/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/exceptions/exceptions.cr","line_number":18,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/exceptions/exceptions.cr#L18"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"A `DimensionError` is raised when the dimensionality of a data type is\nincorrect for a given operation. For example, a method that will work on any\nmatrix should raise a `DimensionError` when passed a 3D `MultiIndexable` - the\nshape values should not matter, only the dimension.\n\nIf you do not care about disambiguating between `ShapeError` and `DimensionError`,\nnote that `DimensionError` is a subclass of `ShapeError` - so you only need\nto `rescue ex : ShapeError` and you'll catch both kinds.","summary":"<p>A <code><a href=\"../Phase/DimensionError.html\">DimensionError</a></code> is raised when the dimensionality of a data type is incorrect for a given operation.</p>","class_methods":[{"html_id":"initialize(message:String|Nil=nil)-class-method","name":"initialize","abstract":false,"args":[{"name":"message","default_value":"nil","external_name":"message","restriction":"String | ::Nil"}],"args_string":"(message : String | Nil = nil)","args_html":"(message : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/exceptions/exceptions.cr","line_number":19,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/exceptions/exceptions.cr#L19"},"def":{"name":"initialize","args":[{"name":"message","default_value":"nil","external_name":"message","restriction":"String | ::Nil"}],"visibility":"Public","body":"super(message || \"Wrong number of dimensions for this operation.\")"},"external_var":false}]},{"html_id":"ph-core/Phase/IndexRegion","path":"Phase/IndexRegion.html","kind":"struct","full_name":"Phase::IndexRegion(T)","name":"IndexRegion","abstract":false,"superclass":{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"},{"html_id":"ph-core/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/index_region.cr","line_number":40,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L40"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DROP_BY_DEFAULT","name":"DROP_BY_DEFAULT","value":"MultiIndexable::DROP_BY_DEFAULT","doc":"See `MultiIndexable::DROP_BY_DEFAULT`","summary":"<p>See <code>MultiIndexable::DROP_BY_DEFAULT</code></p>"}],"included_modules":[{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"An `IndexRegion` represents the relationship between the coordinates in a source `MultiIndexable` and\nthe coordinates of its slicing. For example:\n```crystal\n# This is the \"source MultiIndexable\" referred to above\nnarr = NArray[['a', 'b', 'c'],\n              ['d', 'e', 'f'],\n              ['g', 'h', 'i']]\n\n# And this is a possible slicing of it:\nsliced = narr[0..2.., 1..]\nputs sliced # => [['b', 'c'],\n            #     ['h', 'i']]\n\n# An `IndexRegion` is a function from a coordinate in the context of `sliced`\n# to a coordinate in the original `NArray`. We can see this by creating an\n# `IndexRegion` via the source shape and the slicing operation:\nmapping = IndexRegion.new(region_literal: [0..2.., 1..], bound_shape: narr.shape)\n\n# sliced[0, 0] has the same element as narr[0, 1]\nputs mapping.get(0, 0) # => [0, 1]\n\n# sliced[1, 1] has the same element as narr[2, 2]\nputs mapping.get(1, 1) # => [2, 2]\n\n# We can even print the whole `IndexRegion` to see where\n# each element of sliced is coming from:\nputs mapping.to_narr\n# 2x2 Phase::NArray(Array(Int32))\n# [[[0, 1], [0, 2]],\n#  [[2, 1], [2, 2]]]\n\n# Phase uses this internally to compute slicing!\nnarr[mapping] == sliced # => true\n```","summary":"<p>An <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> represents the relationship between the coordinates in a source <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> and the coordinates of its slicing.</p>","class_methods":[{"html_id":"cover(bound_shape:Shape(T),*,drop:Bool=DROP_BY_DEFAULT,degeneracy:Array(Bool)|Nil=nil)-class-method","name":"cover","doc":"Creates an `IndexRegion` whose coordinates fully cover the given *bound_shape*.\n```crystal\nIndexRegion.cover([2, 3]).to_narr # => 2x3 Phase::NArray(Array(Int32))\n                                  #    [[[0, 0], [0, 1], [0, 2]],\n                                  #     [[1, 0], [1, 1], [1, 2]]]\n```","summary":"<p>Creates an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> whose coordinates fully cover the given <em>bound_shape</em>.</p>","abstract":false,"args":[{"name":"bound_shape","external_name":"bound_shape","restriction":"Shape(T)"},{"name":"","external_name":"","restriction":""},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"},{"name":"degeneracy","default_value":"nil","external_name":"degeneracy","restriction":"Array(Bool) | ::Nil"}],"args_string":"(bound_shape : Shape(T), *, drop : Bool = DROP_BY_DEFAULT, degeneracy : Array(Bool) | Nil = nil)","args_html":"(bound_shape : <a href=\"../Phase/Shape.html\">Shape</a>(T), *, drop : Bool = <span class=\"t\">DROP_BY_DEFAULT</span>, degeneracy : Array(Bool) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/index_region.cr","line_number":232,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L232"},"def":{"name":"cover","args":[{"name":"bound_shape","external_name":"bound_shape","restriction":"Shape(T)"},{"name":"","external_name":"","restriction":""},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"},{"name":"degeneracy","default_value":"nil","external_name":"degeneracy","restriction":"Array(Bool) | ::Nil"}],"splat_index":1,"visibility":"Public","body":"first = Array.new(bound_shape.size, T.zero)\nstep = bound_shape.map do |x|\n  x == 0 ? 0 : 1\nend\nlast = bound_shape.map do |x|\n  {T.zero, x.pred}.max\nend\nshape = bound_shape.clone\nnew(first, step, last, shape, drop, degeneracy)\n"},"external_var":false}],"constructors":[{"html_id":"new(region:IndexRegion,bound_shape:Shape)-class-method","name":"new","doc":"Copy constructor that throws a `ShapeError` if *region* doesn't fit inside of *bound_shape*.\n(see `IndexRegion#fits_in?`)\n\n```crystal\nsrc = IndexRegion.cover([3, 4]) # => IndexRegion[0..2, 0..3]\nIndexRegion.new(src, [4, 4]) # => IndexRegion[0..2, 0..3]\nIndexRegion.new(src, [2, 2]) # => ShapeError\n```","summary":"<p>Copy constructor that throws a <code><a href=\"../Phase/ShapeError.html\">ShapeError</a></code> if <em>region</em> doesn't fit inside of <em>bound_shape</em>.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"bound_shape","external_name":"bound_shape","restriction":"Shape"}],"args_string":"(region : IndexRegion, bound_shape : Shape)","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>, bound_shape : <a href=\"../Phase/Shape.html\">Shape</a>)","location":{"filename":"src/index_region.cr","line_number":109,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L109"},"def":{"name":"new","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"bound_shape","external_name":"bound_shape","restriction":"Shape"}],"visibility":"Public","body":"if region.fits_in?(bound_shape)\n  return region.clone\nend\n\nraise(ShapeError.new(\"Region #{region} does not fit inside #{bound_shape}\"))\n"},"external_var":false},{"html_id":"new(region_literal:Enumerable,bound_shape:Indexable(T),drop:Bool=DROP_BY_DEFAULT):IndexRegion(T)-class-method","name":"new","doc":"Creates an `IndexRegion` from a *region_literal*, using *bound_shape* for relative index handling.\nThis is the most commonly used `IndexRegion` constructor. If the region literal\nhas fewer dimensions than *bound_shape*, then the latter axes will be inferred as `..`.\n\n```crystal\n# Normal usage\nIndexRegion.new([1...5, ..-3], [5, 5]) # => IndexRegion[1..4, 0..2]\n\n# If the region literal is shorter than the bound shape, it\n# is filled with trailing \"..\"s\nIndexRegion.new([1], [2, 3])     # => IndexRegion[1, 0..2]\nIndexRegion.new([1, ..], [2, 3]) # => IndexRegion[1, 0..2]\n\n# If the region literal is longer than the bound shape, a\n# DimensionError is raised\nIndexRegion.new([.., 3], [3]) # => DimensionError\n\n# If the region literal is out of bounds, an IndexError\n# is raised\nIndexRegion.new([5..10], [2]) # => IndexError\nIndexRegion.new([5..10], [-2]) # => IndexError\n```","summary":"<p>Creates an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> from a <em>region_literal</em>, using <em>bound_shape</em> for relative index handling.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"Enumerable"},{"name":"bound_shape","external_name":"bound_shape","restriction":"Indexable(T)"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(region_literal : Enumerable, bound_shape : Indexable(T), drop : Bool = DROP_BY_DEFAULT) : IndexRegion(T)","args_html":"(region_literal : Enumerable, bound_shape : Indexable(T), drop : Bool = <span class=\"t\">DROP_BY_DEFAULT</span>) : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>(T)","location":{"filename":"src/index_region.cr","line_number":192,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L192"},"def":{"name":"new","args":[{"name":"region_literal","external_name":"region_literal","restriction":"Enumerable"},{"name":"bound_shape","external_name":"bound_shape","restriction":"Indexable(T)"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"return_type":"IndexRegion(T)","visibility":"Public","body":"first = Array.new(bound_shape.size, T.zero)\nstep = Array.new(bound_shape.size, 1)\nlast = Array.new(bound_shape.size, T.zero)\nshape = Array.new(bound_shape.size, T.zero)\ndegeneracy = Array(Bool).new(bound_shape.size, false)\n\nif region_literal.size > bound_shape.size\n  raise(DimensionError.new(\"The region literal #{region_literal} had more dimensions than its bound shape #{bound_shape}\"))\nend\n\nregion_literal.each_with_index do |range, i|\n  r = RangeSyntax.canonicalize_range(range, bound_shape[i])\n  first[i] = r[:first]\n  step[i] = r[:step]\n  last[i] = r[:last]\n  shape[i] = r[:size]\n\n  if range.is_a?(Int)\n    degeneracy[i] = drop\n  end\nend\n\n\n\n(region_literal.size...bound_shape.size).each do |axis|\n  last[axis] = bound_shape[axis] - 1\n  shape[axis] = bound_shape[axis]\nend\n\nnew(first, step, last, shape, drop, degeneracy)\n"},"external_var":false},{"html_id":"new(region_literal:RegionLiteral,drop:Bool=DROP_BY_DEFAULT)-class-method","name":"new","doc":"Creates an `IndexRegion` from an absolute (positive, bounded) *region_literal*.\nThis allows you to bypass the usual requirement of passing a *bound_shape*, which\nis usually needed in order to process negative or nil indexes.\n```crystal\nIndexRegion.new([1, 2...5]) # => IndexRegion[1, 2..4]\nIndexRegion.new([..]) # => Exception (TODO: pick a better exception)\nIndexRegion.new([-1]) # => Exception (TODO: pick a better exception)\n```","summary":"<p>Creates an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> from an absolute (positive, bounded) <em>region_literal</em>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"RegionLiteral"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(region_literal : RegionLiteral, drop : Bool = DROP_BY_DEFAULT)","args_html":"(region_literal : <a href=\"../Phase/RegionLiteral.html\">RegionLiteral</a>, drop : Bool = <span class=\"t\">DROP_BY_DEFAULT</span>)","location":{"filename":"src/index_region.cr","line_number":248,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L248"},"def":{"name":"new","args":[{"name":"region_literal","external_name":"region_literal","restriction":"RegionLiteral"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"visibility":"Public","body":"dims = region_literal.size\nfirst = Array(T).new(dims, T.zero)\nstep = Array(Int32).new(dims, 0)\nlast = Array(T).new(dims, T.zero)\nshape = Array(T).new(dims, T.zero)\ndegeneracy = Array(Bool).new(dims, false)\n\nregion_literal.each_with_index do |range, i|\n  RangeSyntax.ensure_nonnegative(range)\n  if !(RangeSyntax.bounded?(range))\n    raise(\"Cannot create IndexRegion without an explicit upper bound unless you provide a bounding shape\")\n  end\n\n  if range.is_a?(Int)\n    degeneracy[i] = true\n  end\n\n  r = RangeSyntax.infer_range(range, T.zero)\n  first[i] = r[:first]\n  step[i] = r[:step]\n  last[i] = r[:last]\n  shape[i] = r[:size]\nend\n\nnew(first, step, last, shape, drop, degeneracy)\n"},"external_var":false},{"html_id":"new(region_literal:Enumerable,bound_shape:Indexable|Nil=nil,drop:Bool=DROP_BY_DEFAULT,*,trim_to:Shape(T))-class-method","name":"new","doc":"Creates an `IndexRegion` by clipping the *region_literal* to fit inside of the shape *trim_to*.\nBy default, only absolute (positive) ordinates can be used in the region\nliteral - however, if a *bound_shape* is passed, relative (negative / unbounded)\nindexing can be used, and will refer to it.\n\n```crystal\n# Using *trim_to* allows you to clip a region to a shape\nIndexRegion.new([0..5, 1..2], trim_to: [2, 2]) # => IndexRegion[0..1, 1..1]\n\n# A *bound_shape* lets you use relative indexes\nIndexRegion.new([.., 2..-2], bound_shape: [3, 5], trim_to: [2, 3]) # => IndexRegion[0..1, 2..2]\n\n# This method won't throw, but it *will* return an empty\n# IndexRegion if the *region_literal* doesn't fit in *trim_to*.\nIndexRegion.new([5..8], trim_to: [3]) # => IndexRegion[0..0..0]\n```","summary":"<p>Creates an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> by clipping the <em>region_literal</em> to fit inside of the shape <em>trim_to</em>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"Enumerable"},{"name":"bound_shape","default_value":"nil","external_name":"bound_shape","restriction":"Indexable | ::Nil"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"},{"name":"","external_name":"","restriction":""},{"name":"trim_to","external_name":"trim_to","restriction":"Shape(T)"}],"args_string":"(region_literal : Enumerable, bound_shape : Indexable | Nil = nil, drop : Bool = DROP_BY_DEFAULT, *, trim_to : Shape(T))","args_html":"(region_literal : Enumerable, bound_shape : Indexable | Nil = <span class=\"n\">nil</span>, drop : Bool = <span class=\"t\">DROP_BY_DEFAULT</span>, *, trim_to : <a href=\"../Phase/Shape.html\">Shape</a>(T))","location":{"filename":"src/index_region.cr","line_number":133,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L133"},"def":{"name":"new","args":[{"name":"region_literal","external_name":"region_literal","restriction":"Enumerable"},{"name":"bound_shape","default_value":"nil","external_name":"bound_shape","restriction":"Indexable | ::Nil"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"},{"name":"","external_name":"","restriction":""},{"name":"trim_to","external_name":"trim_to","restriction":"Shape(T)"}],"splat_index":3,"visibility":"Public","body":"first = Array.new(trim_to.size, T.zero)\nstep = Array.new(trim_to.size, 1)\nlast = Array.new(trim_to.size, T.zero)\nshape = Array.new(trim_to.size, T.zero)\ndegeneracy = Array(Bool).new(trim_to.size, false)\n\n\n\nallow_relative = !bound_shape.nil?\nbound_shape || (bound_shape = trim_to)\n\nregion_literal.each_with_index do |range, i|\n  if allow_relative\n  else\n    RangeSyntax.ensure_nonnegative(range)\n  end\n  r = RangeSyntax.infer_range(range, bound_shape[i])\n  first[i] = r[:first]\n  step[i] = r[:step]\n  last[i] = r[:last]\n  shape[i] = r[:size]\n\n  if range.is_a?(Int)\n    degeneracy[i] = drop\n  end\nend\n\n\n\n(region_literal.size...bound_shape.size).each do |axis|\n  last[axis] = bound_shape[axis] - 1\n  shape[axis] = bound_shape[axis]\nend\n\n(new(first, step, last, shape, drop, degeneracy)).trim!(trim_to)\n"},"external_var":false}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns true if both the shape and elements of `self` and *other* are equal.\n\n```crystal\nNArray.new([1, 2]) == NArray.new([1, 2]) # => true\nNArray.new([[1], [2]]) == NArray.new([1, 2]) # => false\nNArray.new([8, 2]) == NArray.new([1, 2]) # => false\n```","summary":"<p>Returns true if both the shape and elements of <code>self</code> and <em>other</em> are equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @first == (other.@first)\nelse\n  return false\nend\n\nif @step == (other.@step)\nelse\n  return false\nend\n\nif @last == (other.@last)\nelse\n  return false\nend\n\nif @degeneracy == (other.@degeneracy)\nelse\n  return false\nend\n\nif @drop == (other.@drop)\nelse\n  return false\nend\n\ntrue\n"},"external_var":false},{"html_id":"absolute_to_local(coord)-instance-method","name":"absolute_to_local","doc":"Maps an absolute (output) coordinate to its corresponding local (input) coordinate.\n```crystal\nidx_r = IndexRegion(Int32).new([3..5, 2..1])\nidx_r.absolute_to_local([3, 2]) # => [0, 0]\nidx_r.absolute_to_local([4, 2]) # => [1, 0]\nidx_r.absolute_to_local([5, 1]) # => [2, 1]\n```","summary":"<p>Maps an absolute (output) coordinate to its corresponding local (input) coordinate.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""}],"args_string":"(coord)","args_html":"(coord)","location":{"filename":"src/index_region.cr","line_number":646,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L646"},"def":{"name":"absolute_to_local","args":[{"name":"coord","external_name":"coord","restriction":""}],"visibility":"Public","body":"if !(includes?(coord))\n  raise(IndexError.new(\"Could not convert coordinate: #{coord} does not exist in region #{self}\"))\nend\nabsolute_to_local_unsafe(coord)\n"},"external_var":false},{"html_id":"absolute_to_local_unsafe(coord)-instance-method","name":"absolute_to_local_unsafe","doc":"Unsafe version of `#absolute_to_local` that does not check if *coord* is in bounds for this `IndexRegion`.","summary":"<p>Unsafe version of <code><a href=\"../Phase/IndexRegion.html#absolute_to_local%28coord%29-instance-method\">#absolute_to_local</a></code> that does not check if <em>coord</em> is in bounds for this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""}],"args_string":"(coord)","args_html":"(coord)","location":{"filename":"src/index_region.cr","line_number":654,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L654"},"def":{"name":"absolute_to_local_unsafe","args":[{"name":"coord","external_name":"coord","restriction":""}],"visibility":"Public","body":"local = coord.map_with_index do |ord, i|\n  (ord - (@first.unsafe_fetch(i))) // (@step.unsafe_fetch(i))\nend\n\nif @drop\n  drop_degenerate(local) do\n    [T.zero]\n  end\nelse\n  local\nend\n"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/index_region.cr","line_number":97,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L97"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t|\n  ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive\nend %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"degeneracy:Array(Bool)-instance-method","name":"degeneracy","doc":"Stores the user-hinted dimension dropping information from the region\nliteral. For example: `IndexRegion(Int32).new(1, 1..1, 1..2)` has\n`@degeneracy == [true, false, false]` because axis 0 was an integer\n(droppable) whereas axis 1 and 2 were both ranges (and thus aren't\nreliably droppable). This array will be populated regardless of if\ndimension dropping is enabled. If this `IndexRegion` does not correspond\nto a region literal (e.g. `IndexRegion.cover(shape)`), @degeneracy should\nbe populated with `false`.","summary":"<p>Stores the user-hinted dimension dropping information from the region literal.</p>","abstract":false,"location":{"filename":"src/index_region.cr","line_number":91,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L91"},"def":{"name":"degeneracy","return_type":"Array(Bool)","visibility":"Public","body":"@degeneracy"},"external_var":false},{"html_id":"degeneracy=(degeneracy:Array(Bool))-instance-method","name":"degeneracy=","doc":"Stores the user-hinted dimension dropping information from the region\nliteral. For example: `IndexRegion(Int32).new(1, 1..1, 1..2)` has\n`@degeneracy == [true, false, false]` because axis 0 was an integer\n(droppable) whereas axis 1 and 2 were both ranges (and thus aren't\nreliably droppable). This array will be populated regardless of if\ndimension dropping is enabled. If this `IndexRegion` does not correspond\nto a region literal (e.g. `IndexRegion.cover(shape)`), @degeneracy should\nbe populated with `false`.","summary":"<p>Stores the user-hinted dimension dropping information from the region literal.</p>","abstract":false,"args":[{"name":"degeneracy","external_name":"degeneracy","restriction":"Array(Bool)"}],"args_string":"(degeneracy : Array(Bool))","args_html":"(degeneracy : Array(Bool))","location":{"filename":"src/index_region.cr","line_number":91,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L91"},"def":{"name":"degeneracy=","args":[{"name":"degeneracy","external_name":"degeneracy","restriction":"Array(Bool)"}],"visibility":"Public","body":"@degeneracy = degeneracy"},"external_var":false},{"html_id":"drop:Bool-instance-method","name":"drop","doc":"Whether or not dimensions should be dropped.","summary":"<p>Whether or not dimensions should be dropped.</p>","abstract":false,"location":{"filename":"src/index_region.cr","line_number":94,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L94"},"def":{"name":"drop","return_type":"Bool","visibility":"Public","body":"@drop"},"external_var":false},{"html_id":"each:LexIterator(T)-instance-method","name":"each","doc":"Unsafe version of `#absolute_to_local` that does not check if *coord* is in bounds for this `IndexRegion`.","summary":"<p>Unsafe version of <code><a href=\"../Phase/IndexRegion.html#absolute_to_local%28coord%29-instance-method\">#absolute_to_local</a></code> that does not check if <em>coord</em> is in bounds for this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"location":{"filename":"src/index_region.cr","line_number":667,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L667"},"def":{"name":"each","return_type":"LexIterator(T)","visibility":"Public","body":"LexIterator.new(self)"},"external_var":false},{"html_id":"first-instance-method","name":"first","doc":"Returns a copy of the coordinate of the first \"corner\" in this `IndexRegion`.\nFor example, if the region literal is `[1..3, 5..-2..1]`, the \"first\ncorner\" is `[1, 5]` - the first ordinate on the axis 0 range is 1, and\nthe first ordinate on axis 1 is 5.\nSimilarly, the `last` coordinate is `[3, 1]`.\nNote that if and only if `@step[i] == 0`, then `@first[i]` and `@last[i]` will be\nmeaningless, as an empty set of coordinates has no corners. See `@step`.","summary":"<p>Returns a copy of the coordinate of the first &quot;corner&quot; in this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"location":{"filename":"src/index_region.cr","line_number":394,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L394"},"def":{"name":"first","visibility":"Public","body":"@first.clone"},"external_var":false},{"html_id":"fits_in?(bound_shape:Shape):Bool-instance-method","name":"fits_in?","doc":"Returns true if this `IndexRegion` contains coordinates that all fit inside of\nthe given *bound_shape*. For example:\n```crystal\nidx_r = IndexRegion.new(region_literal: [1..2..], bound_shape: [5])\nidx_r.to_narr # => [[1], [3]]\n\nidx_r.fits_in?([3]) # => false\nidx_r.fits_in?([4]) # => true\nidx_r.fits_in?([4, 4]) # => DimensionError\n```","summary":"<p>Returns true if this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> contains coordinates that all fit inside of the given <em>bound_shape</em>.</p>","abstract":false,"args":[{"name":"bound_shape","external_name":"bound_shape","restriction":"Shape"}],"args_string":"(bound_shape : Shape) : Bool","args_html":"(bound_shape : <a href=\"../Phase/Shape.html\">Shape</a>) : Bool","location":{"filename":"src/index_region.cr","line_number":468,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L468"},"def":{"name":"fits_in?","args":[{"name":"bound_shape","external_name":"bound_shape","restriction":"Shape"}],"return_type":"Bool","visibility":"Public","body":"if bound_shape.size != proper_dimensions\n  raise(DimensionError.new(\"The bound shape provided had a different number of dimensions than this IndexRegion, so fits_in? is meaningless.\"))\nend\n\nbound_shape.map_with_index do |bound, i|\n  if bound <= {@first.unsafe_fetch(i), @last.unsafe_fetch(i)}.max\n    return false\n  end\nend\n\ntrue\n"},"external_var":false},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @first.hash(hasher)\n\nhasher = @step.hash(hasher)\n\nhasher = @last.hash(hasher)\n\nhasher = @degeneracy.hash(hasher)\n\nhasher = @drop.hash(hasher)\n\nhasher\n"},"external_var":false},{"html_id":"includes?(coord:InputCoord)-instance-method","name":"includes?","doc":"Returns true if this `IndexRegion` points to the provided *coord*.\nFor example:\n```crystal\n\nidx_r = IndexRegion(Int32).new([0..3, 5..7])\n\n# This IndexRegion maps the input coordinate [0, 0] to [0, 5]\nidx_r.get(0, 0) # => [0, 5]\n\n# And thus it includes [0, 5]\nidx_r.includes? [0, 5] # => true\n\n# On the other hand, no input coordinate will map to [10, 10]\nidx_r.includes? [10, 10] # => false\n\n# Don't confuse input and output coordinates, here! Like all\n# `MultiIndexable`s, idx_r implements `#has_coord?`. `#includes?`\n# refers to the values (output coordinates) of the `IndexRegion`,\n# whereas `#has_coord?` refers to the input coordinates.\nidx_r.includes? [0, 0] # => false\nidx_r.has_coord? [0, 0] # => true\n```","summary":"<p>Returns true if this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> points to the provided <em>coord</em>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"InputCoord"}],"args_string":"(coord : InputCoord)","args_html":"(coord : <a href=\"../Phase/InputCoord.html\">InputCoord</a>)","location":{"filename":"src/index_region.cr","line_number":443,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L443"},"def":{"name":"includes?","args":[{"name":"coord","external_name":"coord","restriction":"InputCoord"}],"visibility":"Public","body":"if coord.size == proper_dimensions\nelse\n  return false\nend\ncoord.each_with_index do |ord, i|\n  if (@step.unsafe_fetch(i)) > 0\n    bounds = (@first.unsafe_fetch(i))..(@last.unsafe_fetch(i))\n  else\n    bounds = (@last.unsafe_fetch(i))..(@first.unsafe_fetch(i))\n  end\n  if bounds.includes?(ord)\n  else\n    return false\n  end\n  if ((ord - (@first.unsafe_fetch(i))) % (@step.unsafe_fetch(i))) == 0\n  else\n    return false\n  end\nend\ntrue\n"},"external_var":false},{"html_id":"last-instance-method","name":"last","doc":"Similar to `IndexRegion#first`.\nFor example, if the region literal is `[1..3, 5..-2..1]`, the \"last\ncorner\" is `[3, 1]` - the last ordinate on the axis 0 range is 3, and\nthe last ordinate on axis 1 is 1.","summary":"<p>Similar to <code><a href=\"../Phase/IndexRegion.html#first-instance-method\">IndexRegion#first</a></code>.</p>","abstract":false,"location":{"filename":"src/index_region.cr","line_number":402,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L402"},"def":{"name":"last","visibility":"Public","body":"@last.clone"},"external_var":false},{"html_id":"local_to_absolute(coord)-instance-method","name":"local_to_absolute","doc":"Maps a local (input) coordinate to its corresponding absolute (output) coordinate.\nThis is equivalent to using `IndexRegion#[](coord)`, but it is aliased\nhere in order to make `IndexRegion` code easier to reason\nabout.\nFor example:\n```crystal\nidx_r = IndexRegion(Int32).new([3..5, 2..1])\nidx_r.local_to_absolute([0, 0]) # => [3, 2]\nidx_r[0, 0] # => [3, 2]\n```","summary":"<p>Maps a local (input) coordinate to its corresponding absolute (output) coordinate.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""}],"args_string":"(coord)","args_html":"(coord)","location":{"filename":"src/index_region.cr","line_number":616,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L616"},"def":{"name":"local_to_absolute","args":[{"name":"coord","external_name":"coord","restriction":""}],"visibility":"Public","body":"get(coord)"},"external_var":false},{"html_id":"local_to_absolute_unsafe(coord:Coord):Array(T)-instance-method","name":"local_to_absolute_unsafe","doc":"Unsafe version of `#local_to_absolute` that does not check if *coord* is in bounds for this `IndexRegion`.","summary":"<p>Unsafe version of <code><a href=\"../Phase/IndexRegion.html#local_to_absolute%28coord%29-instance-method\">#local_to_absolute</a></code> that does not check if <em>coord</em> is in bounds for this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Coord"}],"args_string":"(coord : Coord) : Array(T)","args_html":"(coord : <a href=\"../Phase/Coord.html\">Coord</a>) : Array(T)","location":{"filename":"src/index_region.cr","line_number":621,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L621"},"def":{"name":"local_to_absolute_unsafe","args":[{"name":"coord","external_name":"coord","restriction":"Coord"}],"return_type":"Array(T)","visibility":"Public","body":"if @drop\n  local_axis = 0\n  degeneracy.map_with_index do |degenerate, i|\n    if degenerate\n      @first.unsafe_fetch(i)\n    else\n      local_axis = local_axis + 1\n      (@first.unsafe_fetch(i)) + ((coord.unsafe_fetch(local_axis - 1)) * (@step.unsafe_fetch(i)))\n    end\n  end\nelse\n  coord.map_with_index do |ord, i|\n    @first[i] + (ord * @step[i])\n  end\nend"},"external_var":false},{"html_id":"proper_dimensions:Int32-instance-method","name":"proper_dimensions","doc":"Returns the number of dimensions of the space that this `IndexRegion` maps into.\nFor example:\n```crystal\n#                          region   proper shape\nidx_r = IndexRegion.new([1, .., ..], [5, 5, 5])\n\n# The IndexRegion above describes a 2D region (a matrix)\nputs idx_r.dimensions # => 2\n\n# But the matrix draws out of a 3D MultiIndexable:\nputs idx_r.proper_dimensions # => 3\n```","summary":"<p>Returns the number of dimensions of the space that this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> maps into.</p>","abstract":false,"location":{"filename":"src/index_region.cr","line_number":355,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L355"},"def":{"name":"proper_dimensions","return_type":"Int32","visibility":"Public","body":"@proper_shape.size"},"external_var":false},{"html_id":"reverse:self-instance-method","name":"reverse","doc":"Returns a reversed copy of this `IndexRegion`. See `#reverse!`.","summary":"<p>Returns a reversed copy of this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"location":{"filename":"src/index_region.cr","line_number":540,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L540"},"def":{"name":"reverse","return_type":"self","visibility":"Public","body":"clone.reverse!"},"external_var":false},{"html_id":"reverse!:IndexRegion(T)-instance-method","name":"reverse!","doc":"Reverses the ordering of an `IndexRegion` in place.\nFor example:\n```crystal\nidx_r = IndexRegion(Int32).new([0..2..2])\nnarr = NArray['a', 'b', 'c']\n\nidx_r.each { |coord| puts coord } # => [0], [2]\nnarr[idx_r] # => NArray['a', 'c']\n\nidx_r.reverse!\nidx_r.each { |coord| puts coord } # => [2], [0]\nnarr[idx_r] # => NArray['c', 'a']\n```","summary":"<p>Reverses the ordering of an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> in place.</p>","abstract":false,"location":{"filename":"src/index_region.cr","line_number":533,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L533"},"def":{"name":"reverse!","return_type":"IndexRegion(T)","visibility":"Public","body":"@first, @last = @last, @first\n@step = @step.map(&.-)\nself\n"},"external_var":false},{"html_id":"shape_internal(drop=MultiIndexable::DROP_BY_DEFAULT):Array(T)-instance-method","name":"shape_internal","doc":"============= Methods required by MultiIndexable ===========================\nTODO: *drop* isn't being used here, why is it included?","summary":"<p>============= Methods required by MultiIndexable =========================== TODO: <em>drop</em> isn't being used here, why is it included?</p>","abstract":false,"args":[{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":""}],"args_string":"(drop = MultiIndexable::DROP_BY_DEFAULT) : Array(T)","args_html":"(drop = <span class=\"t\">MultiIndexable</span><span class=\"t\">::</span><span class=\"t\">DROP_BY_DEFAULT</span>) : Array(T)","location":{"filename":"src/index_region.cr","line_number":339,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L339"},"def":{"name":"shape_internal","args":[{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":""}],"return_type":"Array(T)","visibility":"Public","body":"@reduced_shape"},"external_var":false},{"html_id":"stride-instance-method","name":"stride","doc":"Returns the spacing between elements along each axis.\nFor example, if the region literal is `[1..3, 5..-2..1]`, the\nstride on axis 0 is `1` (by default), and the stride on axis 1 is\n`-2` (as written in the region literal). Thus, calling `#stride` on\nthe corresponding `IndexRegion` would yield `[1, -2]`.\n```crystal\nidx_r = IndexRegion(Int32).new([1..3, 5..-2..1])\nputs idx_r.stride # => [1, -2]\n```","summary":"<p>Returns the spacing between elements along each axis.</p>","abstract":false,"location":{"filename":"src/index_region.cr","line_number":417,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L417"},"def":{"name":"stride","visibility":"Public","body":"@step.clone"},"external_var":false},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Returns a translated copy of this `IndexRegion`. See `#translate!`.","summary":"<p>Returns a translated copy of this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/index_region.cr","line_number":593,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L593"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"IndexRegion\"\nio << @degeneracy.map_with_index do |degen, i|\n  if degen\n    @first[i]\n  else\n    if @step[i].abs == 1\n      @first[i]..@last[i]\n    else\n      (@first[i]..@step[i])..@last[i]\n    end\n  end\nend\n"},"external_var":false},{"html_id":"translate(offset:Enumerable):self-instance-method","name":"translate","doc":"Returns a translated copy of this `IndexRegion`. See `#translate!`.","summary":"<p>Returns a translated copy of this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"Enumerable"}],"args_string":"(offset : Enumerable) : self","args_html":"(offset : Enumerable) : <span class=\"k\">self</span>","location":{"filename":"src/index_region.cr","line_number":588,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L588"},"def":{"name":"translate","args":[{"name":"offset","external_name":"offset","restriction":"Enumerable"}],"return_type":"self","visibility":"Public","body":"self.clone.translate!(offset)"},"external_var":false},{"html_id":"translate!(offset:Enumerable):self-instance-method","name":"translate!","doc":"Translates this `IndexRegion` in place by adding an *offset* to each output coordinate.\nFor example:\n```crystal\nidx_r = IndexRegion(Int32).new([0, 5..-2..0])\nputs idx_r # => IndexRegion[0, 5..-2..1]\n\nidx_r.translate!([1, -1])\nputs idx_r # => IndexRegion[1, 4..-2..0]\n\nIndexRegions only output canonical coordinates. This\ntranslation would produce negative ordinates in the output coords,\nwhich is illegal.\nidx_r.translate!([-10, -10]) # => IndexError\n```","summary":"<p>Translates this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> in place by adding an <em>offset</em> to each output coordinate.</p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"Enumerable"}],"args_string":"(offset : Enumerable) : self","args_html":"(offset : Enumerable) : <span class=\"k\">self</span>","location":{"filename":"src/index_region.cr","line_number":577,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L577"},"def":{"name":"translate!","args":[{"name":"offset","external_name":"offset","restriction":"Enumerable"}],"return_type":"self","visibility":"Public","body":"offset.each_with_index do |amount, axis|\n  if amount < 0 && (@first[axis] < (-amount) || @last[axis] < (-amount))\n    raise(IndexError.new(\"Can't translate to negative indices\"))\n  end\nend\nunsafe_translate!(offset)\n"},"external_var":false},{"html_id":"trim(bound_shape):self-instance-method","name":"trim","doc":"Returns a trimmed copy of this `IndexRegion`. See `#trim!`.","summary":"<p>Returns a trimmed copy of this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"args":[{"name":"bound_shape","external_name":"bound_shape","restriction":""}],"args_string":"(bound_shape) : self","args_html":"(bound_shape) : <span class=\"k\">self</span>","location":{"filename":"src/index_region.cr","line_number":545,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L545"},"def":{"name":"trim","args":[{"name":"bound_shape","external_name":"bound_shape","restriction":""}],"return_type":"self","visibility":"Public","body":"self.clone.trim!(bound_shape)"},"external_var":false},{"html_id":"trim!(bound_shape:Shape):self-instance-method","name":"trim!","doc":"Clips this `IndexRegion` in-place to fit the *bound_shape* provided.\n\n```crystal\na = IndexRegion(Int32).new([1..3, 10..-2..0])\nputs a # => IndexRegion[1..3, 10..-2..0]\n\n# Trimming to a shape that `a` fits in has no effect:\na.trim!([100, 100])\nputs a # => IndexRegion[1..3, 10..-2..0]\n\na.trim!([2, 3])\nputs a # => IndexRegion[1..1, 2..-2..0]\n\n# It's possible to recieve an empty result after trimming\nb = IndexRegion(Int32).new([5..6])\nb.trim!([0])\nputs b # => IndexRegion[0..0..0] (no elements)\n\n# When using the wrong number of dimensions, a DimensionError is raised\nc = IndexRegion(Int32).new([5..4])\nc.trim!([4, 3]) # => DimensionError\n```","summary":"<p>Clips this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> in-place to fit the <em>bound_shape</em> provided.</p>","abstract":false,"args":[{"name":"bound_shape","external_name":"bound_shape","restriction":"Shape"}],"args_string":"(bound_shape : Shape) : self","args_html":"(bound_shape : <a href=\"../Phase/Shape.html\">Shape</a>) : <span class=\"k\">self</span>","location":{"filename":"src/index_region.cr","line_number":502,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L502"},"def":{"name":"trim!","args":[{"name":"bound_shape","external_name":"bound_shape","restriction":"Shape"}],"return_type":"self","visibility":"Public","body":"if bound_shape.size != proper_dimensions\n  raise(DimensionError.new(\"invalid error :)\"))\nend\n\nbound_shape.each_with_index do |container_size, axis|\n  @first[axis], @step[axis], @last[axis], @proper_shape[axis] = IndexRegion.trim_axis(container_size, @first[axis], @step[axis], @last[axis], @proper_shape[axis])\nend\n\n@reduced_shape = IndexRegion.compute_reduced_shape(@proper_shape, @degeneracy, @drop)\nself\n"},"external_var":false},{"html_id":"unsafe_fetch_chunk(region:IndexRegion,drop:Bool):IndexRegion(T)-instance-method","name":"unsafe_fetch_chunk","doc":"Returns the number of dimensions of the space that this `IndexRegion` maps into.\nFor example:\n```crystal\n#                          region   proper shape\nidx_r = IndexRegion.new([1, .., ..], [5, 5, 5])\n\n# The IndexRegion above describes a 2D region (a matrix)\nputs idx_r.dimensions # => 2\n\n# But the matrix draws out of a 3D MultiIndexable:\nputs idx_r.proper_dimensions # => 3\n```","summary":"<p>Returns the number of dimensions of the space that this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> maps into.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"drop","external_name":"drop","restriction":"Bool"}],"args_string":"(region : IndexRegion, drop : Bool) : IndexRegion(T)","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>, drop : Bool) : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>(T)","location":{"filename":"src/index_region.cr","line_number":360,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L360"},"def":{"name":"unsafe_fetch_chunk","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"drop","external_name":"drop","restriction":"Bool"}],"return_type":"IndexRegion(T)","visibility":"Public","body":"if drop\n  @degeneracy.map_with_index do |el, idx|\n    el || region.degeneracy[idx]\n  end\nend\n\n\n\nnew_first = local_to_absolute_unsafe(region.first)\nnew_last = local_to_absolute_unsafe(region.last)\n\nnew_step = @step.map_with_index do |outer_step, i|\n  outer_step * (region.step.unsafe_fetch(i))\nend\nIndexRegion(T).new(new_first, new_step, new_last, region.shape)\n"},"external_var":false},{"html_id":"unsafe_fetch_element(coord:Coord):Array(T)-instance-method","name":"unsafe_fetch_element","doc":"Returns the number of dimensions of the space that this `IndexRegion` maps into.\nFor example:\n```crystal\n#                          region   proper shape\nidx_r = IndexRegion.new([1, .., ..], [5, 5, 5])\n\n# The IndexRegion above describes a 2D region (a matrix)\nputs idx_r.dimensions # => 2\n\n# But the matrix draws out of a 3D MultiIndexable:\nputs idx_r.proper_dimensions # => 3\n```","summary":"<p>Returns the number of dimensions of the space that this <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> maps into.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Coord"}],"args_string":"(coord : Coord) : Array(T)","args_html":"(coord : <a href=\"../Phase/Coord.html\">Coord</a>) : Array(T)","location":{"filename":"src/index_region.cr","line_number":383,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L383"},"def":{"name":"unsafe_fetch_element","args":[{"name":"coord","external_name":"coord","restriction":"Coord"}],"return_type":"Array(T)","visibility":"Public","body":"local_to_absolute_unsafe(coord.to_a)"},"external_var":false},{"html_id":"unsafe_translate!(offset:Enumerable):self-instance-method","name":"unsafe_translate!","doc":"Translates an `IndexRegion` in place, without checking that the result is valid.\nSee `#translate!`.\nWARNING: this allows for the creation of IndexRegions with negative ordinates,\nwhich may cause undocumented behaviour elsewhere in the code. The burden\nis on the user to ensure that negative ordinates are not created, or that\nthey are appropriately handled.","summary":"<p>Translates an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> in place, without checking that the result is valid.</p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"Enumerable"}],"args_string":"(offset : Enumerable) : self","args_html":"(offset : Enumerable) : <span class=\"k\">self</span>","location":{"filename":"src/index_region.cr","line_number":555,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/index_region.cr#L555"},"def":{"name":"unsafe_translate!","args":[{"name":"offset","external_name":"offset","restriction":"Enumerable"}],"return_type":"self","visibility":"Public","body":"offset.each_with_index do |amount, axis|\n  __temp_139 = axis\n  @first[__temp_139] = @first[__temp_139] + amount\n  __temp_141 = axis\n  @last[__temp_141] = @last[__temp_141] + amount\nend\nself\n"},"external_var":false}]},{"html_id":"ph-core/Phase/InputCoord","path":"Phase/InputCoord.html","kind":"alias","full_name":"Phase::InputCoord","name":"InputCoord","abstract":false,"locations":[{"filename":"src/type_aliases.cr","line_number":12,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/type_aliases.cr#L12"}],"repository_name":"ph-core","program":false,"enum":false,"alias":true,"aliased":"Indexable(T)","aliased_html":"Indexable(T)","const":false,"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"}},{"html_id":"ph-core/Phase/LexIterator","path":"Phase/LexIterator.html","kind":"class","full_name":"Phase::LexIterator(I)","name":"LexIterator","abstract":false,"superclass":{"html_id":"ph-core/Phase/StrideIterator","kind":"class","full_name":"Phase::StrideIterator","name":"StrideIterator"},"ancestors":[{"html_id":"ph-core/Phase/StrideIterator","kind":"class","full_name":"Phase::StrideIterator","name":"StrideIterator"},{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/iterators/lex_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/lex_iterator.cr#L10"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"An `iterator` that produces every coordinate in an `IndexRegion` in lexicographic\n(row-major) order. For example:\n\n```crystal\nLexIterator.cover([2, 3]).each.to_a # => [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2]]\n```","summary":"<p>An <code>iterator</code> that produces every coordinate in an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> in lexicographic (row-major) order.</p>","constructors":[{"html_id":"new(idx_r:IndexRegion(I))-class-method","name":"new","doc":"Constructs an iterator that will provide every coordinate described by an `IndexRegion`.","summary":"<p>Constructs an iterator that will provide every coordinate described by an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"args":[{"name":"idx_r","external_name":"idx_r","restriction":"IndexRegion(I)"}],"args_string":"(idx_r : IndexRegion(I))","args_html":"(idx_r : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>(I))","location":{"filename":"src/iterators/stride_iterator.cr","line_number":85,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L85"},"def":{"name":"new","args":[{"name":"idx_r","external_name":"idx_r","restriction":"IndexRegion(I)"}],"visibility":"Public","body":"new(idx_r.@first, idx_r.@step, idx_r.@last)"},"external_var":false},{"html_id":"new(region_literal:Indexable(I))forallI-class-method","name":"new","doc":"Constructs an iterator that will provide every coordinate described by a region literal.","summary":"<p>Constructs an iterator that will provide every coordinate described by a region literal.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable(I)"}],"args_string":"(region_literal : Indexable(I)) forall I","args_html":"(region_literal : Indexable(I)) forall I","location":{"filename":"src/iterators/stride_iterator.cr","line_number":98,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L98"},"def":{"name":"new","args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable(I)"}],"visibility":"Public","body":"new(IndexRegion(I).new(region_literal))"},"external_var":false}],"instance_methods":[{"html_id":"advance!:Array(I)|Stop-instance-method","name":"advance!","doc":"Advances the internal state of this `StrideIterator` and returns the new coord (or `Iterator::Stop` if iteration is finished).","summary":"<p>Advances the internal state of this <code><a href=\"../Phase/StrideIterator.html\">StrideIterator</a></code> and returns the new coord (or <code>Iterator::Stop</code> if iteration is finished).</p>","abstract":false,"location":{"filename":"src/iterators/lex_iterator.cr","line_number":13,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/lex_iterator.cr#L13"},"def":{"name":"advance!","return_type":"Array(I) | Stop","visibility":"Public","body":"(@coord.size - 1).downto(0) do |i|\n  if (@coord.unsafe_fetch(i)) == (@last.unsafe_fetch(i))\n    @coord[i] = @first.unsafe_fetch(i)\n    if i == 0\n      return stop\n    end\n  else\n    @coord[i] = (@coord.unsafe_fetch(i)) + (@step.unsafe_fetch(i))\n    break\n  end\nend\n\n@coord\n"},"external_var":false},{"html_id":"clone:self-instance-method","name":"clone","abstract":false,"location":{"filename":"src/iterators/lex_iterator.cr","line_number":11,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/lex_iterator.cr#L11"},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"inst = Phase::LexIterator(I).allocate\ninst.copy_from(self)\n"},"external_var":false}]},{"html_id":"ph-core/Phase/MultiIndexable","path":"Phase/MultiIndexable.html","kind":"module","full_name":"Phase::MultiIndexable(T)","name":"MultiIndexable","abstract":false,"ancestors":[{"html_id":"ph-core/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"locations":[{"filename":"src/multi_indexable.cr","line_number":16,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L16"},{"filename":"src/multi_indexable/chunk_iterator.cr","line_number":2,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/chunk_iterator.cr#L2"},{"filename":"src/multi_indexable/chunk_region_iterator.cr","line_number":2,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/chunk_region_iterator.cr#L2"},{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":2,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L2"},{"filename":"src/multi_indexable/elem_iterator.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L4"},{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L7"},{"filename":"src/multi_indexable/formatter/settings.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L4"},{"filename":"src/multi_indexable/tiling_lex_iterator.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/tiling_lex_iterator.cr#L4"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"including_types":[{"html_id":"ph-core/Phase/Buffered","kind":"module","full_name":"Phase::Buffered(T)","name":"Buffered"},{"html_id":"ph-core/Phase/IndexRegion","kind":"struct","full_name":"Phase::IndexRegion(T)","name":"IndexRegion"},{"html_id":"ph-core/Phase/NArray","kind":"class","full_name":"Phase::NArray(T)","name":"NArray"},{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView(S, R)","name":"ReadonlyView"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"The `MultiIndexable` module provides a unified interface for\nmultidimensional array types, much like how `Indexable` provides a standard\ncorpus of methods for one-dimensional collections.\n\n### How to Implement a `MultiIndexable`\nImplementing `MultiIndexable` will require that you provide a `#shape` and\n`#unsafe_fetch_element` method, however this is the bare minimum. For a\nperformant implementation, you should consider overriding\n`#unsafe_fetch_chunk`, `#fast_each`, and `#size` in that order of importance\n(and more as you see fit).","summary":"<p>The <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> module provides a unified interface for multidimensional array types, much like how <code>Indexable</code> provides a standard corpus of methods for one-dimensional collections.</p>","class_methods":[{"html_id":"each_with(*args:*U,&)forallU-class-method","name":"each_with","abstract":false,"args":[{"name":"args","external_name":"args","restriction":"*U"}],"args_string":"(*args : *U, &) forall U","args_html":"(*args : <span class=\"o\">*</span><span class=\"t\">U</span>, &) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1147,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1147"},"def":{"name":"each_with","args":[{"name":"args","external_name":"args","restriction":"*U"}],"splat_index":0,"yields":0,"block_arity":0,"visibility":"Public","body":"{% if true %}\n        {% found_first = false %}\n        {% for i in 0...(U.size) %}\n          {% if U[i] < MultiIndexable %}\n            {% if found_first == false %}\n              {% found_first = true %}\n              first = args[{{ i }}]\n            {% else %}\n              raise ShapeError.new(\"Could not simultaneously map MultiIndexables with shapes #{args[{{ i }}].shape} and #{first.shape}.\") unless args[{{ i }}].shape == first.shape\n            {% end %}\n          {% end %}\n        {% end %}\n        \n        first.each_coord do |coord|\n          yield(\n            {% for i in 0...(U.size) %}\n              {% if U[i] < MultiIndexable %} args[{{ i }}].unsafe_fetch_element(coord) {% else %} args[{{ i }}]{% end %},\n            {% end %}\n          )\n        end\n      {% end %}"},"external_var":false}],"instance_methods":[{"html_id":"%(other:MultiIndexable(U))forallU-instance-method","name":"%","doc":"Invokes `#%` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#%</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1009,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1009"},"def":{"name":"%","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '%' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '%' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem % other_elem\nend\n"},"external_var":false},{"html_id":"%(other)-instance-method","name":"%","doc":"Invokes `#%(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#%(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1009,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1009"},"def":{"name":"%","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.%(other))"},"external_var":false},{"html_id":"&(other:MultiIndexable(U))forallU-instance-method","name":"&","doc":"Invokes `#&` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1017,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1017"},"def":{"name":"&","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '&' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '&' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem & other_elem\nend\n"},"external_var":false},{"html_id":"&(other)-instance-method","name":"&","doc":"Invokes `#&(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1017,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1017"},"def":{"name":"&","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.&(other))"},"external_var":false},{"html_id":"&*(other:MultiIndexable(U))forallU-instance-method","name":"&*","doc":"Invokes `#&*` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;*</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1014,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1014"},"def":{"name":"&*","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '&*' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '&*' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem &* other_elem\nend\n"},"external_var":false},{"html_id":"&*(other)-instance-method","name":"&*","doc":"Invokes `#&*(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;*(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1014,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1014"},"def":{"name":"&*","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.&*(other))"},"external_var":false},{"html_id":"&**(other:MultiIndexable(U))forallU-instance-method","name":"&**","doc":"Invokes `#&**` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;**</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1015,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1015"},"def":{"name":"&**","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '&**' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '&**' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem &** other_elem\nend\n"},"external_var":false},{"html_id":"&**(other)-instance-method","name":"&**","doc":"Invokes `#&**(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;**(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1015,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1015"},"def":{"name":"&**","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.&**(other))"},"external_var":false},{"html_id":"&+(other:MultiIndexable(U))forallU-instance-method","name":"&+","doc":"Invokes `#&+` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;+</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1012,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1012"},"def":{"name":"&+","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '&+' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '&+' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem &+ other_elem\nend\n"},"external_var":false},{"html_id":"&+(other)-instance-method","name":"&+","doc":"Invokes `#&+(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;+(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1012,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1012"},"def":{"name":"&+","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.&+(other))"},"external_var":false},{"html_id":"&-(other:MultiIndexable(U))forallU-instance-method","name":"&-","doc":"Invokes `#&-` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;-</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1013,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1013"},"def":{"name":"&-","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '&-' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '&-' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem &- other_elem\nend\n"},"external_var":false},{"html_id":"&-(other)-instance-method","name":"&-","doc":"Invokes `#&-(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#&amp;-(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1013,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1013"},"def":{"name":"&-","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.&-(other))"},"external_var":false},{"html_id":"*(other:MultiIndexable(U))forallU-instance-method","name":"*","doc":"Invokes `#*` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#%2A%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#*</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1006,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1006"},"def":{"name":"*","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '*' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '*' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem * other_elem\nend\n"},"external_var":false},{"html_id":"*(other)-instance-method","name":"*","doc":"Invokes `#*(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#%2A%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#*(other)</a></code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1006,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1006"},"def":{"name":"*","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.*(other))"},"external_var":false},{"html_id":"**(other:MultiIndexable(U))forallU-instance-method","name":"**","doc":"Invokes `#**` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#%2A%2A%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#**</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1010,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1010"},"def":{"name":"**","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '**' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '**' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem ** other_elem\nend\n"},"external_var":false},{"html_id":"**(other)-instance-method","name":"**","doc":"Invokes `#**(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#%2A%2A%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#**(other)</a></code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1010,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1010"},"def":{"name":"**","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.**(other))"},"external_var":false},{"html_id":"+(other:MultiIndexable(U))forallU-instance-method","name":"+","doc":"Invokes `#+` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#%2B-instance-method\">#+</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1004,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1004"},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '+' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '+' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem + other_elem\nend\n"},"external_var":false},{"html_id":"+(other)-instance-method","name":"+","doc":"Invokes `#+(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#%2B%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#+(other)</a></code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1004,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1004"},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.+(other))"},"external_var":false},{"html_id":"+-instance-method","name":"+","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":1027,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1027"},"def":{"name":"+","visibility":"Public","body":"map(&.+)"},"external_var":false},{"html_id":"-(other:MultiIndexable(U))forallU-instance-method","name":"-","doc":"Invokes `#-` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#--instance-method\">#-</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1005,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1005"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '-' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '-' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem - other_elem\nend\n"},"external_var":false},{"html_id":"-(other)-instance-method","name":"-","doc":"Invokes `#-(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#-%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#-(other)</a></code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1005,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1005"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.-(other))"},"external_var":false},{"html_id":"--instance-method","name":"-","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":1028,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1028"},"def":{"name":"-","visibility":"Public","body":"map(&.-)"},"external_var":false},{"html_id":"/(other:MultiIndexable(U))forallU-instance-method","name":"/","doc":"Invokes `#/` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#/%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#/</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1007,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1007"},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '/' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '/' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem / other_elem\nend\n"},"external_var":false},{"html_id":"/(other)-instance-method","name":"/","doc":"Invokes `#/(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#/%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#/(other)</a></code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1007,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1007"},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&./(other))"},"external_var":false},{"html_id":"//(other:MultiIndexable(U))forallU-instance-method","name":"//","doc":"Invokes `#//` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#//%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#//</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1008,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1008"},"def":{"name":"//","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '//' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '//' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem // other_elem\nend\n"},"external_var":false},{"html_id":"//(other)-instance-method","name":"//","doc":"Invokes `#//(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#//%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#//(other)</a></code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1008,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1008"},"def":{"name":"//","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.//(other))"},"external_var":false},{"html_id":"<(other:MultiIndexable(U))forallU-instance-method","name":"<","doc":"Invokes `#<` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&lt;</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1022,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1022"},"def":{"name":"<","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '<' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '<' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem < other_elem\nend\n"},"external_var":false},{"html_id":"<(other)-instance-method","name":"<","doc":"Invokes `#<(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#&lt;(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1022,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1022"},"def":{"name":"<","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.<(other))"},"external_var":false},{"html_id":"<=(other:MultiIndexable(U))forallU-instance-method","name":"<=","doc":"Invokes `#<=` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&lt;=</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1024,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1024"},"def":{"name":"<=","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '<=' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '<=' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem <= other_elem\nend\n"},"external_var":false},{"html_id":"<=(other)-instance-method","name":"<=","doc":"Invokes `#<=(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#&lt;=(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1024,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1024"},"def":{"name":"<=","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.<=(other))"},"external_var":false},{"html_id":"<=>(other:MultiIndexable(U))forallU-instance-method","name":"<=>","doc":"Invokes `#<=>` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&lt;=&gt;</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1025,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1025"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '<=>' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '<=>' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem <=> other_elem\nend\n"},"external_var":false},{"html_id":"<=>(other)-instance-method","name":"<=>","doc":"Invokes `#<=>(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#&lt;=&gt;(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1025,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1025"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.<=>(other))"},"external_var":false},{"html_id":"==(other:self):Bool-instance-method","name":"==","doc":"Returns true if both the shape and elements of `self` and *other* are equal.\n\n```crystal\nNArray.new([1, 2]) == NArray.new([1, 2]) # => true\nNArray.new([[1], [2]]) == NArray.new([1, 2]) # => false\nNArray.new([8, 2]) == NArray.new([1, 2]) # => false\n```","summary":"<p>Returns true if both the shape and elements of <code>self</code> and <em>other</em> are equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/multi_indexable.cr","line_number":74,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L74"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"equals?(other) do |this_elem, other_elem|\n  this_elem == other_elem\nend"},"external_var":false},{"html_id":"=~(value):MultiIndexable(Bool)-instance-method","name":"=~","doc":"TODO: DISCUSS this syntax as an alternative or supplement to elem_eq","summary":"<p><span class=\"flag orange\">TODO</span>  DISCUSS this syntax as an alternative or supplement to elem_eq</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value) : MultiIndexable(Bool)","args_html":"(value) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(Bool)","location":{"filename":"src/multi_indexable.cr","line_number":960,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L960"},"def":{"name":"=~","args":[{"name":"value","external_name":"value","restriction":""}],"return_type":"MultiIndexable(Bool)","visibility":"Public","body":"map do |elem|\n  elem == value\nend"},"external_var":false},{"html_id":">(other:MultiIndexable(U))forallU-instance-method","name":">","doc":"Invokes `#>` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&gt;</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1021,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1021"},"def":{"name":">","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '>' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '>' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem > other_elem\nend\n"},"external_var":false},{"html_id":">(other)-instance-method","name":">","doc":"Invokes `#>(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#&gt;(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1021,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1021"},"def":{"name":">","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.>(other))"},"external_var":false},{"html_id":">=(other:MultiIndexable(U))forallU-instance-method","name":">=","doc":"Invokes `#>=` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code>#&gt;=</code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1023,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1023"},"def":{"name":">=","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '>=' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '>=' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem >= other_elem\nend\n"},"external_var":false},{"html_id":">=(other)-instance-method","name":">=","doc":"Invokes `#>=(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code>#&gt;=(other)</code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1023,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1023"},"def":{"name":">=","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.>=(other))"},"external_var":false},{"html_id":"[](region_literal:Indexable,drop:Bool=MultiIndexable::DROP_BY_DEFAULT)-instance-method","name":"[]","doc":"Copies the elements described by *region* into a new `MultiIndexable`.\nIf *region* does not describe a valid region of this `MultiIndexable`,\nthis method will raise either a `DimensionError` (in the case of\nan improper number of dimensions) or a `ShapeError` (in the case where\nthe number of dimensions is correct, but the region is not meaningful\nfor this MultiIndexable's shape.\n\nNote: this method has a tuple accepting overload, as well, which makes\nthe syntax much more intuitive. The following example contains both\nversions, but please note the difference.\n\n```crystal\nnarr = NArray.new([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Select only the first row:\nnarr[[0], drop: true] # => NArray[1, 2, 3]\n\n# Unless you need to explicitly disable dropping, use the tuple overload:\nnarr[0] # => NArray[1, 2, 3] (drop is true by default)\n\n# Select only the first column:\nnarr[.., 0] # => NArray[1, 2, 3]\n\n# Select only the first column, without dropping dimensions:\n# (in this case, we can't use the tuple accepting overload, hence the extra brackets)\nnarr[[.., 0], drop: false] # => NArray[[1], [2], [3]]\n\n# Equivalently to the above, using anything other than an integer will bypass\n# dropping:\nnarr[.., 0..0] # => NArray[[1], [2], [3]]\n\n# Select only elements from both even-numbered rows and columns:\nnarr[0..2.., 0..2..] # => NArray[[1, 3], [7, 9]]\n\n# This method raises a DimensionError when there is a dimensions mismatch:\nnarr[0, 1, 2, 3] # => DimensionError\n\n# This method raises a ShapeError when there is a shape mismatch:\nnarr[1..100, 2..30] # => ShapeError\n```","summary":"<p>Copies the elements described by <em>region</em> into a new <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable"},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(region_literal : Indexable, drop : Bool = MultiIndexable::DROP_BY_DEFAULT)","args_html":"(region_literal : Indexable, drop : Bool = <span class=\"t\">MultiIndexable</span><span class=\"t\">::</span><span class=\"t\">DROP_BY_DEFAULT</span>)","location":{"filename":"src/multi_indexable.cr","line_number":545,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L545"},"def":{"name":"[]","args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable"},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"visibility":"Public","body":"get_chunk(region_literal, drop)"},"external_var":false},{"html_id":"[](region:IndexRegion)-instance-method","name":"[]","doc":"`IndexRegion` accepting form of `#[](region_literal : Indexable, drop : Bool)`.\nNote that *region* is what controls the dimension dropping behaviour, here.","summary":"<p><code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> accepting form of <code><a href=\"../Phase/MultiIndexable.html#%5B%5D%28region_literal%3AIndexable%2Cdrop%3ABool%3DMultiIndexable%3A%3ADROP_BY_DEFAULT%29-instance-method\">#[](region_literal : Indexable, drop : Bool)</a></code>.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"args_string":"(region : IndexRegion)","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>)","location":{"filename":"src/multi_indexable.cr","line_number":551,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L551"},"def":{"name":"[]","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"visibility":"Public","body":"get_chunk(region)"},"external_var":false},{"html_id":"[](*region_literal,drop:Bool=MultiIndexable::DROP_BY_DEFAULT)-instance-method","name":"[]","doc":"Tuple-accepting overload of `#[](region_literal : Indexable, drop : Bool)`.","summary":"<p>Tuple-accepting overload of <code><a href=\"../Phase/MultiIndexable.html#%5B%5D%28region_literal%3AIndexable%2Cdrop%3ABool%3DMultiIndexable%3A%3ADROP_BY_DEFAULT%29-instance-method\">#[](region_literal : Indexable, drop : Bool)</a></code>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(*region_literal, drop : Bool = MultiIndexable::DROP_BY_DEFAULT)","args_html":"(*region_literal, drop : Bool = <span class=\"t\">MultiIndexable</span><span class=\"t\">::</span><span class=\"t\">DROP_BY_DEFAULT</span>)","location":{"filename":"src/multi_indexable.cr","line_number":619,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L619"},"def":{"name":"[]","args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"splat_index":0,"visibility":"Public","body":"self[region_literal, drop]"},"external_var":false},{"html_id":"[]?(bool_mask:MultiIndexable(Bool)):MultiIndexable(T|Nil)-instance-method","name":"[]?","doc":"Returns a `MultiIndexable` that draws from `self` where *bool_mask* is true, but contains `nil` where *bool_mask* is false.\nIf *bool_mask* has a different shape than `self`, this method will raise\na `ShapeError`.\n\n\n```crystal\nnarr = NArray[3, 4, 5]\nmask = NArray[false, true, true]\nnarr[mask]? # => NArray[nil, 4, 5]\n\noversized_mask = NArray[false, true, true, false]\nnarr[oversized_mask]? # => ShapeError\n```","summary":"<p>Returns a <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> that draws from <code>self</code> where <em>bool_mask</em> is true, but contains <code>nil</code> where <em>bool_mask</em> is false.</p>","abstract":false,"args":[{"name":"bool_mask","external_name":"bool_mask","restriction":"MultiIndexable(Bool)"}],"args_string":"(bool_mask : MultiIndexable(Bool)) : MultiIndexable(T | Nil)","args_html":"(bool_mask : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(Bool)) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T | Nil)","location":{"filename":"src/multi_indexable.cr","line_number":495,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L495"},"def":{"name":"[]?","args":[{"name":"bool_mask","external_name":"bool_mask","restriction":"MultiIndexable(Bool)"}],"return_type":"MultiIndexable(T | ::Nil)","visibility":"Public","body":"if bool_mask.shape != shape_internal\n  raise(ShapeError.new(\"Could not use mask: mask shape #{bool_mask.shape} does not match this MultiIndexable's shape (#{shape_internal}).\"))\nend\n\nbool_mask.map_with_coord do |bool_val, coord|\n  bool_val ? unsafe_fetch_element(coord) : nil\nend\n"},"external_var":false},{"html_id":"[]?(region:Indexable,drop:Bool=MultiIndexable::DROP_BY_DEFAULT):MultiIndexable(T)|Nil-instance-method","name":"[]?","doc":"Copies the elements in *region* to a new `MultiIndexable` if `#has_region?(region)` is true, and returns `nil` otherwise.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\nnarr[1.., 10..12]? # => nil\nnarr[0.., 1..2]? # => NArray[[2, 3], [5, 6]]\n```","summary":"<p>Copies the elements in <em>region</em> to a new <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> if <code><a href=\"../Phase/MultiIndexable.html#has_region%3F%28region%3AIndexRegion%29%3ABool-instance-method\">#has_region?(region)</a></code> is true, and returns <code>nil</code> otherwise.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"Indexable"},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(region : Indexable, drop : Bool = MultiIndexable::DROP_BY_DEFAULT) : MultiIndexable(T) | Nil","args_html":"(region : Indexable, drop : Bool = <span class=\"t\">MultiIndexable</span><span class=\"t\">::</span><span class=\"t\">DROP_BY_DEFAULT</span>) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T) | Nil","location":{"filename":"src/multi_indexable.cr","line_number":562,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L562"},"def":{"name":"[]?","args":[{"name":"region","external_name":"region","restriction":"Indexable"},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"return_type":"MultiIndexable(T) | ::Nil","visibility":"Public","body":"if has_region?(region)\n  return get_chunk(region, drop)\nend\n\nnil\n"},"external_var":false},{"html_id":"[]?(region:IndexRegion):MultiIndexable(T)|Nil-instance-method","name":"[]?","doc":"`IndexRegion` accepting overload of `#[]?(region : Indexable, drop : Bool)`.","summary":"<p><code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> accepting overload of <code><a href=\"../Phase/MultiIndexable.html#%5B%5D%3F%28region%3AIndexable%2Cdrop%3ABool%3DMultiIndexable%3A%3ADROP_BY_DEFAULT%29%3AMultiIndexable%28T%29%7CNil-instance-method\">#[]?(region : Indexable, drop : Bool)</a></code>.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"args_string":"(region : IndexRegion) : MultiIndexable(T) | Nil","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T) | Nil","location":{"filename":"src/multi_indexable.cr","line_number":571,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L571"},"def":{"name":"[]?","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"return_type":"MultiIndexable(T) | ::Nil","visibility":"Public","body":"if has_region?(region)\n  return get_chunk(region)\nend\n\nnil\n"},"external_var":false},{"html_id":"[]?(*region_literal,drop:Bool=MultiIndexable::DROP_BY_DEFAULT)-instance-method","name":"[]?","doc":"Tuple-accepting overload of `#[]?(region_literal : Indexable, drop : Bool)`.","summary":"<p>Tuple-accepting overload of <code><a href=\"../Phase/MultiIndexable.html#%5B%5D%3F%28region%3AIndexable%2Cdrop%3ABool%3DMultiIndexable%3A%3ADROP_BY_DEFAULT%29%3AMultiIndexable%28T%29%7CNil-instance-method\">#[]?(region_literal : Indexable, drop : Bool)</a></code>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(*region_literal, drop : Bool = MultiIndexable::DROP_BY_DEFAULT)","args_html":"(*region_literal, drop : Bool = <span class=\"t\">MultiIndexable</span><span class=\"t\">::</span><span class=\"t\">DROP_BY_DEFAULT</span>)","location":{"filename":"src/multi_indexable.cr","line_number":620,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L620"},"def":{"name":"[]?","args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"splat_index":0,"visibility":"Public","body":"self[region_literal, drop]?"},"external_var":false},{"html_id":"^(other:MultiIndexable(U))forallU-instance-method","name":"^","doc":"Invokes `#^` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#%5E%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#^</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1019,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1019"},"def":{"name":"^","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '^' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '^' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem ^ other_elem\nend\n"},"external_var":false},{"html_id":"^(other)-instance-method","name":"^","doc":"Invokes `#^(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#%5E%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#^(other)</a></code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1019,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1019"},"def":{"name":"^","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.^(other))"},"external_var":false},{"html_id":"|(other:MultiIndexable(U))forallU-instance-method","name":"|","doc":"Invokes `#|` element-wise between `self` and *other*, returning\nan `NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#%7C%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#|</a></code> element-wise between <code>self</code> and <em>other</em>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1018,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1018"},"def":{"name":"|","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"visibility":"Public","body":"if shape_internal != other.shape_internal\n  if scalar? || other.scalar?\n    raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '|' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\"))\n  end\n  raise(ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '|' cannot be applied element-wise.\"))\nend\n\nmap_with(other) do |elem, other_elem|\n  elem | other_elem\nend\n"},"external_var":false},{"html_id":"|(other)-instance-method","name":"|","doc":"Invokes `#|(other)` on each element in `self`, returning an\n`NArray` that contains the results.","summary":"<p>Invokes <code><a href=\"../Phase/MultiIndexable.html#%7C%28other%3AMultiIndexable%28U%29%29forallU-instance-method\">#|(other)</a></code> on each element in <code>self</code>, returning an <code><a href=\"../Phase/NArray.html\">NArray</a></code> that contains the results.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/multi_indexable.cr","line_number":1018,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1018"},"def":{"name":"|","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"map(&.|(other))"},"external_var":false},{"html_id":"~-instance-method","name":"~","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":1029,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1029"},"def":{"name":"~","visibility":"Public","body":"map(&.~)"},"external_var":false},{"html_id":"apply:ApplyProxy-instance-method","name":"apply","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":1171,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1171"},"def":{"name":"apply","return_type":"ApplyProxy","visibility":"Public","body":"ApplyProxy.of(self)"},"external_var":false},{"html_id":"apply!:InPlaceApplyProxy-instance-method","name":"apply!","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":1175,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1175"},"def":{"name":"apply!","return_type":"InPlaceApplyProxy","visibility":"Public","body":"InPlaceApplyProxy.of(self)"},"external_var":false},{"html_id":"colex_each:ElemIterator-instance-method","name":"colex_each","doc":"Returns an iterator that will yield each element of `self` in colexicographic (column-major) order.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\niter = narr.each\niter.next # => 1\niter.next # => 4\niter.next # => 2\niter.next # => 5\niter.next # => 3\niter.next # => 6\niter.next # => Iterator::Stop\n```\n\n`#colex_each` can be manipulated the same ways as `#each`. See `#each`\nor `MultiIndexable::ElemIterator` for more information.","summary":"<p>Returns an iterator that will yield each element of <code>self</code> in colexicographic (column-major) order.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":698,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L698"},"def":{"name":"colex_each","return_type":"ElemIterator","visibility":"Public","body":"ElemIterator.new(self, colex_each_coord)"},"external_var":false},{"html_id":"colex_each(&):Nil-instance-method","name":"colex_each","doc":"Block accepting form of `#colex_each`.","summary":"<p>Block accepting form of <code><a href=\"../Phase/MultiIndexable.html#colex_each%3AElemIterator-instance-method\">#colex_each</a></code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":832,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L832"},"def":{"name":"colex_each","yields":1,"block_arity":1,"return_type":"Nil","visibility":"Public","body":"colex_each.each do |arg|\n  yield arg\nend"},"external_var":false},{"html_id":"colex_each_coord:ColexIterator-instance-method","name":"colex_each_coord","doc":"Returns an iterator that will yield each coordinate of `self` in colexicographic (column-major) order.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\niter = narr.each_coord\niter.next # => [0, 0]\niter.next # => [0, 1]\niter.next # => [0, 2]\niter.next # => [1, 0]\niter.next # => [1, 1]\niter.next # => [1, 2]\niter.next # => Iterator::Stop\n```","summary":"<p>Returns an iterator that will yield each coordinate of <code>self</code> in colexicographic (column-major) order.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":657,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L657"},"def":{"name":"colex_each_coord","return_type":"ColexIterator","visibility":"Public","body":"ColexIterator.cover(shape_internal)"},"external_var":false},{"html_id":"colex_each_coord(&):Nil-instance-method","name":"colex_each_coord","doc":"Block accepting form of `#colex_each_coord`.","summary":"<p>Block accepting form of <code><a href=\"../Phase/MultiIndexable.html#colex_each_coord%3AColexIterator-instance-method\">#colex_each_coord</a></code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":832,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L832"},"def":{"name":"colex_each_coord","yields":1,"block_arity":1,"return_type":"Nil","visibility":"Public","body":"colex_each_coord.each do |arg|\n  yield arg\nend"},"external_var":false},{"html_id":"dimensions:Int-instance-method","name":"dimensions","doc":"Returns the number of dimensions that this MultiIndexable is embedded in.\nThis can equally be seen by the number of indices required to uniquely\nspecify a coordinate into this `MultiIndexable`, and is always equal to\n`shape.size`\n\n```crystal\nNArray.new([1, 2]).dimensions # => 1\nNArray.new([[1, 2], [3, 4]]).dimensions # => 2\nNArray.new([[[1]]]).dimensions # => 3\n```","summary":"<p>Returns the number of dimensions that this MultiIndexable is embedded in.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":248,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L248"},"def":{"name":"dimensions","return_type":"Int","visibility":"Public","body":"shape_internal.size"},"external_var":false},{"html_id":"each:ElemIterator-instance-method","name":"each","doc":"Returns an iterator that will yield each element of `self` in lexicographic (row-major) order.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\niter = narr.each\niter.next # => 1\niter.next # => 2\niter.next # => 3\niter.next # => 4\niter.next # => 5\niter.next # => 6\niter.next # => Iterator::Stop\n```\n\n`#each` can also be chained with other calls to manipulate its behaviour -\nfor example `each.with_coord.reverse_each`. See `MultiIndexable::ElemIterator`\nfor more information.","summary":"<p>Returns an iterator that will yield each element of <code>self</code> in lexicographic (row-major) order.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":678,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L678"},"def":{"name":"each","return_type":"ElemIterator","visibility":"Public","body":"ElemIterator.new(self, each_coord)"},"external_var":false},{"html_id":"each(&):Nil-instance-method","name":"each","doc":"Block accepting form of `#each`.","summary":"<p>Block accepting form of <code><a href=\"../Phase/MultiIndexable.html#each%3AElemIterator-instance-method\">#each</a></code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":832,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L832"},"def":{"name":"each","yields":1,"block_arity":1,"return_type":"Nil","visibility":"Public","body":"each.each do |arg|\n  yield arg\nend"},"external_var":false},{"html_id":"each_coord:LexIterator-instance-method","name":"each_coord","doc":"Returns an iterator that will yield each coordinate of `self` in lexicographic (row-major) order.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\niter = narr.each_coord\niter.next # => [0, 0]\niter.next # => [0, 1]\niter.next # => [0, 2]\niter.next # => [1, 0]\niter.next # => [1, 1]\niter.next # => [1, 2]\niter.next # => Iterator::Stop\n```","summary":"<p>Returns an iterator that will yield each coordinate of <code>self</code> in lexicographic (row-major) order.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":640,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L640"},"def":{"name":"each_coord","return_type":"LexIterator","visibility":"Public","body":"LexIterator.cover(shape_internal)"},"external_var":false},{"html_id":"each_coord(&):Nil-instance-method","name":"each_coord","doc":"Block accepting form of `#each_coord`.","summary":"<p>Block accepting form of <code><a href=\"../Phase/MultiIndexable.html#each_coord%3ALexIterator-instance-method\">#each_coord</a></code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":832,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L832"},"def":{"name":"each_coord","yields":1,"block_arity":1,"return_type":"Nil","visibility":"Public","body":"each_coord.each do |arg|\n  yield arg\nend"},"external_var":false},{"html_id":"each_slice(axis=0):Iterator-instance-method","name":"each_slice","doc":"Returns an Iterator equivalent to the method `#each_slice(axis, &block)`.","summary":"<p>Returns an Iterator equivalent to the method <code>#each_slice(axis, &amp;block)</code>.</p>","abstract":false,"args":[{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"args_string":"(axis = 0) : Iterator","args_html":"(axis = <span class=\"n\">0</span>) : Iterator","location":{"filename":"src/multi_indexable.cr","line_number":786,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L786"},"def":{"name":"each_slice","args":[{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"return_type":"Iterator","visibility":"Public","body":"chunk_shape = shape\nchunk_shape[axis] = 1\ndegeneracy = Array.new(dimensions, false)\ndegeneracy[axis] = true\nChunkIterator.new(self, chunk_shape, degeneracy: degeneracy)\n"},"external_var":false},{"html_id":"each_slice(axis=0,&)-instance-method","name":"each_slice","doc":"Yields the slices of this `MultiIndexable` along a given *axis* to the provided block.\nThe elements returned in each slice are the ones with a constant index\nalong the specified *axis*.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\n\n#          axis one ->\n#\n# axis      0 1 2\n# zero   0 [1 2 3]\n#  |     1 [4 5 6]\n#  v\n\n# defaults to axis = 0, so the slices will be the rows.\nnarr.each_slice do |slice|\n  # in loop 0, slice will be NArray[1, 2, 3], because those elements have coords [0, ...]\n  # in loop 1, slice will be NArray[4, 5, 6], because those elements have coords [1, ...]\nend\n\n# here we pick axis = 1, so the slices will be the columns.\nnarr.each_slice(axis: 1) do |slice|\n  # in loop 0, slice will be NArray[1, 4], because those elements have coords [..., 0]\n  # in loop 1, slice will be NArray[2, 5], because those elements have coords [..., 1]\n  # in loop 0, slice will be NArray[3, 6], because those elements have coords [..., 2]\nend\n```","summary":"<p>Yields the slices of this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> along a given <em>axis</em> to the provided block.</p>","abstract":false,"args":[{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"args_string":"(axis = 0, &)","args_html":"(axis = <span class=\"n\">0</span>, &)","location":{"filename":"src/multi_indexable.cr","line_number":821,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L821"},"def":{"name":"each_slice","args":[{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"yields":1,"block_arity":1,"visibility":"Public","body":"(each_slice(axis)).each do |slice|\n  yield slice\nend"},"external_var":false},{"html_id":"each_with(*args,&)-instance-method","name":"each_with","doc":"Iterates over tuples of elements drawn from `self` and *args*, where *args* contains other `MultiIndexable`s you wish to access.\nThis is effectively an n-dimensional analogue of `Enumerable#zip`.\n\n```crystal\nnarr_1 = NArray[[1, 2], [3, 4]]\nnarr_2 = NArray[[:a, :b], [:c, :d]]\n\nnarr_1.each_with(narr_2) { |el_1, el_2| print el_1, el_2 }\nprint \"\\n\"\n# Output: 1a2b3c4d\n\n# When an argument that is not a MultiIndexable is passed,\n# #each_with behaves like Object#tap, passing the value into the block.\nnarr_1.each_with(narr_2, \"some other value I want in the block\") do |*els|\n    puts els \nend\n\n# Output:\n# {1, :a, \"some other value I want in the block\"}\n# {2, :b, \"some other value I want in the block\"}\n# {3, :c, \"some other value I want in the block\"}\n# {4, :d, \"some other value I want in the block\"}\n\nnarr_3 = NArray[[1, 2]] # This has a different shape than narr_1!\nnarr_1.each_with(narr_3) {} # ShapeError\n```","summary":"<p>Iterates over tuples of elements drawn from <code>self</code> and <em>args</em>, where <em>args</em> contains other <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>s you wish to access.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, &)","args_html":"(*args, &)","location":{"filename":"src/multi_indexable.cr","line_number":1057,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1057"},"def":{"name":"each_with","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"MultiIndexable.each_with(self, *args) do |*elems|\n  yield *elems\nend"},"external_var":false},{"html_id":"each_with_coord:ElemAndCoordIterator-instance-method","name":"each_with_coord","doc":"Returns an iterator that will yield tuples of the elements and coords comprising `self` in lexicographic (row-major) order.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\niter = narr.each_with_coord\niter.next # => {1, [0, 0]}\niter.next # => {2, [0, 1]}\niter.next # => {3, [0, 2]}\niter.next # => {4, [1, 0]}\niter.next # => {5, [1, 1]}\niter.next # => {6, [1, 2]}\niter.next # => Iterator::Stop\n```\n\nThis method is a convenience included to mirror `Indexable#each_with_index`.\nIf you're looking for a colexicographic version, use `#colex_each.with_coord`.","summary":"<p>Returns an iterator that will yield tuples of the elements and coords comprising <code>self</code> in lexicographic (row-major) order.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":718,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L718"},"def":{"name":"each_with_coord","return_type":"ElemAndCoordIterator","visibility":"Public","body":"ElemAndCoordIterator.new(self, each_coord)"},"external_var":false},{"html_id":"each_with_coord(&):Nil-instance-method","name":"each_with_coord","doc":"Block accepting form of `#each_with_coord`.","summary":"<p>Block accepting form of <code><a href=\"../Phase/MultiIndexable.html#each_with_coord%3AElemAndCoordIterator-instance-method\">#each_with_coord</a></code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":832,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L832"},"def":{"name":"each_with_coord","yields":1,"block_arity":1,"return_type":"Nil","visibility":"Public","body":"each_with_coord.each do |arg|\n  yield arg\nend"},"external_var":false},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns `true` if and only if this `MultiIndexable` spans no elements.\n\n```crystal\nNArray.new([1, 2, 3]).empty? # => false\nNArray.new([]).empty? # => true\n```","summary":"<p>Returns <code>true</code> if and only if this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> spans no elements.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":106,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L106"},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"size == 0"},"external_var":false},{"html_id":"ensure_writable-instance-method","name":"ensure_writable","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":1070,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1070"},"def":{"name":"ensure_writable","visibility":"Public","body":"{% if @type < MultiWritable %}{% else %}\n        {% raise(\"ensure_writable failed: #{@type} is not a MultiWritable.\") %}\n      {% end %}"},"external_var":false},{"html_id":"eq(other:MultiIndexable(U)):MultiIndexable(Bool)forallU-instance-method","name":"eq","doc":"TODO: rename to elem_eq\nProduces an NArray(Bool) (by default) describing which elements of self and other are equal.","summary":"<p><span class=\"flag orange\">TODO</span>  rename to elem_eq Produces an NArray(Bool) (by default) describing which elements of self and other are equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"args_string":"(other : MultiIndexable(U)) : MultiIndexable(Bool) forall U","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(U)) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(Bool) forall U","location":{"filename":"src/multi_indexable.cr","line_number":943,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L943"},"def":{"name":"eq","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable(U)"}],"return_type":"MultiIndexable(Bool)","visibility":"Public","body":"if shape_internal != other.shape_internal\n  raise(DimensionError.new(\"Cannot compute the element-wise equality between this MultiIndexable (shape: #{shape_internal}) and the one provided (shape: #{other.shape_internal}).\"))\nend\n\nmap_with_coord do |elem, coord|\n  elem == (other.unsafe_fetch_element(coord))\nend\n"},"external_var":false},{"html_id":"eq(value):MultiIndexable(Bool)-instance-method","name":"eq","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value) : MultiIndexable(Bool)","args_html":"(value) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(Bool)","location":{"filename":"src/multi_indexable.cr","line_number":953,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L953"},"def":{"name":"eq","args":[{"name":"value","external_name":"value","restriction":""}],"return_type":"MultiIndexable(Bool)","visibility":"Public","body":"map do |elem|\n  elem == value\nend"},"external_var":false},{"html_id":"equals?(other:MultiIndexable,&):Bool-instance-method","name":"equals?","doc":"Returns true if the block returns true for each pair of elements (that share a coordinate) from `self` and `other`.\n\n```crystal\nnarr_1 = NArray[[1, 2], [3, 4]]\nnarr_2 = NArray[[2, 3], [4, 5]]\n\nnarr_1.equals?(narr_1.clone) { |a, b| a == b } # => true\nnarr_1.equals?(narr_2) { |a, b| a == b } # => false\n\n# The block doesn't neccessarily have to involve equality,\n# just any pairwise comparison you want to evaluate globally.\nnarr_1.equals?(narr_2) { |a, b| a < b } # => true\n```","summary":"<p>Returns true if the block returns true for each pair of elements (that share a coordinate) from <code>self</code> and <code>other</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"MultiIndexable"}],"args_string":"(other : MultiIndexable, &) : Bool","args_html":"(other : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>, &) : Bool","location":{"filename":"src/multi_indexable.cr","line_number":915,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L915"},"def":{"name":"equals?","args":[{"name":"other","external_name":"other","restriction":"MultiIndexable"}],"yields":2,"block_arity":2,"return_type":"Bool","visibility":"Public","body":"if shape_internal != other.shape_internal\n  return false\nend\n\neach_with_coord do |elem, coord|\n  if yield(elem, other.unsafe_fetch_element(coord))\n  else\n    return false\n  end\nend\n\ntrue\n"},"external_var":false},{"html_id":"fast_each:Iterator(T)-instance-method","name":"fast_each","doc":"Returns an Iterator over the elements in this `MultiIndexable` that will iterate in the fastest order possible.\nFor most implementations, it is very likely that `#each` will be just as fast.\nHowever, certain implementations of `MultiIndexable` may have substantial\nperformance differences. As a rule of thumb, this method is only worth using\nif the `MultiIndexable` you call it on explicitly mentions that you should.\n\n```crystal\nNArray[1, 2, 3].fast_each.each do |el|\n  # ...\nend\n```","summary":"<p>Returns an Iterator over the elements in this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> that will iterate in the fastest order possible.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":781,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L781"},"def":{"name":"fast_each","return_type":"Iterator(T)","visibility":"Public","body":"ElemIterator.new(self)"},"external_var":false},{"html_id":"fast_each(&):Nil-instance-method","name":"fast_each","doc":"Block accepting form of `#fast_each`.","summary":"<p>Block accepting form of <code><a href=\"../Phase/MultiIndexable.html#fast_each%3AIterator%28T%29-instance-method\">#fast_each</a></code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":832,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L832"},"def":{"name":"fast_each","yields":1,"block_arity":1,"return_type":"Nil","visibility":"Public","body":"fast_each.each do |arg|\n  yield arg\nend"},"external_var":false},{"html_id":"first:T-instance-method","name":"first","doc":"Returns the element at the zero coordinate (position `0` along every axis).\nFor example:\n\n```crystal\n# create the following matrix:\n# [5 2]\n# [8 3]\nnarr = NArray.new([[5, 2], [8, 3]])\n\n# extract the top-left element (coordinate [0, 0])\nnarr.first # => 5\n```","summary":"<p>Returns the element at the zero coordinate (position <code>0</code> along every axis).</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":175,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L175"},"def":{"name":"first","return_type":"T","visibility":"Public","body":"if size == 0\n  raise(ShapeError.new(\"{{@type}} has zero elements (shape: #{shape_internal}).\"))\nend\n\nget_element(Array.new(shape_internal.size, 0))\n"},"external_var":false},{"html_id":"get(coord:Indexable):T-instance-method","name":"get","doc":"Shorthand for `#get_element`.\n:ditto:","summary":"<p>Shorthand for <code><a href=\"../Phase/MultiIndexable.html#get_element%28coord%3AIndexable%29%3AT-instance-method\">#get_element</a></code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Indexable"}],"args_string":"(coord : Indexable) : T","args_html":"(coord : Indexable) : T","location":{"filename":"src/multi_indexable.cr","line_number":595,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L595"},"def":{"name":"get","args":[{"name":"coord","external_name":"coord","restriction":"Indexable"}],"return_type":"T","visibility":"Public","body":"get_element(coord)"},"external_var":false},{"html_id":"get(*coord:Int)-instance-method","name":"get","doc":"Tuple-accepting overload of `#get`.","summary":"<p>Tuple-accepting overload of <code><a href=\"../Phase/MultiIndexable.html#get%28coord%3AIndexable%29%3AT-instance-method\">#get</a></code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Int"}],"args_string":"(*coord : Int)","args_html":"(*coord : Int)","location":{"filename":"src/multi_indexable.cr","line_number":623,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L623"},"def":{"name":"get","args":[{"name":"coord","external_name":"coord","restriction":"Int"}],"splat_index":0,"visibility":"Public","body":"self.get(coord)"},"external_var":false},{"html_id":"get_available(region_literal:Indexable,drop:Bool=DROP_BY_DEFAULT)-instance-method","name":"get_available","doc":"Returns a `MultiIndexable` containing elements whose coordinates belong both to `shape` and *region_literal*.\nThis method is very similar to `get_chunk(region_literal : Indexable, drop : Bool)`,\nexcept that it trims the *region_literal* down to a valid size automatically.\n\n```crystal\nnarr = NArray.new([[1, 2, 3], [4, 5, 6]])\n\nnarr.get_chunk(1..5, 1) # => ShapeError (this chunk is not contained in a 2x3 MultiIndexable\nnarr.get_available(1..5, 1) # => NArray[5]\n```","summary":"<p>Returns a <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> containing elements whose coordinates belong both to <code><a href=\"../Phase/MultiIndexable.html#shape%3AArray-instance-method\">#shape</a></code> and <em>region_literal</em>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(region_literal : Indexable, drop : Bool = DROP_BY_DEFAULT)","args_html":"(region_literal : Indexable, drop : Bool = <span class=\"t\">DROP_BY_DEFAULT</span>)","location":{"filename":"src/multi_indexable.cr","line_number":410,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L410"},"def":{"name":"get_available","args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"visibility":"Public","body":"unsafe_fetch_chunk(IndexRegion.new(region_literal, shape_internal, drop, trim_to: shape_internal))"},"external_var":false},{"html_id":"get_available(region:IndexRegion,drop:Bool=DROP_BY_DEFAULT)-instance-method","name":"get_available","doc":"`IndexRegion` accepting overload of `get_available(region : Indexable, drop : Bool)`","summary":"<p><code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> accepting overload of <code><a href=\"../Phase/MultiIndexable.html#get_available%28region_literal%3AIndexable%2Cdrop%3ABool%3DDROP_BY_DEFAULT%29-instance-method\">#get_available(region : Indexable, drop : Bool)</a></code></p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(region : IndexRegion, drop : Bool = DROP_BY_DEFAULT)","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>, drop : Bool = <span class=\"t\">DROP_BY_DEFAULT</span>)","location":{"filename":"src/multi_indexable.cr","line_number":396,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L396"},"def":{"name":"get_available","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"visibility":"Public","body":"unsafe_fetch_chunk(region.trim!(shape_internal))"},"external_var":false},{"html_id":"get_available(*region_literal,drop:Bool=MultiIndexable::DROP_BY_DEFAULT)-instance-method","name":"get_available","doc":"Tuple-accepting overload of `#get_available(region_literal : Indexable, drop : Bool)`.","summary":"<p>Tuple-accepting overload of <code><a href=\"../Phase/MultiIndexable.html#get_available%28region_literal%3AIndexable%2Cdrop%3ABool%3DDROP_BY_DEFAULT%29-instance-method\">#get_available(region_literal : Indexable, drop : Bool)</a></code>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(*region_literal, drop : Bool = MultiIndexable::DROP_BY_DEFAULT)","args_html":"(*region_literal, drop : Bool = <span class=\"t\">MultiIndexable</span><span class=\"t\">::</span><span class=\"t\">DROP_BY_DEFAULT</span>)","location":{"filename":"src/multi_indexable.cr","line_number":618,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L618"},"def":{"name":"get_available","args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"splat_index":0,"visibility":"Public","body":"self.get_available(region_literal, drop)"},"external_var":false},{"html_id":"get_chunk(coord:Indexable,region_shape:Indexable(I))forallI-instance-method","name":"get_chunk","doc":"TEST\nExtracts a chunk given a shape (*region_shape*) and the *coord* in that region with the smallest value in each axis.\n\n```crystal\nnarr = NArray.new([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nnarr.get_chunk([1, 1], [2, 2]) # => NArray[[5, 6], [8, 9]]\nnarr.get_chunk([1, 0], [1, 3]) # => NArray[[4, 5, 6]]\nnarr.get_chunk([1, 0], [10, 10]) # => ShapeError\nnarr.get_chunk([0], [1]) # => DimensionError\n```","summary":"<p>TEST Extracts a chunk given a shape (<em>region_shape</em>) and the <em>coord</em> in that region with the smallest value in each axis.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Indexable"},{"name":"region_shape","external_name":"region_shape","restriction":"Indexable(I)"}],"args_string":"(coord : Indexable, region_shape : Indexable(I)) forall I","args_html":"(coord : Indexable, region_shape : Indexable(I)) forall I","location":{"filename":"src/multi_indexable.cr","line_number":368,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L368"},"def":{"name":"get_chunk","args":[{"name":"coord","external_name":"coord","restriction":"Indexable"},{"name":"region_shape","external_name":"region_shape","restriction":"Indexable(I)"}],"visibility":"Public","body":"if coord.size != region_shape.size\n  raise(DimensionError.new(\"'coord' (#{coord}) and 'region_shape' #{region_shape} had a different number of dimensions. Note that you must fully specify your coordinate and region shape for this overload of get_chunk.\"))\nend\n\nif coord.size != dimensions\n  raise(DimensionError.new(\"'coord' (#{coord}) had a different number of dimensions than this MultiIndexable (must have #{dimensions}, but has #{coord.size}).\"))\nend\n\ncoord.each_with_index do |c, idx|\n  r = region_shape.unsafe_fetch(idx)\n  if c.negative?\n    raise(ArgumentError.new(\"'coord' #{coord} was negative on axis #{idx}, but must be strictly nonnegative.\"))\n  end\n\n  if r.negative?\n    raise(ArgumentError.new(\"'region_shape' #{region_shape} was negative on axis #{idx}, but must be strictly nonnegative.\"))\n  end\n\n  if (c + r) > (shape_internal.unsafe_fetch(idx))\n    raise(ShapeError.new(\"The region defined by shape #{region_shape} and lowermost coordinate #{coord} is not contained within this MultiIndexable on axis #{idx} (this MultiIndexable has #{shape_internal[idx]} elements on axis #{idx}).\"))\n  end\nend\n\nget_chunk((IndexRegion(I).cover(region_shape)).translate!(coord))\n"},"external_var":false},{"html_id":"get_chunk(region_literal:Indexable,drop:Bool=DROP_BY_DEFAULT)-instance-method","name":"get_chunk","doc":"A more verbose overload of `#[](region_literal : Indexable, drop : Bool)`.\nThis is just syntactic sugar, and can be more readable in certain\napplications.","summary":"<p>A more verbose overload of <code><a href=\"../Phase/MultiIndexable.html#%5B%5D%28region_literal%3AIndexable%2Cdrop%3ABool%3DMultiIndexable%3A%3ADROP_BY_DEFAULT%29-instance-method\">#[](region_literal : Indexable, drop : Bool)</a></code>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(region_literal : Indexable, drop : Bool = DROP_BY_DEFAULT)","args_html":"(region_literal : Indexable, drop : Bool = <span class=\"t\">DROP_BY_DEFAULT</span>)","location":{"filename":"src/multi_indexable.cr","line_number":353,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L353"},"def":{"name":"get_chunk","args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"visibility":"Public","body":"unsafe_fetch_chunk(IndexRegion.new(region_literal, shape_internal, drop))"},"external_var":false},{"html_id":"get_chunk(region:IndexRegion):MultiIndexable(T)-instance-method","name":"get_chunk","doc":"`IndexRegion` accepting form of `#get_chunk(region_literal : Indexable, drop : Bool)`.\nNote that *region* is what controls the dimension dropping behaviour, here.","summary":"<p><code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code> accepting form of <code><a href=\"../Phase/MultiIndexable.html#get_chunk%28coord%3AIndexable%2Cregion_shape%3AIndexable%28I%29%29forallI-instance-method\">#get_chunk(region_literal : Indexable, drop : Bool)</a></code>.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"args_string":"(region : IndexRegion) : MultiIndexable(T)","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T)","location":{"filename":"src/multi_indexable.cr","line_number":337,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L337"},"def":{"name":"get_chunk","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"return_type":"MultiIndexable(T)","visibility":"Public","body":"if region.proper_dimensions != dimensions\n  raise(DimensionError.new(\"'region' was #{region.proper_dimensions}-dimensional, but this MultiIndexable is #{dimensions}-dimensional.\"))\nend\n\nif region.fits_in?(shape_internal)\nelse\n  raise(ShapeError.new(\"'region' (#{region}) cannot fit into a MultiIndexable with shape #{shape}.\"))\nend\n\nunsafe_fetch_chunk(region)\n"},"external_var":false},{"html_id":"get_chunk(*region_literal,drop:Bool=MultiIndexable::DROP_BY_DEFAULT)-instance-method","name":"get_chunk","doc":"Tuple-accepting overload of `#get_chunk(region_literal : Indexable, drop : Bool)`.","summary":"<p>Tuple-accepting overload of <code><a href=\"../Phase/MultiIndexable.html#get_chunk%28coord%3AIndexable%2Cregion_shape%3AIndexable%28I%29%29forallI-instance-method\">#get_chunk(region_literal : Indexable, drop : Bool)</a></code>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(*region_literal, drop : Bool = MultiIndexable::DROP_BY_DEFAULT)","args_html":"(*region_literal, drop : Bool = <span class=\"t\">MultiIndexable</span><span class=\"t\">::</span><span class=\"t\">DROP_BY_DEFAULT</span>)","location":{"filename":"src/multi_indexable.cr","line_number":617,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L617"},"def":{"name":"get_chunk","args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"splat_index":0,"visibility":"Public","body":"self.get_chunk(region_literal, drop)"},"external_var":false},{"html_id":"get_element(coord:Indexable):T-instance-method","name":"get_element","doc":"Retrieves the element specified by *coord*, throwing an error if *coord* is out-of-bounds for `self`.\n\n\n```crystal\nnarr = NArray[['a', 'b'], ['c', 'd']]\nnarr.get_element([0, 1]) # => 'b'\nnarr.get_element([1, 0]) # => 'c'\nnarr.get_element([0]) # => DimensionError\nnarr.get_element([0, 10]) # => IndexError\n```","summary":"<p>Retrieves the element specified by <em>coord</em>, throwing an error if <em>coord</em> is out-of-bounds for <code>self</code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Indexable"}],"args_string":"(coord : Indexable) : T","args_html":"(coord : Indexable) : T","location":{"filename":"src/multi_indexable.cr","line_number":589,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L589"},"def":{"name":"get_element","args":[{"name":"coord","external_name":"coord","restriction":"Indexable"}],"return_type":"T","visibility":"Public","body":"unsafe_fetch_element(CoordUtil.canonicalize_coord(coord, shape_internal))"},"external_var":false},{"html_id":"get_element(*coord:Int)-instance-method","name":"get_element","doc":"Tuple-accepting overload of `#get_element`.","summary":"<p>Tuple-accepting overload of <code><a href=\"../Phase/MultiIndexable.html#get_element%28coord%3AIndexable%29%3AT-instance-method\">#get_element</a></code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Int"}],"args_string":"(*coord : Int)","args_html":"(*coord : Int)","location":{"filename":"src/multi_indexable.cr","line_number":624,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L624"},"def":{"name":"get_element","args":[{"name":"coord","external_name":"coord","restriction":"Int"}],"splat_index":0,"visibility":"Public","body":"self.get_element(coord)"},"external_var":false},{"html_id":"has_coord?(coord:Indexable):Bool-instance-method","name":"has_coord?","doc":"Returns true if *coord* is a valid coordinate in this `MultiIndexable`.\nAny coordinate for which `#has_coord?` returns `true` can be used in\n`#get`. A coordinate for which `#has_coord?` returns `false` is out of\nbounds.\n\n```crystal\n# creates the following matrix:\n# [1 2 3]\n# [4 5 6]\nnarr = NArray.build([2, 3]) { |_, idx| idx + 1 }\n\nnarr.has_coord?([0, 0]) # => true\nnarr.get([0, 0]) # => 1\n\nnarr.has_coord?([-2, 1]) # => true\nnarr.get(-2, 1) # => 2\n\nnarr.has_coord?([-2]) # => true\nnarr.get(-2) # => DimensionError\n```","summary":"<p>Returns true if <em>coord</em> is a valid coordinate in this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Indexable"}],"args_string":"(coord : Indexable) : Bool","args_html":"(coord : Indexable) : Bool","location":{"filename":"src/multi_indexable.cr","line_number":272,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L272"},"def":{"name":"has_coord?","args":[{"name":"coord","external_name":"coord","restriction":"Indexable"}],"return_type":"Bool","visibility":"Public","body":"CoordUtil.has_coord?(coord, shape_internal)"},"external_var":false},{"html_id":"has_coord?(*coord:Int)-instance-method","name":"has_coord?","doc":"Tuple-accepting overload of `#has_coord?`.","summary":"<p>Tuple-accepting overload of <code><a href=\"../Phase/MultiIndexable.html#has_coord%3F%28coord%3AIndexable%29%3ABool-instance-method\">#has_coord?</a></code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Int"}],"args_string":"(*coord : Int)","args_html":"(*coord : Int)","location":{"filename":"src/multi_indexable.cr","line_number":625,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L625"},"def":{"name":"has_coord?","args":[{"name":"coord","external_name":"coord","restriction":"Int"}],"splat_index":0,"visibility":"Public","body":"self.has_coord?(coord)"},"external_var":false},{"html_id":"has_region?(region_literal:Indexable,drop:Bool=DROP_BY_DEFAULT):Bool-instance-method","name":"has_region?","doc":"Returns true if all the coordinates spanned by *region_literal* are valid coordiantes in this `MultiIndexable`.\nIn a more geometric sense, an `IndexRegion` can be considered as a lattice\nof points (coordinates), and `#shape` can be considered as a bounding box\nfor those coordinates. If every coordinate within *region* (each point\non that lattice) is inside of the bounding box, then `#has_region` will\nreturn true.\n\n```crystal\nnarr = NArray.build([10, 3]) { |_, idx| idx }\n\n# First, we'll make an IndexRegion that fits in the above. This IndexRegion\n# contains all coordinates with a row equal to 2, 3, or 4, and a column\n# equal to 0, 1, or 2.\nvalid = [2..4, 0...3]\n\n# narr has 10 rows and 3 columns, so that region is definitely\n# contained in it.\nnarr.has_region?(valid) # => true\n\n# now, we can use that IndexRegion safely.\nLexIterator(Int32).new(valid).each do |coord|\n  narr.unsafe_fetch_element(coord) # this is definitely defined!\nend\n\n# Now we'll create an IndexRegion that's way too big for narr:\ninvalid = [100, 2..8]\nnarr.has_region?(invalid) # => false\n\n# The region doesn't fit - so:\nnarr.get_chunk(invalid) # => raises an IndexError\n```","summary":"<p>Returns true if all the coordinates spanned by <em>region_literal</em> are valid coordiantes in this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(region_literal : Indexable, drop : Bool = DROP_BY_DEFAULT) : Bool","args_html":"(region_literal : Indexable, drop : Bool = <span class=\"t\">DROP_BY_DEFAULT</span>) : Bool","location":{"filename":"src/multi_indexable.cr","line_number":312,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L312"},"def":{"name":"has_region?","args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable"},{"name":"drop","default_value":"DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"begin\n  IndexRegion.new(region_literal, shape_internal)\n  true\nrescue ex : IndexError | DimensionError\n  false\nend"},"external_var":false},{"html_id":"has_region?(region:IndexRegion):Bool-instance-method","name":"has_region?","doc":"IndexRegion accepting form of `#has_region?(region_literal)`","summary":"<p>IndexRegion accepting form of <code><a href=\"../Phase/MultiIndexable.html#has_region%3F%28region%3AIndexRegion%29%3ABool-instance-method\">#has_region?(region_literal)</a></code></p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"args_string":"(region : IndexRegion) : Bool","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>) : Bool","location":{"filename":"src/multi_indexable.cr","line_number":277,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L277"},"def":{"name":"has_region?","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"return_type":"Bool","visibility":"Public","body":"region.fits_in?(shape_internal)"},"external_var":false},{"html_id":"has_region?(*region_literal,drop:Bool=MultiIndexable::DROP_BY_DEFAULT)-instance-method","name":"has_region?","doc":"Tuple-accepting overload of `#has_region?(region_literal : Indexable, drop : Bool)`.","summary":"<p>Tuple-accepting overload of <code><a href=\"../Phase/MultiIndexable.html#has_region%3F%28region_literal%3AIndexable%2Cdrop%3ABool%3DDROP_BY_DEFAULT%29%3ABool-instance-method\">#has_region?(region_literal : Indexable, drop : Bool)</a></code>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"args_string":"(*region_literal, drop : Bool = MultiIndexable::DROP_BY_DEFAULT)","args_html":"(*region_literal, drop : Bool = <span class=\"t\">MultiIndexable</span><span class=\"t\">::</span><span class=\"t\">DROP_BY_DEFAULT</span>)","location":{"filename":"src/multi_indexable.cr","line_number":621,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L621"},"def":{"name":"has_region?","args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"drop","default_value":"MultiIndexable::DROP_BY_DEFAULT","external_name":"drop","restriction":"Bool"}],"splat_index":0,"visibility":"Public","body":"self.has_region?(region_literal, drop)"},"external_var":false},{"html_id":"hash(hasher)-instance-method","name":"hash","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/multi_indexable.cr","line_number":967,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L967"},"def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = shape_internal.hash(hasher)\neach do |el|\n  hasher = el.hash(hasher)\nend\nhasher\n"},"external_var":false},{"html_id":"last:T-instance-method","name":"last","doc":"Returns the element with the largest ordinate in each axis (the element at the largest coordinate).\nFor example:\n\n```crystal\n# create the following matrix:\n# [5 2]\n# [8 3]\nnarr = NArray.new([[5, 2, 1], [8, 3, 4]])\n\n# extract the bottom-right element (coordinate [1, 2])\nnarr.last # => 4\n```","summary":"<p>Returns the element with the largest ordinate in each axis (the element at the largest coordinate).</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":195,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L195"},"def":{"name":"last","return_type":"T","visibility":"Public","body":"if size == 0\n  raise(ShapeError.new(\"{{@type}} has zero elements (shape: #{shape_internal}).\"))\nend\n\nget_element(shape_internal.map(&.pred))\n"},"external_var":false},{"html_id":"map(&block:T->R):MultiIndexable(R)forallR-instance-method","name":"map","doc":"Returns a `MultiIndexable` with the results of running the block against each element of `self`.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\nres = narr.map { |el| el.to_s } # => NArray[[\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"]]\n```","summary":"<p>Returns a <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> with the results of running the block against each element of <code>self</code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":742,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L742"},"def":{"name":"map","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> R)"},"return_type":"MultiIndexable(R)","visibility":"Public","body":"map_with_coord do |el, coord|\n  yield el\nend"},"external_var":false},{"html_id":"map!(&block:T->T|MultiIndexable(T)):MultiIndexable(T)-instance-method","name":"map!","doc":"TODO docs, test","summary":"<p><span class=\"flag orange\">TODO</span>  docs, test</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":764,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L764"},"def":{"name":"map!","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> T | MultiIndexable(T))"},"return_type":"MultiIndexable(T)","visibility":"Public","body":"map_with_coord! do |el, coord|\n  yield el\nend"},"external_var":false},{"html_id":"map_with(*args:*U,&)forallU-instance-method","name":"map_with","abstract":false,"args":[{"name":"args","external_name":"args","restriction":"*U"}],"args_string":"(*args : *U, &) forall U","args_html":"(*args : <span class=\"o\">*</span><span class=\"t\">U</span>, &) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1076,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1076"},"def":{"name":"map_with","args":[{"name":"args","external_name":"args","restriction":"*U"}],"splat_index":0,"yields":0,"block_arity":0,"visibility":"Public","body":"{% if true %}\n\n      # In order to prepare a buffer, we'll need to create dummy variables\n      # and figure out what typeof(yield(args)) will be.\n      # Hacky, but the only way we could think of.\n      {% for i in 0...(U.size) %}\n        {% if U[i] < MultiIndexable %}\n          dummy{{ i }} = uninitialized typeof(args[{{ i }}].first)\n        {% else %}\n          dummy{{ i }} = uninitialized typeof(args[{{ i }}])\n        {% end %}\n      {% end %}\n\n      value_type = uninitialized typeof(yield(self.first, {% for i in 0...(U.size) %}dummy{{ i }},{% end %}))\n\n      buffer = Pointer(typeof(value_type)).malloc(size)\n\n      # Populate the buffer via the block\n      idx = 0\n      MultiIndexable.each_with(self, *args) do |*elems|\n        buffer[idx] = yield *elems\n        idx += 1\n      end\n\n      slice = Slice.new(buffer, size)\n\n      # Finally, we need to create the `MultiIndexable` to return. If it's\n      # possible to construct the output type from a buffer, we'll do that\n      # (this is very cheap). However, if all we have is build, we'll have\n      # to do a wasteful lexicographic iteration via build.\n      output_type = typeof(build([0]) { value_type })\n\n      # TODO: Change of_buffer to a more descriptive name (like from_lex_buffer or something)\n      if output_type.responds_to?(:of_buffer)\n        # TODO: Right now, there's nothing ensuring that #of_buffer\n        # will actually return the correct output type. A runtime error\n        # won't really make anything better, but I don't think it's possible to\n        # detect at compile time :(\n        #\n        # We should circle back to this and see if we want to use the inneficient but\n        # always-safe `build` version.\n        output_type.of_buffer(shape, slice)\n      else\n        idx = 0\n        build(shape) do\n          val = slice[idx]\n          idx += 1\n          val\n        end\n      end\n      {% end %}"},"external_var":false},{"html_id":"map_with(*args,&)-instance-method","name":"map_with","doc":"Iterates over tuples of elements from `self` and *args*, and creating a `MultiIndexable` containing the output of the block to which those tuples are provided.","summary":"<p>Iterates over tuples of elements from <code>self</code> and <em>args</em>, and creating a <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> containing the output of the block to which those tuples are provided.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, &)","args_html":"(*args, &)","location":{"filename":"src/multi_indexable.cr","line_number":1064,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1064"},"def":{"name":"map_with","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"MultiIndexable.map_with(self, *args) do |*elems|\n  yield *elems\nend"},"external_var":false},{"html_id":"map_with!(*args:*U,&)forallU-instance-method","name":"map_with!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":"*U"}],"args_string":"(*args : *U, &) forall U","args_html":"(*args : <span class=\"o\">*</span><span class=\"t\">U</span>, &) forall U","location":{"filename":"src/multi_indexable.cr","line_number":1131,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L1131"},"def":{"name":"map_with!","args":[{"name":"args","external_name":"args","restriction":"*U"}],"splat_index":0,"yields":0,"block_arity":0,"visibility":"Public","body":"{% if true %}\n      ensure_writable\n      each_coord do |coord|\n        unsafe_set_element(coord, \n          yield(\n            unsafe_fetch_element(coord),\n            {% for i in 0...(U.size) %}\n              {% if U[i] < MultiIndexable %} args[{{ i }}].unsafe_fetch_element(coord) {% else %} args[{{ i }}]{% end %},\n            {% end %}\n          ))\n      end\n      {% end %}"},"external_var":false},{"html_id":"map_with_coord(&)-instance-method","name":"map_with_coord","doc":"Returns a `MultiIndexable` with the results of running the block against each element and coordinate comprising `self`.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\nnarr.map_with_coord do |el, coord|\n  el + coord.sum\nend # => NArray[[1, 3, 5], [5, 7, 9]]\n```","summary":"<p>Returns a <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> with the results of running the block against each element and coordinate comprising <code>self</code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":730,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L730"},"def":{"name":"map_with_coord","yields":2,"block_arity":2,"visibility":"Public","body":"build(shape_internal) do |coord|\n  yield unsafe_fetch_element(coord), coord\nend"},"external_var":false},{"html_id":"map_with_coord!(&block:T->MultiIndexable(T))-instance-method","name":"map_with_coord!","doc":"TODO docs\nDISCUSS is this good behaviour?","summary":"<p><span class=\"flag orange\">TODO</span>  docs DISCUSS is this good behaviour?</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":756,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L756"},"def":{"name":"map_with_coord!","yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> MultiIndexable(T))"},"visibility":"Public","body":"each_coord do |coord|\n  val = yield unsafe_fetch_element(coord), coord\n  unsafe_set_element(coord, val.to_scalar)\nend"},"external_var":false},{"html_id":"permute(*args):MultiIndexable(T)-instance-method","name":"permute","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args) : MultiIndexable(T)","args_html":"(*args) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T)","location":{"filename":"src/multi_indexable.cr","line_number":839,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L839"},"def":{"name":"permute","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"return_type":"MultiIndexable(T)","visibility":"Public","body":"v = view.permute(*args)\n\nbuild(v.shape) do |coord|\n  v.unsafe_fetch_element(coord)\nend\n"},"external_var":false},{"html_id":"process(&block:T->R):ProcView(self,T,R)forallR-instance-method","name":"process","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":933,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L933"},"def":{"name":"process","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> R)"},"return_type":"ProcView(self, T, R)","visibility":"Public","body":"process(block)"},"external_var":false},{"html_id":"process(proc:Proc(T,R)):ProcView(self,T,R)forallR-instance-method","name":"process","abstract":false,"args":[{"name":"proc","external_name":"proc","restriction":"Proc(T, R)"}],"args_string":"(proc : Proc(T, R)) : ProcView(self, T, R) forall R","args_html":"(proc : Proc(T, R)) : <a href=\"../Phase/ProcView.html\">ProcView</a>(<span class=\"k\">self</span>, T, R) forall R","location":{"filename":"src/multi_indexable.cr","line_number":937,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L937"},"def":{"name":"process","args":[{"name":"proc","external_name":"proc","restriction":"Proc(T, R)"}],"return_type":"ProcView(self, T, R)","visibility":"Public","body":"ProcView.of(self, proc)"},"external_var":false},{"html_id":"reshape(*args):MultiIndexable(T)-instance-method","name":"reshape","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args) : MultiIndexable(T)","args_html":"(*args) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T)","location":{"filename":"src/multi_indexable.cr","line_number":839,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L839"},"def":{"name":"reshape","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"return_type":"MultiIndexable(T)","visibility":"Public","body":"v = view.reshape(*args)\n\nbuild(v.shape) do |coord|\n  v.unsafe_fetch_element(coord)\nend\n"},"external_var":false},{"html_id":"reverse(*args):MultiIndexable(T)-instance-method","name":"reverse","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args) : MultiIndexable(T)","args_html":"(*args) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T)","location":{"filename":"src/multi_indexable.cr","line_number":839,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L839"},"def":{"name":"reverse","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"return_type":"MultiIndexable(T)","visibility":"Public","body":"v = view.reverse(*args)\n\nbuild(v.shape) do |coord|\n  v.unsafe_fetch_element(coord)\nend\n"},"external_var":false},{"html_id":"sample(n:Int,random=Random::DEFAULT):Enumerable(T)-instance-method","name":"sample","doc":"Returns a collection of *n* elements picked at random from this\nMultiIndexable.  This method works by randomly generating coordinates and\nreturning the elements at those coordinates. There is no guarantee that\nthe coordinates generated will be distinct from one another.\n\n```crystal\nNArray.new([[1, 2], [3, 4]]).sample(5) # => Enumerable(Int32)\nNArray.new([[1, 2], [3, 4]]).sample(5).to_a # => [4, 2, 4, 3, 2]\nNArray.new([[1, 2], [3, 4]]).sample(5).to_a # => [1, 3, 2, 4, 1]\nNArray.new([[1, 2], [3, 4]]).sample(5).to_a # => [2, 3, 1, 1, 3]\n```","summary":"<p>Returns a collection of <em>n</em> elements picked at random from this MultiIndexable.</p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":"Int"},{"name":"random","default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"args_string":"(n : Int, random = Random::DEFAULT) : Enumerable(T)","args_html":"(n : Int, random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>) : Enumerable(T)","location":{"filename":"src/multi_indexable.cr","line_number":218,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L218"},"def":{"name":"sample","args":[{"name":"n","external_name":"n","restriction":"Int"},{"name":"random","default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"return_type":"Enumerable(T)","visibility":"Public","body":"if n < 0\n  raise(ArgumentError.new(\"Can't sample a negative number of elements. (n = #{n}, which is negative)\"))\nend\n\nArray(T).new(n) do\n  sample(random)\nend\n"},"external_var":false},{"html_id":"sample(random=Random::DEFAULT):T-instance-method","name":"sample","doc":"Returns an element picked at random from this `MultiIndexable`.\n\n```crystal\nNArray.new([[1, 2], [3, 4]]).sample # => 3\nNArray.new([[1, 2], [3, 4]]).sample # => 1\nNArray.new([[1, 2], [3, 4]]).sample # => 2\n```","summary":"<p>Returns an element picked at random from this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"args":[{"name":"random","default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"args_string":"(random = Random::DEFAULT) : T","args_html":"(random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>) : T","location":{"filename":"src/multi_indexable.cr","line_number":233,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L233"},"def":{"name":"sample","args":[{"name":"random","default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"return_type":"T","visibility":"Public","body":"if empty?\n  raise(ShapeError.new(\"Can't sample empty collection. (shape: #{shape_internal})\"))\nend\nunsafe_fetch_element(shape_internal.map do |dim|\n  random.rand(dim)\nend)\n"},"external_var":false},{"html_id":"scalar?:Bool-instance-method","name":"scalar?","doc":"Returns `true` if this `MultiIndexable` contains only a single element.\n\n```crystal\nNArray.new([1]).scalar? # => true\nNArray.new([1, 2]).scalar? # => false\nNArray.new([[1]]).scalar? # => true\nNArray.new([]).scalar? # => false\n```","summary":"<p>Returns <code>true</code> if this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> contains only a single element.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":118,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L118"},"def":{"name":"scalar?","return_type":"Bool","visibility":"Public","body":"size == 1"},"external_var":false},{"html_id":"shape:Array-instance-method","name":"shape","doc":"Returns the capacity of each axis spanned by `self`.\nFor example, a matrix with 4 rows and 2 columns will have the shape\n[4, 2]. This must always return a clone of the actual shape, and is\nsafe to mutate without affecting the MultiIndexable.","summary":"<p>Returns the capacity of each axis spanned by <code>self</code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":45,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L45"},"def":{"name":"shape","return_type":"Array","visibility":"Public","body":"shape_internal.clone"},"external_var":false},{"html_id":"size-instance-method","name":"size","doc":"Returns the total number of elements in this `MultiIndexable`.\nThis quantity is always equal to `shape.product`. However, this method is\nalmost always more performant than computing the product directly.\n\n```crystal\nNArray.new(['a', 'b', 'c']).size # => 3\nNArray.new([[0, 1], [1, 0]]).size # => 4\n```","summary":"<p>Returns the total number of elements in this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":94,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L94"},"def":{"name":"size","visibility":"Public","body":"s = shape_internal\nif s.size == 0\n  return 0\nend\ns.product\n"},"external_var":false},{"html_id":"slices(axis=0):Indexable-instance-method","name":"slices","doc":"Returns an Indexable collection of the slices returned by `#each_slice`.","summary":"<p>Returns an Indexable collection of the slices returned by <code><a href=\"../Phase/MultiIndexable.html#each_slice%28axis%3D0%29%3AIterator-instance-method\">#each_slice</a></code>.</p>","abstract":false,"args":[{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"args_string":"(axis = 0) : Indexable","args_html":"(axis = <span class=\"n\">0</span>) : Indexable","location":{"filename":"src/multi_indexable.cr","line_number":828,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L828"},"def":{"name":"slices","args":[{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"return_type":"Indexable","visibility":"Public","body":"(each_slice(axis)).to_a"},"external_var":false},{"html_id":"tile(counts:Enumerable(Int)):MultiIndexable-instance-method","name":"tile","doc":"*counts* specifies how many times to copy the tile in each axis. If it is the wrong\nsize, `#tile` will return a `DimensionError`.\n\n```crystal\nunit = NArray[[1, 2], [3, 4]]\n\nputs unit.tile([2, 3])\n# 4x6 Phase::NArray(Int32)\n# [[1, 2, 1, 2, 1, 2],\n#  [3, 4, 3, 4, 3, 4],\n#  [1, 2, 1, 2, 1, 2],\n#  [3, 4, 3, 4, 3, 4]]\n```","summary":"<p><em>counts</em> specifies how many times to copy the tile in each axis.</p>","abstract":false,"args":[{"name":"counts","external_name":"counts","restriction":"Enumerable(Int)"}],"args_string":"(counts : Enumerable(Int)) : MultiIndexable","args_html":"(counts : Enumerable(Int)) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>","location":{"filename":"src/multi_indexable.cr","line_number":862,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L862"},"def":{"name":"tile","args":[{"name":"counts","external_name":"counts","restriction":"Enumerable(Int)"}],"return_type":"MultiIndexable","visibility":"Public","body":"new_shape = shape_internal.map_with_index do |axis, idx|\n  axis * counts[idx]\nend\n\niter = (TilingLexIterator.new(IndexRegion.cover(new_shape), shape_internal)).each\n\nbuild(new_shape) do\n  iter.next\n  get(iter.smaller_coord)\nend\n"},"external_var":false},{"html_id":"tile(*counts:Int)-instance-method","name":"tile","doc":"Tuple-accepting overload of `#tile(counts : Enumerable)`.\n\n```crystal\nunit = NArray[[1, 2], [3, 4]]\n\nputs unit.tile(2, 3)\n# 4x6 Phase::NArray(Int32)\n# [[1, 2, 1, 2, 1, 2],\n#  [3, 4, 3, 4, 3, 4],\n#  [1, 2, 1, 2, 1, 2],\n#  [3, 4, 3, 4, 3, 4]]\n```","summary":"<p>Tuple-accepting overload of <code><a href=\"../Phase/MultiIndexable.html#tile%28counts%3AEnumerable%28Int%29%29%3AMultiIndexable-instance-method\">#tile(counts : Enumerable)</a></code>.</p>","abstract":false,"args":[{"name":"counts","external_name":"counts","restriction":"Int"}],"args_string":"(*counts : Int)","args_html":"(*counts : Int)","location":{"filename":"src/multi_indexable.cr","line_number":885,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L885"},"def":{"name":"tile","args":[{"name":"counts","external_name":"counts","restriction":"Int"}],"splat_index":0,"visibility":"Public","body":"tile(counts)"},"external_var":false},{"html_id":"to_f:Float-instance-method","name":"to_f","doc":"TEST\nReturns `to_scalar.to_f`.\nThis method allows single-element MultiIndexables to be treated like\nnumerics in many cases.\n\n```crystal\nNArray.new([[0.5f32]]).to_f # => 0.5\nNArray.new([[1], [2]]).to_f # raises ShapeError\nNArray.new([\"test\"]).to_f # will not compile, as String has no #to_f method.\n```","summary":"<p>TEST Returns <code>to_scalar.to_f</code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":159,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L159"},"def":{"name":"to_f","return_type":"Float","visibility":"Public","body":"to_scalar.to_f"},"external_var":false},{"html_id":"to_literal_s(io:IO):Nil-instance-method","name":"to_literal_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":280,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L280"},"def":{"name":"to_literal_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"Formatter.print_literal(self, io)"},"external_var":false},{"html_id":"to_narr:NArray(T)-instance-method","name":"to_narr","doc":"Creates an `NArray` duplicate of this `MultiIndexable`.\n\n```crystal\n# not_an_narray : MultiIndexable\nnarr = not_an_narray.to_narr # => NArray\nnot_an_narray.equals?(narr) { |el_1, el_2| el_1 == el_2 } # => true\n```","summary":"<p>Creates an <code><a href=\"../Phase/NArray.html\">NArray</a></code> duplicate of this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":896,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L896"},"def":{"name":"to_narr","return_type":"NArray(T)","visibility":"Public","body":"NArray.build(shape) do |coord|\n  unsafe_fetch_element(coord)\nend"},"external_var":false},{"html_id":"to_s(io:IO,settings=Formatter::Settings.new):Nil-instance-method","name":"to_s","doc":"FIXME: NArrayFormatter depends on buffer indices.","summary":"<p><span class=\"flag yellow\">FIXME</span>  NArrayFormatter depends on buffer indices.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"settings","default_value":"Formatter::Settings.new","external_name":"settings","restriction":""}],"args_string":"(io : IO, settings = Formatter::Settings.new) : Nil","args_html":"(io : IO, settings = <span class=\"t\">Formatter</span><span class=\"t\">::</span><span class=\"t\">Settings</span>.new) : Nil","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":292,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L292"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"settings","default_value":"Formatter::Settings.new","external_name":"settings","restriction":""}],"return_type":"Nil","visibility":"Public","body":"Formatter.print(self, io, settings: settings)"},"external_var":false},{"html_id":"to_s(settings=Formatter::Settings.new):String-instance-method","name":"to_s","doc":"FIXME: NArrayFormatter depends on buffer indices.","summary":"<p><span class=\"flag yellow\">FIXME</span>  NArrayFormatter depends on buffer indices.</p>","abstract":false,"args":[{"name":"settings","default_value":"Formatter::Settings.new","external_name":"settings","restriction":""}],"args_string":"(settings = Formatter::Settings.new) : String","args_html":"(settings = <span class=\"t\">Formatter</span><span class=\"t\">::</span><span class=\"t\">Settings</span>.new) : String","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":285,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L285"},"def":{"name":"to_s","args":[{"name":"settings","default_value":"Formatter::Settings.new","external_name":"settings","restriction":""}],"return_type":"String","visibility":"Public","body":"String.build do |str|\n  Formatter.print(self, str, settings: settings)\nend"},"external_var":false},{"html_id":"to_scalar:T-instance-method","name":"to_scalar","doc":"If this `MultiIndexable` is a scalar (see `#scalar?`), `to_scalar` will\nreturn the sole element that it contains. This method will raise a\n`ShapeError` if `self.scalar?` returns `false`.\n\n```crystal\nNArray.new(['a']).to_scalar # => 'a'\nNArray.new([['a', 'b'], ['c', 'd']]).to_scalar # raises ShapeError\n```","summary":"<p>If this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> is a scalar (see <code><a href=\"../Phase/MultiIndexable.html#scalar%3F%3ABool-instance-method\">#scalar?</a></code>), <code><a href=\"../Phase/MultiIndexable.html#to_scalar%3AT-instance-method\">#to_scalar</a></code> will return the sole element that it contains.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":130,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L130"},"def":{"name":"to_scalar","return_type":"T","visibility":"Public","body":"if scalar?\n  first\nelse\n  raise(ShapeError.new(\"Only single-element MultiIndexables can be converted to scalars, but this one has #{size} elements (shape: #{shape_internal}).\"))\nend"},"external_var":false},{"html_id":"to_scalar?:T|Nil-instance-method","name":"to_scalar?","doc":"Identical to `#to_scalar`, but returns `nil` in case of an error.\n\n```crystal\nNArray.new(['a']).to_scalar # => 'a'\nNArray.new([['a', 'b'], ['c', 'd']]).to_scalar # => nil\n```","summary":"<p>Identical to <code><a href=\"../Phase/MultiIndexable.html#to_scalar%3AT-instance-method\">#to_scalar</a></code>, but returns <code>nil</code> in case of an error.</p>","abstract":false,"location":{"filename":"src/multi_indexable.cr","line_number":144,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L144"},"def":{"name":"to_scalar?","return_type":"T | ::Nil","visibility":"Public","body":"if scalar?\n  return first\nend\nfalse\n"},"external_var":false},{"html_id":"unsafe_fetch_chunk(region:IndexRegion):MultiIndexable(T)-instance-method","name":"unsafe_fetch_chunk","doc":"Copies the elements described by *region* into a new `MultiIndexable` without performing any bounds checking.\nUnless you are sure that your *region* will fit inside of this\n`MultiIndexable`, you should opt to use `#get_chunk` instead.\n\nThis method may return any `MultiIndexable` - the default implementation\nwill return an `NArray`, however implementers of other `MultiIndexable`s\nare encouraged to override this method where it makes sense to do so.\n\nThis method's usage is identical to `#get_chunk(region : IndexRegion)`,\nbut it is slightly faster.","summary":"<p>Copies the elements described by <em>region</em> into a new <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> without performing any bounds checking.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"args_string":"(region : IndexRegion) : MultiIndexable(T)","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>) : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T)","location":{"filename":"src/multi_indexable.cr","line_number":329,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L329"},"def":{"name":"unsafe_fetch_chunk","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"return_type":"MultiIndexable(T)","visibility":"Public","body":"build(region.shape) do |coord|\n  unsafe_fetch_element(region.local_to_absolute_unsafe(coord))\nend"},"external_var":false},{"html_id":"unsafe_fetch_element(coord:Indexable):T-instance-method","name":"unsafe_fetch_element","doc":"Returns the element at the provided *coord*, possibly mutating *coord*, without performing canonicalization or bounds-checking.\nThis method cannot be used with negative coordinates, and is not safe\nunless you are certain your coordinate is already canonicalized.","summary":"<p>Returns the element at the provided <em>coord</em>, possibly mutating <em>coord</em>, without performing canonicalization or bounds-checking.</p>","abstract":true,"args":[{"name":"coord","external_name":"coord","restriction":"Indexable"}],"args_string":"(coord : Indexable) : T","args_html":"(coord : Indexable) : T","location":{"filename":"src/multi_indexable.cr","line_number":39,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L39"},"def":{"name":"unsafe_fetch_element","args":[{"name":"coord","external_name":"coord","restriction":"Indexable"}],"return_type":"T","visibility":"Public","body":""},"external_var":false},{"html_id":"view(region:Indexable|Nil|IndexRegion=nil):View(self,T)-instance-method","name":"view","abstract":false,"args":[{"name":"region","default_value":"nil","external_name":"region","restriction":"Indexable | ::Nil | IndexRegion"}],"args_string":"(region : Indexable | Nil | IndexRegion = nil) : View(self, T)","args_html":"(region : Indexable | Nil | <a href=\"../Phase/IndexRegion.html\">IndexRegion</a> = <span class=\"n\">nil</span>) : <a href=\"../Phase/View.html\">View</a>(<span class=\"k\">self</span>, T)","location":{"filename":"src/multi_indexable.cr","line_number":925,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L925"},"def":{"name":"view","args":[{"name":"region","default_value":"nil","external_name":"region","restriction":"Indexable | ::Nil | IndexRegion"}],"return_type":"View(self, T)","visibility":"Public","body":"View.of(self, region)"},"external_var":false},{"html_id":"view(*region):View(self,T)-instance-method","name":"view","abstract":false,"args":[{"name":"region","external_name":"region","restriction":""}],"args_string":"(*region) : View(self, T)","args_html":"(*region) : <a href=\"../Phase/View.html\">View</a>(<span class=\"k\">self</span>, T)","location":{"filename":"src/multi_indexable.cr","line_number":929,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L929"},"def":{"name":"view","args":[{"name":"region","external_name":"region","restriction":""}],"splat_index":0,"return_type":"View(self, T)","visibility":"Public","body":"view(region)"},"external_var":false}],"macros":[{"html_id":"coord_splat_overload(name)-macro","name":"coord_splat_overload","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/multi_indexable.cr","line_number":610,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L610"},"def":{"name":"coord_splat_overload","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"      \n# Tuple-accepting overload of `#\n{{ name.id }}\n`.\n\n      def \n{{ name.id }}\n(*coord : Int)\n        self.\n{{ name.id }}\n(coord)\n      \nend\n    \n"}},{"html_id":"def_elementwise_binary(name)-macro","name":"def_elementwise_binary","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/multi_indexable.cr","line_number":975,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L975"},"def":{"name":"def_elementwise_binary","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"      \n# Invokes `#\n{{ name.id }}\n` element-wise between `self` and *other*, returning\n\n        \n# an `NArray` that contains the results.\n\n        def \n{{ name.id }}\n(other : MultiIndexable(U)) forall U \n          if shape_internal != other.shape_internal\n            if scalar? || other.scalar?\n              raise ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '\n{{ name.id }}\n' cannot be applied element-wise. Did you mean to call to_scalar on one of the arguments?\")\n            \nend\n            raise ShapeError.new(\"The shape of this MultiIndexable (#{shape_internal}) does not match the shape of the one provided (#{other.shape_internal}), so '\n{{ name.id }}\n' cannot be applied element-wise.\")\n          \nend\n\n          map_with(other) do |elem, other_elem|\n            \nelem.\n{{ name.id }}\n other_elem\n          \nend\n        \nend\n\n        \n# Invokes `#\n{{ name.id }}\n(other)` on each element in `self`, returning an\n\n        \n# `NArray` that contains the results.\n\n        def \n{{ name.id }}\n(other)\n          map &.\n{{ name.id }}\n other\n        \nend\n    \n"}},{"html_id":"def_elementwise_unary(name)-macro","name":"def_elementwise_unary","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/multi_indexable.cr","line_number":998,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L998"},"def":{"name":"def_elementwise_unary","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"      def \n{{ name.id }}\n\n        map &.\n{{ name.id }}\n \n      \nend\n    \n"}},{"html_id":"region_splat_overload(name)-macro","name":"region_splat_overload","doc":"TODO rename these?\nThese primarily exist for user clarity (could easily have all these methods\nforward all their args to a single funciton to handle tuple-packaging, but\nwould leave a rather opaque method signature behind)","summary":"<p><span class=\"flag orange\">TODO</span>  rename these? These primarily exist for user clarity (could easily have all these methods forward all their args to a single funciton to handle tuple-packaging, but would leave a rather opaque method signature behind)</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/multi_indexable.cr","line_number":603,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable.cr#L603"},"def":{"name":"region_splat_overload","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"      \n# Tuple-accepting overload of `#\n{{ name.id }}\n(region_literal : Indexable, drop : Bool)`.\n\n      def \n{{ name.id }}\n(*region_literal, drop : Bool = MultiIndexable::DROP_BY_DEFAULT)\n        self.\n{{ name.id }}\n(region_literal, drop)\n      \nend\n    \n"}}],"types":[{"html_id":"ph-core/Phase/MultiIndexable/ElemAndCoordIterator","path":"Phase/MultiIndexable/ElemAndCoordIterator.html","kind":"class","full_name":"Phase::MultiIndexable::ElemAndCoordIterator(S, E, I)","name":"ElemAndCoordIterator","abstract":false,"superclass":{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":3,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L3"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"namespace":{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable(T)","name":"MultiIndexable"},"constructors":[{"html_id":"new(src:MultiIndexable,coord_iter:StrideIterator(I))forallI-class-method","name":"new","doc":"Constructs an `ElemAndCoordIterator` that draws coordinates from *coord_iter* and takes the matching elements from *source*.","summary":"<p>Constructs an <code><a href=\"../../Phase/MultiIndexable/ElemAndCoordIterator.html\">ElemAndCoordIterator</a></code> that draws coordinates from <em>coord_iter</em> and takes the matching elements from <em>source</em>.</p>","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"},{"name":"coord_iter","external_name":"coord_iter","restriction":"StrideIterator(I)"}],"args_string":"(src : MultiIndexable, coord_iter : StrideIterator(I)) forall I","args_html":"(src : <a href=\"../../Phase/MultiIndexable.html\">MultiIndexable</a>, coord_iter : <a href=\"../../Phase/StrideIterator.html\">StrideIterator</a>(I)) forall I","location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":28,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L28"},"def":{"name":"new","args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"},{"name":"coord_iter","external_name":"coord_iter","restriction":"StrideIterator(I)"}],"visibility":"Public","body":"new(src, typeof(src.sample), coord_iter)"},"external_var":false},{"html_id":"new(src:MultiIndexable,idx_region:IndexRegion)-class-method","name":"new","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"},{"name":"idx_region","external_name":"idx_region","restriction":"IndexRegion"}],"args_string":"(src : MultiIndexable, idx_region : IndexRegion)","args_html":"(src : <a href=\"../../Phase/MultiIndexable.html\">MultiIndexable</a>, idx_region : <a href=\"../../Phase/IndexRegion.html\">IndexRegion</a>)","location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":32,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L32"},"def":{"name":"new","args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"},{"name":"idx_region","external_name":"idx_region","restriction":"IndexRegion"}],"visibility":"Public","body":"if src.dimensions != idx_region.proper_dimensions\n  raise(ShapeError.new(\"The provided IndexRegion has a proper dimension of #{idx_region.proper_dimensions}, which does not match the dimensionality of the MultiIndexable (#{src.dimensions}D).\"))\nend\n\nnew(src, idx_region.each)\n"},"external_var":false},{"html_id":"new(src:MultiIndexable)-class-method","name":"new","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"}],"args_string":"(src : MultiIndexable)","args_html":"(src : <a href=\"../../Phase/MultiIndexable.html\">MultiIndexable</a>)","location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":40,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L40"},"def":{"name":"new","args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"}],"visibility":"Public","body":"new(src, src.each_coord)"},"external_var":false}],"instance_methods":[{"html_id":"clone:self-instance-method","name":"clone","abstract":false,"location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":76,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L76"},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"ElemAndCoordIterator.new(@src, @coord_iter.clone)"},"external_var":false},{"html_id":"coord_iter:StrideIterator(I)-instance-method","name":"coord_iter","abstract":false,"location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":6,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L6"},"def":{"name":"coord_iter","return_type":"StrideIterator(I)","visibility":"Public","body":"@coord_iter"},"external_var":false},{"html_id":"next:Tuple(E,Indexable(I))|Stop-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":44,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L44"},"def":{"name":"next","return_type":"Tuple(E, Indexable(I)) | Stop","visibility":"Public","body":"coord = @coord_iter.next\n\nif coord.is_a?(Stop)\n  stop\nelse\n  {@src.unsafe_fetch_element(coord), coord}\nend\n"},"external_var":false},{"html_id":"reset!(*args,**options)-instance-method","name":"reset!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":9,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L9"},"def":{"name":"reset!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@coord_iter.reset!(*args, **options)"},"external_var":false},{"html_id":"reset!(*args,**options,&)-instance-method","name":"reset!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":9,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L9"},"def":{"name":"reset!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@coord_iter.reset!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"},"external_var":false},{"html_id":"reverse!(*args,**options)-instance-method","name":"reverse!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":9,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L9"},"def":{"name":"reverse!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@coord_iter.reverse!(*args, **options)"},"external_var":false},{"html_id":"reverse!(*args,**options,&)-instance-method","name":"reverse!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":9,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L9"},"def":{"name":"reverse!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@coord_iter.reverse!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"},"external_var":false},{"html_id":"reverse_each-instance-method","name":"reverse_each","abstract":false,"location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":64,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L64"},"def":{"name":"reverse_each","visibility":"Public","body":"inst = clone\ninst.reverse!\ninst\n"},"external_var":false},{"html_id":"reverse_each(&)-instance-method","name":"reverse_each","abstract":false,"location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":70,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L70"},"def":{"name":"reverse_each","yields":1,"block_arity":1,"visibility":"Public","body":"reverse_each.each do |tuple|\n  yield tuple\nend"},"external_var":false},{"html_id":"to_a-instance-method","name":"to_a","doc":"Returns an `Array` with all the elements in the collection.\n\n```\n(1..5).to_a # => [1, 2, 3, 4, 5]\n```","summary":"<p>Returns an <code>Array</code> with all the elements in the collection.</p>","abstract":false,"location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":54,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L54"},"def":{"name":"to_a","visibility":"Public","body":"arr = [] of Tuple(E, Array(I))\neach do |el|\n  arr << {el[0], el[1].to_a}\nend\narr\n"},"external_var":false},{"html_id":"unsafe_next:Tuple(E,Indexable(I))-instance-method","name":"unsafe_next","abstract":false,"location":{"filename":"src/multi_indexable/elem_coord_iterator.cr","line_number":60,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_coord_iterator.cr#L60"},"def":{"name":"unsafe_next","return_type":"Tuple(E, Indexable(I))","visibility":"Public","body":"self.next.as(Tuple(E, Indexable(I)))"},"external_var":false}]},{"html_id":"ph-core/Phase/MultiIndexable/ElemIterator","path":"Phase/MultiIndexable/ElemIterator.html","kind":"class","full_name":"Phase::MultiIndexable::ElemIterator(S, E, I)","name":"ElemIterator","abstract":false,"superclass":{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/multi_indexable/elem_iterator.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L5"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"namespace":{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable(T)","name":"MultiIndexable"},"constructors":[{"html_id":"new(src:MultiIndexable,idx_r:IndexRegion)-class-method","name":"new","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"},{"name":"idx_r","external_name":"idx_r","restriction":"IndexRegion"}],"args_string":"(src : MultiIndexable, idx_r : IndexRegion)","args_html":"(src : <a href=\"../../Phase/MultiIndexable.html\">MultiIndexable</a>, idx_r : <a href=\"../../Phase/IndexRegion.html\">IndexRegion</a>)","location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":15,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L15"},"def":{"name":"new","args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"},{"name":"idx_r","external_name":"idx_r","restriction":"IndexRegion"}],"visibility":"Public","body":"new(ElemAndCoordIterator.new(src, idx_r))"},"external_var":false},{"html_id":"new(src:MultiIndexable,coord_iter:StrideIterator)-class-method","name":"new","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"},{"name":"coord_iter","external_name":"coord_iter","restriction":"StrideIterator"}],"args_string":"(src : MultiIndexable, coord_iter : StrideIterator)","args_html":"(src : <a href=\"../../Phase/MultiIndexable.html\">MultiIndexable</a>, coord_iter : <a href=\"../../Phase/StrideIterator.html\">StrideIterator</a>)","location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":19,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L19"},"def":{"name":"new","args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"},{"name":"coord_iter","external_name":"coord_iter","restriction":"StrideIterator"}],"visibility":"Public","body":"new(ElemAndCoordIterator.new(src, coord_iter))"},"external_var":false},{"html_id":"new(ec_iter:ElemAndCoordIterator(S,E,I))-class-method","name":"new","abstract":false,"args":[{"name":"ec_iter","external_name":"ec_iter","restriction":"ElemAndCoordIterator(S, E, I)"}],"args_string":"(ec_iter : ElemAndCoordIterator(S, E, I))","args_html":"(ec_iter : <a href=\"../../Phase/MultiIndexable/ElemAndCoordIterator.html\">ElemAndCoordIterator</a>(S, E, I))","location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":12,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L12"},"def":{"name":"new","args":[{"name":"ec_iter","external_name":"ec_iter","restriction":"ElemAndCoordIterator(S, E, I)"}],"visibility":"Public","body":"_ = ElemIterator(S, E, I).allocate\n_.initialize(ec_iter)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false},{"html_id":"new(src:MultiIndexable)-class-method","name":"new","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"}],"args_string":"(src : MultiIndexable)","args_html":"(src : <a href=\"../../Phase/MultiIndexable.html\">MultiIndexable</a>)","location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":23,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L23"},"def":{"name":"new","args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"}],"visibility":"Public","body":"new(ElemAndCoordIterator.new(src))"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":9,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L9"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t|\n  ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive\nend %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"coord_iter(*args,**options)-instance-method","name":"coord_iter","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L10"},"def":{"name":"coord_iter","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@ec_iter.coord_iter(*args, **options)"},"external_var":false},{"html_id":"coord_iter(*args,**options,&)-instance-method","name":"coord_iter","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L10"},"def":{"name":"coord_iter","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@ec_iter.coord_iter(*args, **options) do |*yield_args|\n  yield *yield_args\nend"},"external_var":false},{"html_id":"next:E|Stop-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":27,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L27"},"def":{"name":"next","return_type":"E | Stop","visibility":"Public","body":"ec_pair = @ec_iter.next\n\nif ec_pair.is_a?(Stop)\n  stop\nelse\n  ec_pair[0]\nend\n"},"external_var":false},{"html_id":"reset!(*args,**options)-instance-method","name":"reset!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L10"},"def":{"name":"reset!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@ec_iter.reset!(*args, **options)"},"external_var":false},{"html_id":"reset!(*args,**options,&)-instance-method","name":"reset!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L10"},"def":{"name":"reset!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@ec_iter.reset!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"},"external_var":false},{"html_id":"reverse!(*args,**options)-instance-method","name":"reverse!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L10"},"def":{"name":"reverse!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@ec_iter.reverse!(*args, **options)"},"external_var":false},{"html_id":"reverse!(*args,**options,&)-instance-method","name":"reverse!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L10"},"def":{"name":"reverse!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@ec_iter.reverse!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"},"external_var":false},{"html_id":"reverse_each-instance-method","name":"reverse_each","abstract":false,"location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":51,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L51"},"def":{"name":"reverse_each","visibility":"Public","body":"inst = clone\ninst.reverse!\ninst\n"},"external_var":false},{"html_id":"reverse_each(&)-instance-method","name":"reverse_each","abstract":false,"location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":57,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L57"},"def":{"name":"reverse_each","yields":1,"block_arity":1,"visibility":"Public","body":"reverse_each.each do |elem|\n  yield elem\nend"},"external_var":false},{"html_id":"unsafe_next:E-instance-method","name":"unsafe_next","abstract":false,"location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":37,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L37"},"def":{"name":"unsafe_next","return_type":"E","visibility":"Public","body":"@ec_iter.unsafe_next[0]"},"external_var":false},{"html_id":"with_coord:ElemAndCoordIterator(S,E,I)-instance-method","name":"with_coord","abstract":false,"location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":41,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L41"},"def":{"name":"with_coord","return_type":"ElemAndCoordIterator(S, E, I)","visibility":"Public","body":"@ec_iter"},"external_var":false},{"html_id":"with_coord(&)-instance-method","name":"with_coord","abstract":false,"location":{"filename":"src/multi_indexable/elem_iterator.cr","line_number":45,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/elem_iterator.cr#L45"},"def":{"name":"with_coord","yields":1,"block_arity":1,"visibility":"Public","body":"@ec_iter.each do |tuple|\n  yield tuple\nend"},"external_var":false}]},{"html_id":"ph-core/Phase/MultiIndexable/Formatter","path":"Phase/MultiIndexable/Formatter.html","kind":"class","full_name":"Phase::MultiIndexable::Formatter(S, E, I)","name":"Formatter","abstract":false,"superclass":{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":18,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L18"},{"filename":"src/multi_indexable/formatter/settings.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L5"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable(T)","name":"MultiIndexable"},"doc":"Used to print `MultiIndexable`s in a user-readable fashion. The most\ncommon usage of `Formatter` is the class method `Formatter.print(narr,\nio, settings)`.\n\n`Formatter` can be configured at multiple different levels:\n- Per invocation\n- Program wide\n- System wide\n\nFor detailed information about how that all works, see `Formatter::Settings`.","summary":"<p>Used to print <code><a href=\"../../Phase/MultiIndexable.html\">MultiIndexable</a></code>s in a user-readable fashion.</p>","class_methods":[{"html_id":"print(narr:S,io:IO=STDOUT,settings=nil)-class-method","name":"print","abstract":false,"args":[{"name":"narr","external_name":"narr","restriction":"S"},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":"IO"},{"name":"settings","default_value":"nil","external_name":"settings","restriction":""}],"args_string":"(narr : S, io : IO = STDOUT, settings = nil)","args_html":"(narr : S, io : IO = <span class=\"t\">STDOUT</span>, settings = <span class=\"n\">nil</span>)","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":37,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L37"},"def":{"name":"print","args":[{"name":"narr","external_name":"narr","restriction":"S"},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":"IO"},{"name":"settings","default_value":"nil","external_name":"settings","restriction":""}],"visibility":"Public","body":"settings || (settings = Settings.new)\n\ndisplay_shape = narr.shape.map_with_index do |dim, i|\n  if i < (narr.dimensions - 1)\n    color = settings.colors[((narr.dimensions - i) + 1) % settings.colors.size]\n  else\n    color = :default\n  end\n\n  dim.to_s.colorize(color)\nend\n\nio << \"#{display_shape.join('x')} #{if narr.shape.size == 1\n  \"element \"\nend}#{narr.class}\\n\"\n(Formatter(S, typeof(narr.first), typeof(narr.shape[0])).new(narr, io, settings)).print\n"},"external_var":false},{"html_id":"print_literal(narr:S,io=STDOUT)-class-method","name":"print_literal","abstract":false,"args":[{"name":"narr","external_name":"narr","restriction":"S"},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(narr : S, io = STDOUT)","args_html":"(narr : S, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":54,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L54"},"def":{"name":"print_literal","args":[{"name":"narr","external_name":"narr","restriction":"S"},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"fmt = Formatter(S, typeof(narr.first), typeof(narr.shape[0])).new(narr, io, Settings.new)\nfmt.print_literal\n"},"external_var":false}],"constructors":[{"html_id":"new(narr:MultiIndexable(E),io:IO,settings:Phase::MultiIndexable::Formatter::Settings)-class-method","name":"new","abstract":false,"args":[{"name":"narr","external_name":"narr","restriction":"MultiIndexable(E)"},{"name":"io","external_name":"io","restriction":"::IO"},{"name":"settings","external_name":"settings","restriction":"::Phase::MultiIndexable::Formatter::Settings"}],"args_string":"(narr : MultiIndexable(E), io : IO, settings : Phase::MultiIndexable::Formatter::Settings)","args_html":"(narr : <a href=\"../../Phase/MultiIndexable.html\">MultiIndexable</a>(E), io : IO, settings : <a href=\"../../Phase/MultiIndexable/Formatter/Settings.html\">Phase::MultiIndexable::Formatter::Settings</a>)","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":59,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L59"},"def":{"name":"new","args":[{"name":"narr","external_name":"narr","restriction":"MultiIndexable(E)"},{"name":"io","external_name":"io","restriction":"::IO"},{"name":"settings","external_name":"settings","restriction":"::Phase::MultiIndexable::Formatter::Settings"}],"visibility":"Public","body":"_ = Formatter(S, E, I).allocate\n_.initialize(narr, io, settings)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"close(height,idx)-instance-method","name":"close","abstract":false,"args":[{"name":"height","external_name":"height","restriction":""},{"name":"idx","external_name":"idx","restriction":""}],"args_string":"(height, idx)","args_html":"(height, idx)","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":269,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L269"},"def":{"name":"close","args":[{"name":"height","external_name":"height","restriction":""},{"name":"idx","external_name":"idx","restriction":""}],"visibility":"Public","body":"brackets = @settings.brackets[height % @settings.brackets.size]\nif compact?(height)\n  @current_indentation = @current_indentation - (brackets[0] % idx).size\nelse\n  if height != 0\n    newline(-1)\n  end\nend\ncolor_print(brackets[1] % idx, height)\n"},"external_var":false},{"html_id":"format_element(el:Int):String-instance-method","name":"format_element","abstract":false,"args":[{"name":"el","external_name":"el","restriction":"Int"}],"args_string":"(el : Int) : String","args_html":"(el : Int) : String","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":191,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L191"},"def":{"name":"format_element","args":[{"name":"el","external_name":"el","restriction":"Int"}],"return_type":"String","visibility":"Public","body":"str = @settings.integer_format % el\nif str.size > @justify_length\n  return format_element(BigFloat.new(el))\nend\nstr\n"},"external_var":false},{"html_id":"format_element(el:Float):String-instance-method","name":"format_element","abstract":false,"args":[{"name":"el","external_name":"el","restriction":"Float"}],"args_string":"(el : Float) : String","args_html":"(el : Float) : String","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":199,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L199"},"def":{"name":"format_element","args":[{"name":"el","external_name":"el","restriction":"Float"}],"return_type":"String","visibility":"Public","body":"str = @settings.decimal_format % el\n\nif str.size > @justify_length\n  separator = str.rindex(/[pe]/i)\n  if separator.nil?\n    str = \"%e\" % el\n    separator = (str.rindex(/[pe]/i)).not_nil!\n  end\n\n  truncate_length = str.size - @justify_length\n\n  if (separator - truncate_length) < 3\n    mantissa = str[0]\n  else\n    mantissa = str[...(separator - truncate_length)]\n  end\n\n  exponent = str[separator..]\n  str = mantissa + exponent\nend\nstr\n"},"external_var":false},{"html_id":"format_element(el:String):String-instance-method","name":"format_element","abstract":false,"args":[{"name":"el","external_name":"el","restriction":"String"}],"args_string":"(el : String) : String","args_html":"(el : String) : String","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":228,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L228"},"def":{"name":"format_element","args":[{"name":"el","external_name":"el","restriction":"String"}],"return_type":"String","visibility":"Public","body":"str = el.inspect\nif str.size > @justify_length\n  str = str[0...(@justify_length - 4)] + \"\\\"...\"\nend\nstr\n"},"external_var":false},{"html_id":"format_element(el):String-instance-method","name":"format_element","abstract":false,"args":[{"name":"el","external_name":"el","restriction":""}],"args_string":"(el) : String","args_html":"(el) : String","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":236,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L236"},"def":{"name":"format_element","args":[{"name":"el","external_name":"el","restriction":""}],"return_type":"String","visibility":"Public","body":"if el.responds_to?(:ph_to_s)\n  str = el.ph_to_s\nelse\n  str = el.inspect\nend\n\nif str.size > @justify_length\n  str = str[0...(@justify_length - 3)] + \"...\"\nend\nstr\n"},"external_var":false},{"html_id":"measure-instance-method","name":"measure","doc":"get the length of the longest element to be displayed (for justification purposes)","summary":"<p>get the length of the longest element to be displayed (for justification purposes)</p>","abstract":false,"location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":93,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L93"},"def":{"name":"measure","visibility":"Public","body":"@justify_length = @settings.max_element_width\n@justify_length = walk_n_measure\n@iter.reset!\n"},"external_var":false},{"html_id":"newline(indent_change=0)-instance-method","name":"newline","abstract":false,"args":[{"name":"indent_change","default_value":"0","external_name":"indent_change","restriction":""}],"args_string":"(indent_change = 0)","args_html":"(indent_change = <span class=\"n\">0</span>)","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":253,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L253"},"def":{"name":"newline","args":[{"name":"indent_change","default_value":"0","external_name":"indent_change","restriction":""}],"visibility":"Public","body":"@io << \"\\n\"\n@current_indentation = @current_indentation + (indent_change * @settings.indent_width)\n@io << (\" \" * @current_indentation)\n"},"external_var":false},{"html_id":"open(height,idx)-instance-method","name":"open","abstract":false,"args":[{"name":"height","external_name":"height","restriction":""},{"name":"idx","external_name":"idx","restriction":""}],"args_string":"(height, idx)","args_html":"(height, idx)","location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":259,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L259"},"def":{"name":"open","args":[{"name":"height","external_name":"height","restriction":""},{"name":"idx","external_name":"idx","restriction":""}],"visibility":"Public","body":"brackets = @settings.brackets[height % @settings.brackets.size]\ncolor_print(brackets[0] % idx, height)\nif compact?(height)\n  @current_indentation = @current_indentation + (brackets[0] % idx).size\nelse\n  if height != 0\n    newline(1)\n  end\nend\n"},"external_var":false},{"html_id":"print-instance-method","name":"print","abstract":false,"location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":99,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L99"},"def":{"name":"print","visibility":"Public","body":"measure\nwalk_n_print\n@iter.reset!\n"},"external_var":false},{"html_id":"print_literal-instance-method","name":"print_literal","abstract":false,"location":{"filename":"src/multi_indexable/formatter/formatter.cr","line_number":105,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/formatter.cr#L105"},"def":{"name":"print_literal","visibility":"Public","body":"walk_n_print_flat\n@iter.reset!\n"},"external_var":false}],"types":[{"html_id":"ph-core/Phase/MultiIndexable/Formatter/Settings","path":"Phase/MultiIndexable/Formatter/Settings.html","kind":"class","full_name":"Phase::MultiIndexable::Formatter::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ph-core/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/multi_indexable/formatter/settings.cr","line_number":27,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L27"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"USER_CONFIG_FILENAME","name":"USER_CONFIG_FILENAME","value":"\"formatter.yaml\""}],"included_modules":[{"html_id":"ph-core/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"namespace":{"html_id":"ph-core/Phase/MultiIndexable/Formatter","kind":"class","full_name":"Phase::MultiIndexable::Formatter(S, E, I)","name":"Formatter"},"doc":"Every instance of `Settings` stores configuration options that can\nbe provided to `MultiIndexable::Formatter`. Additionally, `Settings`\ncan store a project-wide formatter configuration (via `.project_settings`\nand `.project_settings=`), and load system-wide configuration (via `self.user_settings`).\n\n### Where does `Settings` get it's data from?\nAll user-configurable printing methods in `Formatter` will accept an\noptional *settings* parameter. If you provide an instance of `Settings`\nto that formatter method, it will always be used, no matter what project\nor system-wide configuration is enabled. If you do not provide a\n`Settings` instance in the call to `Formatter`, `Formatter` will load its\nconfiguration from `Settings.new`.\n\n`Settings.new` will check everything on this list (starting at the top)\nuntil it finds suitable settings, and then returns those.\n- `Settings.project_settings` (`nil` by default, but can be altered via\n`.project_settings=`)\n- `Settings.user_settings` (attempts to cache and return settings from a\n`formatter.yaml` file. See `.user_settings` for details)\n- `Settings.default` (the default configuration that we, the developers\nof Phase, think is nice)","summary":"<p>Every instance of <code><a href=\"../../../Phase/MultiIndexable/Formatter/Settings.html\">Settings</a></code> stores configuration options that can be provided to <code><a href=\"../../../Phase/MultiIndexable/Formatter.html\">MultiIndexable::Formatter</a></code>.</p>","class_methods":[{"html_id":"project_settings:self|Nil-class-method","name":"project_settings","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":35,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L35"},"def":{"name":"project_settings","return_type":"self | ::Nil","visibility":"Public","body":"@@project_settings"},"external_var":false},{"html_id":"project_settings=(project_settings:self|Nil)-class-method","name":"project_settings=","abstract":false,"args":[{"name":"project_settings","external_name":"project_settings","restriction":"self | ::Nil"}],"args_string":"(project_settings : self | Nil)","args_html":"(project_settings : <span class=\"k\">self</span> | Nil)","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":35,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L35"},"def":{"name":"project_settings=","args":[{"name":"project_settings","external_name":"project_settings","restriction":"self | ::Nil"}],"visibility":"Public","body":"@@project_settings = project_settings"},"external_var":false},{"html_id":"user_settings:self|Nil-class-method","name":"user_settings","doc":"TODO: document properly once this is set in stone\ntries to read from PHASE_CONFIG_DIR - if the file isn't there,\nreads from XDG_CONFIG_DIR/phase. if still not there, tries ~/.config\nBETTER_ERROR: Better error message for failed read","summary":"<p><span class=\"flag orange\">TODO</span>  document properly once this is set in stone tries to read from PHASE_CONFIG_DIR - if the file isn't there, reads from XDG_CONFIG_DIR/phase.</p>","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":111,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L111"},"def":{"name":"user_settings","return_type":"self | ::Nil","visibility":"Public","body":"if @@disable_user_settings\n  return nil\nend\nif @@cached_user_settings\n  return @@cached_user_settings\nend\n\nif dir = ENV[\"PHASE_CONFIG_DIR\"]?\n  path = (Path[dir] / USER_CONFIG_FILENAME).expand(home: true)\n\n  if File.exists?(path)\n    return @@cached_user_settings = from_yaml(File.read(path))\n  end\nend\n\n{ENV[\"XDG_CONFIG_DIR\"]?, \"~/.config\"}.each do |dir|\n  if dir\n    path = ((Path[dir] / \"phase\") / USER_CONFIG_FILENAME).expand(home: true)\n\n    if File.exists?(path)\n      return @@cached_user_settings = from_yaml(File.read(path))\n    end\n  end\nend\n\n\n\n\n@@disable_user_settings = true\nreturn nil\n"},"external_var":false}],"constructors":[{"html_id":"default:self-class-method","name":"default","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":140,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L140"},"def":{"name":"default","return_type":"self","visibility":"Public","body":"new(indent_width: 4, max_element_width: 15, omit_after: [10, 5], brackets: [{\"[\", \"]\"}], colors: [:red, :yellow, :blue], collapse_brackets_after: 5, integer_format: \"%d\", decimal_format: \"%.3g\")"},"external_var":false},{"html_id":"new(indent_width:Int32,max_element_width:Int32,omit_afterdisplay_limit:Array(Int32),brackets:Array(Tuple(String,String)),colors,collapse_brackets_aftercollapse_height:Int32,integer_format:String,decimal_format:String)-class-method","name":"new","abstract":false,"args":[{"name":"indent_width","external_name":"indent_width","restriction":"::Int32"},{"name":"max_element_width","external_name":"max_element_width","restriction":"::Int32"},{"name":"display_limit","external_name":"omit_after","restriction":"::Array(::Int32)"},{"name":"brackets","external_name":"brackets","restriction":"::Array(::Tuple(::String, ::String))"},{"name":"colors","external_name":"colors","restriction":""},{"name":"collapse_height","external_name":"collapse_brackets_after","restriction":"::Int32"},{"name":"integer_format","external_name":"integer_format","restriction":"::String"},{"name":"decimal_format","external_name":"decimal_format","restriction":"::String"}],"args_string":"(indent_width : Int32, max_element_width : Int32, omit_after display_limit : Array(Int32), brackets : Array(Tuple(String, String)), colors, collapse_brackets_after collapse_height : Int32, integer_format : String, decimal_format : String)","args_html":"(indent_width : Int32, max_element_width : Int32, omit_after display_limit : Array(Int32), brackets : Array(Tuple(String, String)), colors, collapse_brackets_after collapse_height : Int32, integer_format : String, decimal_format : String)","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":101,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L101"},"def":{"name":"new","args":[{"name":"indent_width","external_name":"indent_width","restriction":"::Int32"},{"name":"max_element_width","external_name":"max_element_width","restriction":"::Int32"},{"name":"display_limit","external_name":"omit_after","restriction":"::Array(::Int32)"},{"name":"brackets","external_name":"brackets","restriction":"::Array(::Tuple(::String, ::String))"},{"name":"colors","external_name":"colors","restriction":""},{"name":"collapse_height","external_name":"collapse_brackets_after","restriction":"::Int32"},{"name":"integer_format","external_name":"integer_format","restriction":"::String"},{"name":"decimal_format","external_name":"decimal_format","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(indent_width, max_element_width, display_limit, brackets, colors, collapse_height, integer_format, decimal_format)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false},{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":28,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L28"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"},"external_var":false},{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":97,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L97"},"def":{"name":"new","visibility":"Public","body":"(@@project_settings || user_settings) || default"},"external_var":false}],"instance_methods":[{"html_id":"brackets:Array(Tuple(String,String))-instance-method","name":"brackets","doc":"The formatter is capable of using different brackets for different structures - this may help disambiguate rows, columns, and higher dimensional arrays.\n\n```crystal\nnarr = NArray.build([2, 2, 2, 2]) { |_, idx| idx }\n\nsettings = MultiIndexable::Formatter::Settings.default\nsettings.brackets = [{\"<\", \">\"}, {\"begin\", \"end\"}]\n\nMultiIndexable::Formatter.print(narr, settings: settings)\n\n# Output (note how the 0th element in brackets was used for the innermost arrays)\n# begin\n#     <\n#         begin< 0,  1>,\n#              < 2,  3>end,\n#         \n#         begin< 4,  5>,\n#              < 6,  7>end\n#     >,\n#     <\n#         begin< 8,  9>,\n#              <10, 11>end,\n#         \n#         begin<12, 13>,\n#              <14, 15>end\n#     >\n# end\n```","summary":"<p>The formatter is capable of using different brackets for different structures - this may help disambiguate rows, columns, and higher dimensional arrays.</p>","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":78,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L78"},"def":{"name":"brackets","return_type":"Array(Tuple(String, String))","visibility":"Public","body":"@brackets"},"external_var":false},{"html_id":"brackets=(brackets:Array(Tuple(String,String)))-instance-method","name":"brackets=","doc":"The formatter is capable of using different brackets for different structures - this may help disambiguate rows, columns, and higher dimensional arrays.\n\n```crystal\nnarr = NArray.build([2, 2, 2, 2]) { |_, idx| idx }\n\nsettings = MultiIndexable::Formatter::Settings.default\nsettings.brackets = [{\"<\", \">\"}, {\"begin\", \"end\"}]\n\nMultiIndexable::Formatter.print(narr, settings: settings)\n\n# Output (note how the 0th element in brackets was used for the innermost arrays)\n# begin\n#     <\n#         begin< 0,  1>,\n#              < 2,  3>end,\n#         \n#         begin< 4,  5>,\n#              < 6,  7>end\n#     >,\n#     <\n#         begin< 8,  9>,\n#              <10, 11>end,\n#         \n#         begin<12, 13>,\n#              <14, 15>end\n#     >\n# end\n```","summary":"<p>The formatter is capable of using different brackets for different structures - this may help disambiguate rows, columns, and higher dimensional arrays.</p>","abstract":false,"args":[{"name":"brackets","external_name":"brackets","restriction":"Array(Tuple(String, String))"}],"args_string":"(brackets : Array(Tuple(String, String)))","args_html":"(brackets : Array(Tuple(String, String)))","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":78,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L78"},"def":{"name":"brackets=","args":[{"name":"brackets","external_name":"brackets","restriction":"Array(Tuple(String, String))"}],"visibility":"Public","body":"@brackets = brackets"},"external_var":false},{"html_id":"collapse_height:Int32-instance-method","name":"collapse_height","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":92,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L92"},"def":{"name":"collapse_height","return_type":"Int32","visibility":"Public","body":"@collapse_height"},"external_var":false},{"html_id":"collapse_height=(collapse_height:Int32)-instance-method","name":"collapse_height=","abstract":false,"args":[{"name":"collapse_height","external_name":"collapse_height","restriction":"Int32"}],"args_string":"(collapse_height : Int32)","args_html":"(collapse_height : Int32)","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":92,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L92"},"def":{"name":"collapse_height=","args":[{"name":"collapse_height","external_name":"collapse_height","restriction":"Int32"}],"visibility":"Public","body":"@collapse_height = collapse_height"},"external_var":false},{"html_id":"colors:Array(Colorize::ColorRGB|Symbol)-instance-method","name":"colors","doc":"The formatter output can be colorized according to its nesting level -\nthe brackets around sets of elements are colored with `colors[0]`, the\nbrackets around sets of rows are colored with `colors[1]`, and so on.\nNote that this array can be whatever length you want - the formatter\nwill restart the color cycle after reaching the end of the color array.\n\nFor a list of valid colors, see the `Colorize` module in the standard\nlibrary.","summary":"<p>The formatter output can be colorized according to its nesting level - the brackets around sets of elements are colored with <code>colors[0]</code>, the brackets around sets of rows are colored with <code>colors[1]</code>, and so on.</p>","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":89,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L89"},"def":{"name":"colors","return_type":"Array(Colorize::ColorRGB | Symbol)","visibility":"Public","body":"@colors"},"external_var":false},{"html_id":"colors=(colors:Array(Colorize::ColorRGB|Symbol))-instance-method","name":"colors=","doc":"The formatter output can be colorized according to its nesting level -\nthe brackets around sets of elements are colored with `colors[0]`, the\nbrackets around sets of rows are colored with `colors[1]`, and so on.\nNote that this array can be whatever length you want - the formatter\nwill restart the color cycle after reaching the end of the color array.\n\nFor a list of valid colors, see the `Colorize` module in the standard\nlibrary.","summary":"<p>The formatter output can be colorized according to its nesting level - the brackets around sets of elements are colored with <code>colors[0]</code>, the brackets around sets of rows are colored with <code>colors[1]</code>, and so on.</p>","abstract":false,"args":[{"name":"colors","external_name":"colors","restriction":"Array(Colorize::ColorRGB | Symbol)"}],"args_string":"(colors : Array(Colorize::ColorRGB | Symbol))","args_html":"(colors : Array(Colorize::ColorRGB | Symbol))","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":89,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L89"},"def":{"name":"colors=","args":[{"name":"colors","external_name":"colors","restriction":"Array(Colorize::ColorRGB | Symbol)"}],"visibility":"Public","body":"@colors = colors"},"external_var":false},{"html_id":"decimal_format:String-instance-method","name":"decimal_format","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":95,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L95"},"def":{"name":"decimal_format","return_type":"String","visibility":"Public","body":"@decimal_format"},"external_var":false},{"html_id":"decimal_format=(decimal_format:String)-instance-method","name":"decimal_format=","abstract":false,"args":[{"name":"decimal_format","external_name":"decimal_format","restriction":"String"}],"args_string":"(decimal_format : String)","args_html":"(decimal_format : String)","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":95,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L95"},"def":{"name":"decimal_format=","args":[{"name":"decimal_format","external_name":"decimal_format","restriction":"String"}],"visibility":"Public","body":"@decimal_format = decimal_format"},"external_var":false},{"html_id":"display_limit:Array(Int32)-instance-method","name":"display_limit","doc":"The maximum number of elements to display in a single row before truncating output.","summary":"<p>The maximum number of elements to display in a single row before truncating output.</p>","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":48,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L48"},"def":{"name":"display_limit","return_type":"Array(Int32)","visibility":"Public","body":"@display_limit"},"external_var":false},{"html_id":"display_limit=(display_limit:Array(Int32))-instance-method","name":"display_limit=","doc":"The maximum number of elements to display in a single row before truncating output.","summary":"<p>The maximum number of elements to display in a single row before truncating output.</p>","abstract":false,"args":[{"name":"display_limit","external_name":"display_limit","restriction":"Array(Int32)"}],"args_string":"(display_limit : Array(Int32))","args_html":"(display_limit : Array(Int32))","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":48,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L48"},"def":{"name":"display_limit=","args":[{"name":"display_limit","external_name":"display_limit","restriction":"Array(Int32)"}],"visibility":"Public","body":"@display_limit = display_limit"},"external_var":false},{"html_id":"indent_width:Int32-instance-method","name":"indent_width","doc":"Controls the number of spaces that will be used to produce each indentation.","summary":"<p>Controls the number of spaces that will be used to produce each indentation.</p>","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":38,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L38"},"def":{"name":"indent_width","return_type":"Int32","visibility":"Public","body":"@indent_width"},"external_var":false},{"html_id":"indent_width=(indent_width:Int32)-instance-method","name":"indent_width=","doc":"Controls the number of spaces that will be used to produce each indentation.","summary":"<p>Controls the number of spaces that will be used to produce each indentation.</p>","abstract":false,"args":[{"name":"indent_width","external_name":"indent_width","restriction":"Int32"}],"args_string":"(indent_width : Int32)","args_html":"(indent_width : Int32)","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":38,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L38"},"def":{"name":"indent_width=","args":[{"name":"indent_width","external_name":"indent_width","restriction":"Int32"}],"visibility":"Public","body":"@indent_width = indent_width"},"external_var":false},{"html_id":"integer_format:String-instance-method","name":"integer_format","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":94,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L94"},"def":{"name":"integer_format","return_type":"String","visibility":"Public","body":"@integer_format"},"external_var":false},{"html_id":"integer_format=(integer_format:String)-instance-method","name":"integer_format=","abstract":false,"args":[{"name":"integer_format","external_name":"integer_format","restriction":"String"}],"args_string":"(integer_format : String)","args_html":"(integer_format : String)","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":94,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L94"},"def":{"name":"integer_format=","args":[{"name":"integer_format","external_name":"integer_format","restriction":"String"}],"visibility":"Public","body":"@integer_format = integer_format"},"external_var":false},{"html_id":"max_element_width:Int32-instance-method","name":"max_element_width","doc":"Controls the maximum number of characters to display for each element.\nElements that stringify to something longer than this will be\ntruncated, and numbers that are too long will be put into scientific\nnotation to attempt to fit them into this length.","summary":"<p>Controls the maximum number of characters to display for each element.</p>","abstract":false,"location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":44,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L44"},"def":{"name":"max_element_width","return_type":"Int32","visibility":"Public","body":"@max_element_width"},"external_var":false},{"html_id":"max_element_width=(max_element_width:Int32)-instance-method","name":"max_element_width=","doc":"Controls the maximum number of characters to display for each element.\nElements that stringify to something longer than this will be\ntruncated, and numbers that are too long will be put into scientific\nnotation to attempt to fit them into this length.","summary":"<p>Controls the maximum number of characters to display for each element.</p>","abstract":false,"args":[{"name":"max_element_width","external_name":"max_element_width","restriction":"Int32"}],"args_string":"(max_element_width : Int32)","args_html":"(max_element_width : Int32)","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":44,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L44"},"def":{"name":"max_element_width=","args":[{"name":"max_element_width","external_name":"max_element_width","restriction":"Int32"}],"visibility":"Public","body":"@max_element_width = max_element_width"},"external_var":false}],"types":[{"html_id":"ph-core/Phase/MultiIndexable/Formatter/Settings/ColorConverter","path":"Phase/MultiIndexable/Formatter/Settings/ColorConverter.html","kind":"class","full_name":"Phase::MultiIndexable::Formatter::Settings::ColorConverter","name":"ColorConverter","abstract":false,"superclass":{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/multi_indexable/formatter/settings.cr","line_number":153,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L153"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"COLOR_MAP","name":"COLOR_MAP","value":"{\"default\" => :default, \"black\" => :black, \"red\" => :red, \"green\" => :green, \"yellow\" => :yellow, \"blue\" => :blue, \"magenta\" => :magenta, \"cyan\" => :cyan, \"light_gray\" => :light_gray, \"dark_gray\" => :dark_gray, \"light_red\" => :light_red, \"light_green\" => :light_green, \"light_yellow\" => :light_yellow, \"light_blue\" => :light_blue, \"light_magenta\" => :light_magenta, \"light_cyan\" => :light_cyan, \"white\" => :white}","doc":"NOTE: I tried generating this with macros, but nothing was\nas effective as just hardcoding it.","summary":"<p><span class=\"flag purple\">NOTE</span>  I tried generating this with macros, but nothing was as effective as just hardcoding it.</p>"}],"namespace":{"html_id":"ph-core/Phase/MultiIndexable/Formatter/Settings","kind":"class","full_name":"Phase::MultiIndexable::Formatter::Settings","name":"Settings"},"class_methods":[{"html_id":"from_yaml(ctx:YAML::ParseContext,node:YAML::Nodes::Node):Symbol|Colorize::ColorRGB-class-method","name":"from_yaml","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node) : Symbol | Colorize::ColorRGB","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node) : Symbol | Colorize::ColorRGB","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":174,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L174"},"def":{"name":"from_yaml","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"return_type":"Symbol | Colorize::ColorRGB","visibility":"Public","body":"if node.is_a?(YAML::Nodes::Scalar)\nelse\n  node.raise(\"Expected scalar, not #{node.kind}\")\n\n\n\n  return :yikes\nend\n\nif str = node.value\n  if sym = COLOR_MAP[str]?\n    return sym\n  else\n    if (rgb = str.hexbytes?) && (rgb.size == 3)\n      return Colorize::ColorRGB.new(rgb[0], rgb[1], rgb[2])\n    end\n  end\nend\n\nnode.raise(\"  Expected #{(COLOR_MAP.keys.map(&.inspect)).join(\", \")}, \\n  or an RGB hex string, not #{node.value.inspect}. \\n  #{if node.value.empty?\n  \"Recall that '#' starts a comment in YAML, and should be \\n            omitted from your color codes.\"\nend}\")\n\n\nreturn Colorize::ColorRGB.new(0, 0, 0)\n"},"external_var":false},{"html_id":"to_yaml(value:Symbol,yaml:YAML::Nodes::Builder)-class-method","name":"to_yaml","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Symbol"},{"name":"yaml","external_name":"yaml","restriction":"YAML::Nodes::Builder"}],"args_string":"(value : Symbol, yaml : YAML::Nodes::Builder)","args_html":"(value : Symbol, yaml : YAML::Nodes::Builder)","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":202,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L202"},"def":{"name":"to_yaml","args":[{"name":"value","external_name":"value","restriction":"Symbol"},{"name":"yaml","external_name":"yaml","restriction":"YAML::Nodes::Builder"}],"visibility":"Public","body":"yaml.scalar(value.to_s)"},"external_var":false},{"html_id":"to_yaml(v:Colorize::ColorRGB,yaml:YAML::Nodes::Builder)-class-method","name":"to_yaml","abstract":false,"args":[{"name":"v","external_name":"v","restriction":"Colorize::ColorRGB"},{"name":"yaml","external_name":"yaml","restriction":"YAML::Nodes::Builder"}],"args_string":"(v : Colorize::ColorRGB, yaml : YAML::Nodes::Builder)","args_html":"(v : Colorize::ColorRGB, yaml : YAML::Nodes::Builder)","location":{"filename":"src/multi_indexable/formatter/settings.cr","line_number":206,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/formatter/settings.cr#L206"},"def":{"name":"to_yaml","args":[{"name":"v","external_name":"v","restriction":"Colorize::ColorRGB"},{"name":"yaml","external_name":"yaml","restriction":"YAML::Nodes::Builder"}],"visibility":"Public","body":"yaml.scalar(\"##{Bytes[v.red, v.green, v.blue].hexdump.upcase}\")"},"external_var":false}]}]}]},{"html_id":"ph-core/Phase/MultiIndexable/TilingLexIterator","path":"Phase/MultiIndexable/TilingLexIterator.html","kind":"class","full_name":"Phase::MultiIndexable::TilingLexIterator(I)","name":"TilingLexIterator","abstract":false,"superclass":{"html_id":"ph-core/Phase/StrideIterator","kind":"class","full_name":"Phase::StrideIterator","name":"StrideIterator"},"ancestors":[{"html_id":"ph-core/Phase/StrideIterator","kind":"class","full_name":"Phase::StrideIterator","name":"StrideIterator"},{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/multi_indexable/tiling_lex_iterator.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/tiling_lex_iterator.cr#L5"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable(T)","name":"MultiIndexable"},"constructors":[{"html_id":"new(region:IndexRegion(I),smaller_shape)-class-method","name":"new","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion(I)"},{"name":"smaller_shape","external_name":"smaller_shape","restriction":""}],"args_string":"(region : IndexRegion(I), smaller_shape)","args_html":"(region : <a href=\"../../Phase/IndexRegion.html\">IndexRegion</a>(I), smaller_shape)","location":{"filename":"src/multi_indexable/tiling_lex_iterator.cr","line_number":17,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/tiling_lex_iterator.cr#L17"},"def":{"name":"new","args":[{"name":"region","external_name":"region","restriction":"IndexRegion(I)"},{"name":"smaller_shape","external_name":"smaller_shape","restriction":""}],"visibility":"Public","body":"new(region.@first, region.@step, region.@last, smaller_shape)"},"external_var":false},{"html_id":"new(region_literal,smaller_shape)-class-method","name":"new","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"smaller_shape","external_name":"smaller_shape","restriction":""}],"args_string":"(region_literal, smaller_shape)","args_html":"(region_literal, smaller_shape)","location":{"filename":"src/multi_indexable/tiling_lex_iterator.cr","line_number":21,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/tiling_lex_iterator.cr#L21"},"def":{"name":"new","args":[{"name":"region_literal","external_name":"region_literal","restriction":""},{"name":"smaller_shape","external_name":"smaller_shape","restriction":""}],"visibility":"Public","body":"idx_r = IndexRegion(typeof(smaller_shape.first)).new(region_literal)\n\nnew(idx_r, smaller_shape)\n"},"external_var":false}],"instance_methods":[{"html_id":"advance!:Array(I)|Stop-instance-method","name":"advance!","doc":"Advances the internal state of this `StrideIterator` and returns the new coord (or `Iterator::Stop` if iteration is finished).","summary":"<p>Advances the internal state of this <code><a href=\"../../Phase/StrideIterator.html\">StrideIterator</a></code> and returns the new coord (or <code>Iterator::Stop</code> if iteration is finished).</p>","abstract":false,"location":{"filename":"src/multi_indexable/tiling_lex_iterator.cr","line_number":27,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/tiling_lex_iterator.cr#L27"},"def":{"name":"advance!","return_type":"Array(I) | Stop","visibility":"Public","body":"(@coord.size - 1).downto(0) do |i|\n  if @coord[i] == @last[i]\n    @coord[i] = @first[i]\n    @smaller_coord[i] = @coord[i] % @smaller_shape[i]\n    if i == 0\n      return stop\n    end\n  else\n    __temp_145 = i\n    @coord[__temp_145] = @coord[__temp_145] + @step[i]\n    @smaller_coord[i] = @coord[i] % @smaller_shape[i]\n    break\n  end\nend\n\n@coord\n"},"external_var":false},{"html_id":"clone:self-instance-method","name":"clone","abstract":false,"location":{"filename":"src/multi_indexable/tiling_lex_iterator.cr","line_number":68,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/tiling_lex_iterator.cr#L68"},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"inst = ({{ @type }}).allocate\ninst.copy_from(self)\n"},"external_var":false},{"html_id":"global_to_tile(coord)-instance-method","name":"global_to_tile","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""}],"args_string":"(coord)","args_html":"(coord)","location":{"filename":"src/multi_indexable/tiling_lex_iterator.cr","line_number":51,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/tiling_lex_iterator.cr#L51"},"def":{"name":"global_to_tile","args":[{"name":"coord","external_name":"coord","restriction":""}],"visibility":"Public","body":"coord.map_with_index do |axis, idx|\n  axis % @smaller_shape[idx]\nend"},"external_var":false},{"html_id":"smaller_coord:Indexable(I)-instance-method","name":"smaller_coord","abstract":false,"location":{"filename":"src/multi_indexable/tiling_lex_iterator.cr","line_number":43,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/tiling_lex_iterator.cr#L43"},"def":{"name":"smaller_coord","return_type":"Indexable(I)","visibility":"Public","body":"@smaller_coord_wrapper"},"external_var":false},{"html_id":"wrap_coord(coord)-instance-method","name":"wrap_coord","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""}],"args_string":"(coord)","args_html":"(coord)","location":{"filename":"src/multi_indexable/tiling_lex_iterator.cr","line_number":47,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_indexable/tiling_lex_iterator.cr#L47"},"def":{"name":"wrap_coord","args":[{"name":"coord","external_name":"coord","restriction":""}],"visibility":"Public","body":"coord.map_with_index do |axis, idx|\n  axis % @smaller_shape[idx]\nend"},"external_var":false}]}]},{"html_id":"ph-core/Phase/MultiWritable","path":"Phase/MultiWritable.html","kind":"module","full_name":"Phase::MultiWritable(T)","name":"MultiWritable","abstract":false,"locations":[{"filename":"src/multi_writable.cr","line_number":2,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L2"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"ph-core/Phase/NArray","kind":"class","full_name":"Phase::NArray(T)","name":"NArray"},{"html_id":"ph-core/Phase/View","kind":"class","full_name":"Phase::View(S, R)","name":"View"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"instance_methods":[{"html_id":"[]=(region:Indexable|IndexRegion,value)-instance-method","name":"[]=","doc":"See `#set_chunk(region : Enumerable, value)`","summary":"<p>See <code><a href=\"../Phase/MultiWritable.html#set_chunk%28region_literal%3AIndexable%2Csrc%3AMultiIndexable%28T%29%29-instance-method\">#set_chunk(region : Enumerable, value)</a></code></p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"Indexable | IndexRegion"},{"name":"value","external_name":"value","restriction":""}],"args_string":"(region : Indexable | IndexRegion, value)","args_html":"(region : Indexable | <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>, value)","location":{"filename":"src/multi_writable.cr","line_number":82,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L82"},"def":{"name":"[]=","args":[{"name":"region","external_name":"region","restriction":"Indexable | IndexRegion"},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"set_chunk(region, value)"},"external_var":false},{"html_id":"[]=(bool_mask:MultiIndexable(Bool),value)-instance-method","name":"[]=","doc":"TODO: consider overriding these in NArray, may benefit from speedup?","summary":"<p><span class=\"flag orange\">TODO</span>  consider overriding these in NArray, may benefit from speedup?</p>","abstract":false,"args":[{"name":"bool_mask","external_name":"bool_mask","restriction":"MultiIndexable(Bool)"},{"name":"value","external_name":"value","restriction":""}],"args_string":"(bool_mask : MultiIndexable(Bool), value)","args_html":"(bool_mask : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(Bool), value)","location":{"filename":"src/multi_writable.cr","line_number":99,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L99"},"def":{"name":"[]=","args":[{"name":"bool_mask","external_name":"bool_mask","restriction":"MultiIndexable(Bool)"},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"set_mask(bool_mask, value)"},"external_var":false},{"html_id":"[]=(*args)-instance-method","name":"[]=","doc":"These two should go last","summary":"<p>These two should go last</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args)","args_html":"(*args)","location":{"filename":"src/multi_writable.cr","line_number":87,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L87"},"def":{"name":"[]=","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"visibility":"Public","body":"set_chunk(args[...-1].to_a, args.last)"},"external_var":false},{"html_id":"set_available(region:Indexable,value:T)-instance-method","name":"set_available","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"Indexable"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(region : Indexable, value : T)","args_html":"(region : Indexable, value : T)","location":{"filename":"src/multi_writable.cr","line_number":77,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L77"},"def":{"name":"set_available","args":[{"name":"region","external_name":"region","restriction":"Indexable"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"unsafe_set_chunk(IndexRegion.new(region, trim_to: shape))"},"external_var":false},{"html_id":"set_chunk(region_literal:Indexable,src:MultiIndexable(T))-instance-method","name":"set_chunk","doc":"NOTE: changed name from 'value' to 'src' - approve?\nCopies the elements from a MultiIndexable `src` into `region`.\nRaises an error if `region` is out-of-bounds for this `{{@type}}` or if the shape of `region` does not match `src.shape`","summary":"<p><span class=\"flag purple\">NOTE</span>  changed name from 'value' to 'src' - approve? Copies the elements from a MultiIndexable <code>src</code> into <code>region</code>.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable"},{"name":"src","external_name":"src","restriction":"MultiIndexable(T)"}],"args_string":"(region_literal : Indexable, src : MultiIndexable(T))","args_html":"(region_literal : Indexable, src : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T))","location":{"filename":"src/multi_writable.cr","line_number":60,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L60"},"def":{"name":"set_chunk","args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable"},{"name":"src","external_name":"src","restriction":"MultiIndexable(T)"}],"visibility":"Public","body":"idx_region = IndexRegion.new(region_literal, shape_internal)\n\nif !(ShapeUtil.compatible_shapes?(src.shape_internal, idx_region.shape))\n  raise(ShapeError.new(\"Cannot substitute #{typeof(src)}: the given #{typeof(src)} has shape #{src.shape_internal}, but region #{idx_region} has shape #{idx_region.shape}.\"))\nend\n\nunsafe_set_chunk(idx_region, src)\n"},"external_var":false},{"html_id":"set_chunk(region:Indexable|IndexRegion,value:T)-instance-method","name":"set_chunk","doc":"Sets each element in `region` to `value`.\nRaises an error if `region` is out-of-bounds for this `{{@type}}`.","summary":"<p>Sets each element in <code>region</code> to <code>value</code>.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"Indexable | IndexRegion"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(region : Indexable | IndexRegion, value : T)","args_html":"(region : Indexable | <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>, value : T)","location":{"filename":"src/multi_writable.cr","line_number":72,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L72"},"def":{"name":"set_chunk","args":[{"name":"region","external_name":"region","restriction":"Indexable | IndexRegion"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"idx_r = IndexRegion.new(region, shape_internal)\nunsafe_set_chunk(idx_r, value)\n"},"external_var":false},{"html_id":"set_element(coord:Indexable,value:T)-instance-method","name":"set_element","doc":"Sets the element specified by `coord` to `value`.\nRaises an error if `coord` is out-of-bounds for this `{{@type}}`.","summary":"<p>Sets the element specified by <code>coord</code> to <code>value</code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Indexable"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(coord : Indexable, value : T)","args_html":"(coord : Indexable, value : T)","location":{"filename":"src/multi_writable.cr","line_number":53,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L53"},"def":{"name":"set_element","args":[{"name":"coord","external_name":"coord","restriction":"Indexable"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"unsafe_set_element(CoordUtil.canonicalize_coord(coord, shape_internal), value)"},"external_var":false},{"html_id":"set_mask(bool_mask,src:MultiIndexable(T))-instance-method","name":"set_mask","abstract":false,"args":[{"name":"bool_mask","external_name":"bool_mask","restriction":""},{"name":"src","external_name":"src","restriction":"MultiIndexable(T)"}],"args_string":"(bool_mask, src : MultiIndexable(T))","args_html":"(bool_mask, src : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T))","location":{"filename":"src/multi_writable.cr","line_number":103,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L103"},"def":{"name":"set_mask","args":[{"name":"bool_mask","external_name":"bool_mask","restriction":""},{"name":"src","external_name":"src","restriction":"MultiIndexable(T)"}],"visibility":"Public","body":"if src.shape != shape_internal\n  raise(ShapeError.new(\"Cannot perform masking: source shape #{src.shape} does not match array shape #{shape_internal}.\"))\nend\nset_mask(bool_mask) do |coord|\n  (src.unsafe_fetch_element(coord)).as(T)\nend\n"},"external_var":false},{"html_id":"set_mask(bool_mask,value)-instance-method","name":"set_mask","abstract":false,"args":[{"name":"bool_mask","external_name":"bool_mask","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(bool_mask, value)","args_html":"(bool_mask, value)","location":{"filename":"src/multi_writable.cr","line_number":110,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L110"},"def":{"name":"set_mask","args":[{"name":"bool_mask","external_name":"bool_mask","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"set_mask(bool_mask) do\n  value\nend"},"external_var":false},{"html_id":"set_mask(bool_mask:MultiIndexable(Bool),&)-instance-method","name":"set_mask","abstract":false,"args":[{"name":"bool_mask","external_name":"bool_mask","restriction":"MultiIndexable(Bool)"}],"args_string":"(bool_mask : MultiIndexable(Bool), &)","args_html":"(bool_mask : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(Bool), &)","location":{"filename":"src/multi_writable.cr","line_number":114,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L114"},"def":{"name":"set_mask","args":[{"name":"bool_mask","external_name":"bool_mask","restriction":"MultiIndexable(Bool)"}],"yields":1,"block_arity":1,"visibility":"Public","body":"if bool_mask.shape != shape_internal\n  raise(ShapeError.new(\"Cannot perform masking: mask shape #{bool_mask.shape} does not match array shape #{shape_internal}.\"))\nend\nbool_mask.each_with_coord do |bool_val, coord|\n  if bool_val\n    unsafe_set_element(coord, yield coord)\n  end\nend\n"},"external_var":false},{"html_id":"shape:Shape-instance-method","name":"shape","abstract":false,"location":{"filename":"src/multi_writable.cr","line_number":27,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L27"},"def":{"name":"shape","return_type":"Shape","visibility":"Public","body":"shape_internal.clone"},"external_var":false},{"html_id":"size-instance-method","name":"size","abstract":false,"location":{"filename":"src/multi_writable.cr","line_number":18,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L18"},"def":{"name":"size","visibility":"Public","body":"shape = shape_internal\nif shape.size == 0\n  0\nelse\n  shape.product\nend\n"},"external_var":false},{"html_id":"unsafe_set_chunk(region:IndexRegion,src:MultiIndexable(T))-instance-method","name":"unsafe_set_chunk","doc":"Copies the elements from a MultiIndexable `src` into `region`, assuming that `region` is in canonical form and in-bounds for this `{{@type}}`\nand the shape of `region` matches the shape of `src`.\nFor full specification of canonical form see `RegionHelpers` documentation. TODO: make this actually happen","summary":"<p>Copies the elements from a MultiIndexable <code>src</code> into <code>region</code>, assuming that <code>region</code> is in canonical form and in-bounds for this <code>{{@type}}</code> and the shape of <code>region</code> matches the shape of <code>src</code>.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"src","external_name":"src","restriction":"MultiIndexable(T)"}],"args_string":"(region : IndexRegion, src : MultiIndexable(T))","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>, src : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T))","location":{"filename":"src/multi_writable.cr","line_number":34,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L34"},"def":{"name":"unsafe_set_chunk","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"src","external_name":"src","restriction":"MultiIndexable(T)"}],"visibility":"Public","body":"absolute_iter = region.each\nsrc_iter = src.each\n\nsrc_iter.each do |src_el|\n  unsafe_set_element(absolute_iter.unsafe_next, src_el)\nend\n"},"external_var":false},{"html_id":"unsafe_set_chunk(region:IndexRegion,value:T)-instance-method","name":"unsafe_set_chunk","doc":"Sets each element in `region` to `value`, assuming that `region` is in canonical form and in-bounds for this `{{@type}}`\nFor full specification of canonical form see `RegionHelpers` documentation. TODO: make this actually happen","summary":"<p>Sets each element in <code>region</code> to <code>value</code>, assuming that <code>region</code> is in canonical form and in-bounds for this <code>{{@type}}</code> For full specification of canonical form see <code>RegionHelpers</code> documentation.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(region : IndexRegion, value : T)","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>, value : T)","location":{"filename":"src/multi_writable.cr","line_number":45,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L45"},"def":{"name":"unsafe_set_chunk","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"region.each do |coord|\n  unsafe_set_element(coord, value)\nend"},"external_var":false},{"html_id":"unsafe_set_element(coord:Coord,value:T)-instance-method","name":"unsafe_set_element","doc":"Given a coordinate representing some location in the {{@type}} and a value, store the value at that coordinate.\nAssumes that the coordinate is in-bounds for this {{@type}}.","summary":"<p>Given a coordinate representing some location in the {{@type}} and a value, store the value at that coordinate.</p>","abstract":true,"args":[{"name":"coord","external_name":"coord","restriction":"Coord"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(coord : Coord, value : T)","args_html":"(coord : <a href=\"../Phase/Coord.html\">Coord</a>, value : T)","location":{"filename":"src/multi_writable.cr","line_number":16,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/multi_writable.cr#L16"},"def":{"name":"unsafe_set_element","args":[{"name":"coord","external_name":"coord","restriction":"Coord"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":""},"external_var":false}]},{"html_id":"ph-core/Phase/NArray","path":"Phase/NArray.html","kind":"class","full_name":"Phase::NArray(T)","name":"NArray","abstract":false,"superclass":{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ph-core/Phase/Buffered","kind":"module","full_name":"Phase::Buffered","name":"Buffered"},{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"},{"html_id":"ph-core/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Phase/MultiWritable","kind":"module","full_name":"Phase::MultiWritable","name":"MultiWritable"},{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"},{"html_id":"ph-core/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/n_array.cr","line_number":13,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L13"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Phase/Buffered","kind":"module","full_name":"Phase::Buffered","name":"Buffered"},{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"},{"html_id":"ph-core/Phase/MultiWritable","kind":"module","full_name":"Phase::MultiWritable","name":"MultiWritable"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"An `{{@type}}` is a multidimensional array for any arbitrary type.\nIt is the most general implementation of Abstract{{@type}}, and as a result\nonly implements primitive data operations (construction, data reading,\ndata writing, and region sampling / slicing).\n","summary":"<p>An <code>{{@type}}</code> is a multidimensional array for any arbitrary type.</p>","class_methods":[{"html_id":"[](*contents)-class-method","name":"[]","doc":"NArray[1, 2, 3] == NArray.new([1, 2, 3])\nNArray[[1, 2, 3]] == NArray.new([[1, 2, 3]])","summary":"<p>NArray[1, 2, 3] == NArray.new([1, 2, 3]) NArray[[1, 2, 3]] == NArray.new([[1, 2, 3]])</p>","abstract":false,"args":[{"name":"contents","external_name":"contents","restriction":""}],"args_string":"(*contents)","args_html":"(*contents)","location":{"filename":"src/n_array.cr","line_number":157,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L157"},"def":{"name":"[]","args":[{"name":"contents","external_name":"contents","restriction":""}],"splat_index":0,"visibility":"Public","body":"new(contents)"},"external_var":false},{"html_id":"build(shape:Enumerable,&block:ReadonlyWrapper(Array(Int32),Int32),Int32->T)-class-method","name":"build","doc":"Constructs an `{{@type}}` using a user-provided *shape* (see `shape`) and a callback.\nThe provided callback should map a multidimensional index, *coord*, (and an optional packed\nindex) to the value you wish to store at that position.\nFor example, to create the 2x2 identity matrix:\n```\nPhase::{{@type}}.build([2, 2]) do |coord|\n  if coord[0] == coord[1]\n    1\n  else\n    0\n  end\nend\n```\nWhich will create:\n```text\n[[1, 0, 0],\n  0, 1, 0],\n  0, 0, 1]]\n```\nThe buffer index allows you to easily index elements in lexicographic order.\nFor example:\n```\n{{@type}}.build([5, 1]) { |coord, index| index }\n```\nWill create:\n```text\n[[0],\n [1],\n [2],\n [3],\n [4]]\n```","summary":"<p>Constructs an <code>{{@type}}</code> using a user-provided <em>shape</em> (see <code>shape</code>) and a callback.</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"Enumerable"}],"args_string":"(shape : Enumerable, &block : ReadonlyWrapper(Array(Int32), Int32), Int32 -> T)","args_html":"(shape : Enumerable, &block : ReadonlyWrapper(Array(Int32), Int32), Int32 -> T)","location":{"filename":"src/n_array.cr","line_number":103,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L103"},"def":{"name":"build","args":[{"name":"shape","external_name":"shape","restriction":"Enumerable"}],"yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(ReadonlyWrapper(Array(Int32), Int32), Int32 -> T)"},"visibility":"Public","body":"coord_iter = Indexed::LexIterator.cover(shape.to_a)\n({{ @type }}).new(shape) do\n  yield *(coord_iter.unsafe_next_with_index)\nend\n"},"external_var":false},{"html_id":"build(*shape:Int,&block:ReadonlyWrapper(Array(Int32),Int32),Int32->T)-class-method","name":"build","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"Int"}],"args_string":"(*shape : Int, &block : ReadonlyWrapper(Array(Int32), Int32), Int32 -> T)","args_html":"(*shape : Int, &block : ReadonlyWrapper(Array(Int32), Int32), Int32 -> T)","location":{"filename":"src/n_array.cr","line_number":110,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L110"},"def":{"name":"build","args":[{"name":"shape","external_name":"shape","restriction":"Int"}],"splat_index":0,"yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(ReadonlyWrapper(Array(Int32), Int32), Int32 -> T)"},"visibility":"Public","body":"build(shape, &block)"},"external_var":false},{"html_id":"common_container(*objects)-class-method","name":"common_container","doc":"Given a list of `{{@type}}`s, returns the smallest shape array in which any one of those `{{@type}}s` can be contained.\nTODO: Example","summary":"<p>Given a list of <code>{{@type}}</code>s, returns the smallest shape array in which any one of those <code>{{@type}}s</code> can be contained.</p>","abstract":false,"args":[{"name":"objects","external_name":"objects","restriction":""}],"args_string":"(*objects)","args_html":"(*objects)","location":{"filename":"src/n_array.cr","line_number":490,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L490"},"def":{"name":"common_container","args":[{"name":"objects","external_name":"objects","restriction":""}],"splat_index":0,"visibility":"Public","body":"shapes = objects.to_a.map do |x|\n  x.shape\nend\nmax_dimension = (shapes.map(&.size)).max\ncontainer = (0...max_dimension).map do |dim_idx|\n  sizes_in_dim = shapes.map do |shape|\n    shape[dim_idx]?\n  end\n  sizes_in_dim.compact.max\nend\ncontainer\n"},"external_var":false},{"html_id":"compatible?(*narrs:MultiIndexable,axis=-1):Bool-class-method","name":"compatible?","doc":"Checks that the shape of this and other match in every dimension\n(except `axis`, if it is specified)","summary":"<p>Checks that the shape of this and other match in every dimension (except <code>axis</code>, if it is specified)</p>","abstract":false,"args":[{"name":"narrs","external_name":"narrs","restriction":"MultiIndexable"},{"name":"axis","default_value":"-1","external_name":"axis","restriction":""}],"args_string":"(*narrs : MultiIndexable, axis = -1) : Bool","args_html":"(*narrs : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>, axis = <span class=\"n\">-1</span>) : Bool","location":{"filename":"src/n_array.cr","line_number":513,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L513"},"def":{"name":"compatible?","args":[{"name":"narrs","external_name":"narrs","restriction":"MultiIndexable"},{"name":"axis","default_value":"-1","external_name":"axis","restriction":""}],"splat_index":0,"return_type":"Bool","visibility":"Public","body":"first = narrs.to_a.pop\nfirst.compatible?(narrs, axis: axis)\n"},"external_var":false},{"html_id":"concatenate(*narrs:MultiIndexable(T),axis=0):NArray(T)-class-method","name":"concatenate","abstract":false,"args":[{"name":"narrs","external_name":"narrs","restriction":"MultiIndexable(T)"},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"args_string":"(*narrs : MultiIndexable(T), axis = 0) : NArray(T)","args_html":"(*narrs : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T), axis = <span class=\"n\">0</span>) : <a href=\"../Phase/NArray.html\">NArray</a>(T)","location":{"filename":"src/n_array.cr","line_number":558,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L558"},"def":{"name":"concatenate","args":[{"name":"narrs","external_name":"narrs","restriction":"MultiIndexable(T)"},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"splat_index":0,"return_type":"NArray(T)","visibility":"Public","body":"self.new(*(self.concatenate_to_slice(*narrs, axis: axis)))"},"external_var":false},{"html_id":"fill(shape,value:T)-class-method","name":"fill","doc":"Fills an `{{@type}}` of given shape with a specified value.\nFor example, to create a zero vector:\n```\n{{@type}}.fill([3, 1], 0)\n```\nWill produce\n```text\n[[0],\n [0],\n [0]]\n```\nNote that this method makes no effort to duplicate *value*, so this should only be used\nfor `Struct`s. If you want to populate an {{@type}} with `Object`s, see `new(shape, &block)`.","summary":"<p>Fills an <code>{{@type}}</code> of given shape with a specified value.</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":""},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(shape, value : T)","args_html":"(shape, value : T)","location":{"filename":"src/n_array.cr","line_number":174,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L174"},"def":{"name":"fill","args":[{"name":"shape","external_name":"shape","restriction":""},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"({{ @type }}).new(shape) do\n  value\nend"},"external_var":false},{"html_id":"of_buffer(shape:Array(Int32),buffer:Slice(T))-class-method","name":"of_buffer","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"Array(Int32)"},{"name":"buffer","external_name":"buffer","restriction":"Slice(T)"}],"args_string":"(shape : Array(Int32), buffer : Slice(T))","args_html":"(shape : Array(Int32), buffer : Slice(T))","location":{"filename":"src/n_array.cr","line_number":66,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L66"},"def":{"name":"of_buffer","args":[{"name":"shape","external_name":"shape","restriction":"Array(Int32)"},{"name":"buffer","external_name":"buffer","restriction":"Slice(T)"}],"visibility":"Public","body":"NArray.ensure_valid(shape, buffer)\nnew(shape.dup, buffer)\n"},"external_var":false},{"html_id":"tile(narr:MultiIndexable(T),counts:Enumerable)-class-method","name":"tile","abstract":false,"args":[{"name":"narr","external_name":"narr","restriction":"MultiIndexable(T)"},{"name":"counts","external_name":"counts","restriction":"Enumerable"}],"args_string":"(narr : MultiIndexable(T), counts : Enumerable)","args_html":"(narr : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T), counts : Enumerable)","location":{"filename":"src/n_array.cr","line_number":179,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L179"},"def":{"name":"tile","args":[{"name":"narr","external_name":"narr","restriction":"MultiIndexable(T)"},{"name":"counts","external_name":"counts","restriction":"Enumerable"}],"visibility":"Public","body":"shape = narr.shape.map_with_index do |axis, idx|\n  axis * counts[idx]\nend\n\niter = (TilingLexIterator.new(IndexRegion.cover(shape), narr.shape)).each\n\nbuild(shape) do\n  iter.next\n  narr.get(iter.smaller_coord)\nend\n"},"external_var":false},{"html_id":"wrap(*objects)-class-method","name":"wrap","doc":"creates an {{@type}}-type vector from a tuple of scalars.","summary":"<p>creates an {{@type}}-type vector from a tuple of scalars.</p>","abstract":false,"args":[{"name":"objects","external_name":"objects","restriction":""}],"args_string":"(*objects)","args_html":"(*objects)","location":{"filename":"src/n_array.cr","line_number":278,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L278"},"def":{"name":"wrap","args":[{"name":"objects","external_name":"objects","restriction":""}],"splat_index":0,"visibility":"Public","body":"NArray.new(objects.to_a)"},"external_var":false}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/n_array.cr","line_number":706,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L706"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"if node.is_a?(YAML::Nodes::Mapping)\n  ctx.read_alias(node, self) do |obj|\n    return obj\n  end\n\n  shape = nil\n  elements = nil\n\n  (node.nodes.each_with_index.step(2)).each do |child, idx|\n    if child.is_a?(YAML::Nodes::Scalar)\n      case child.value\n      when \"shape\"\n        shape = Array(Int32).new(ctx, node.nodes[idx + 1])\n      when \"elements\"\n        elements_node = node.nodes[idx + 1]\n        if elements_node.is_a?(YAML::Nodes::Sequence)\n          {% if true %}\n                elements = Array({{ @type.type_vars[0] }}).new(ctx, elements_node)\n                {% end %}\n        else\n          raise(YAML::Error.new(\"Could not read NArray from YAML: Expected sequence, found #{elements_node.class}\"))\n        end\n      end\n    else\n      raise(YAML::Error.new(\"Could not read NArray from YAML: Did not expect nested elements\"))\n    end\n  end\n\n  if shape.nil? || elements.nil?\n  else\n    if elements.size == shape.product\n      elements = Slice.new(elements.to_unsafe, elements.size)\n      ret = new(shape, elements)\n      ctx.record_anchor(node, ret)\n      return ret\n    else\n      raise(YAML::Error.new(\"Could not read NArray from YAML: wrong number of elements for shape #{shape}\"))\n    end\n  end\n\n  raise(YAML::Error.new(\"Could not read NArray from YAML: 'shape' and/or 'elements' were missing.\"))\nelse\n  raise(YAML::Error.new(\"Could not read NArray from YAML: Expected mapping, found #{node.class}\"))\nend"},"external_var":false},{"html_id":"new(data:Enumerable)-class-method","name":"new","doc":"Creates an `{{@type}}` from a nested array with uniform dimensions.\nFor example:\n```\n{{@type}}.new([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n```\nWould create the 3x3 identity matrix of type `{{@type}}(Int32)`.\n\nThis constructor will figure out the types of the scalars at the\nbottom of the nested array at compile time, which allows mixing\ndatatypes effortlessly.\nFor example, to create a matrix with 0.5 on the diagonals:\n```\n{{@type}}.new([[0.5, 0, 0], [0, 0.5, 0], [0, 0, 0.5]])\n```\nThis may seem trivial, but note that the `0.5`s are implicit\n`Float32` literals, whereas the `0`s are implicit `Int32` literals.\nSo, the type returned by that example will actually be an `{{@type}}(Float32 | Int32)`.\nThis also works for more disorganized examples:\n```\n{{@type}}.new([[\"We can mix types\", 2, :do], [\"C\", 0.0, \"l stuff.\"]])\n```\nThe above line will create an `{{@type}}(String | Int32 | Symbol | Float32)`.\n\nWhen a nested array with non-uniform dimensions is passed, this method will\nraise a `DimensionError`.\nFor example:\n```\n{{@type}}.new([[1], [1, 2]]) # => DimensionError\n```","summary":"<p>Creates an <code>{{@type}}</code> from a nested array with uniform dimensions.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Enumerable"}],"args_string":"(data : Enumerable)","args_html":"(data : Enumerable)","location":{"filename":"src/n_array.cr","line_number":143,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L143"},"def":{"name":"new","args":[{"name":"data","external_name":"data","restriction":"Enumerable"}],"visibility":"Public","body":"nested_array = data.to_a\nshape = measure_nested_array(nested_array)\nflattened = nested_array.flatten\n\n\nbuffer = Slice.new(flattened.to_unsafe, flattened.size)\n\nNArray.ensure_valid(shape, buffer)\nnew(shape, buffer)\n"},"external_var":false},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/n_array.cr","line_number":655,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L655"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"{% if true %}\n        shape = [] of Int32\n        elements = [] of {{ @type.type_vars[0] }}\n\n        found_shape = false\n        found_elements = false\n\n        pull.read_object do |key, key_loc|\n          case key\n          when \"shape\"\n            found_shape = true\n            pull.read_array do\n              shape << pull.read?(Int32).not_nil!\n            end\n          when \"elements\"\n            pull.read_array do\n              found_elements = true\n              elements << {{ @type.type_vars[0] }}.new(pull)\n            end\n          end\n        end\n\n        if found_shape && found_elements\n          if shape.product == elements.size\n            buffer = Slice.new(elements.to_unsafe, elements.size)\n            return new(shape, buffer)\n          else\n            raise JSON::Error.new(\"Could not read NArray from YAML: wrong number of elements for shape #{shape}\")\n          end\n        else\n          raise JSON::Error.new(\"Could not read NArray from YAML: 'shape' and/or 'elements' were missing.\")\n        end\n        {% end %}"},"external_var":false},{"html_id":"wrap(*objects:AbstractNArray(T),pad=false):NArray-class-method","name":"wrap","doc":"Adds a dimension at highest level, where each \"row\" is an input {{@type}}.\nIf pad is false, then throw error if shapes of objects do not match;\notherwise, pad subarrays along each axis to match whichever is largest in that axis","summary":"<p>Adds a dimension at highest level, where each &quot;row&quot; is an input {{@type}}.</p>","abstract":false,"args":[{"name":"objects","external_name":"objects","restriction":"AbstractNArray(T)"},{"name":"pad","default_value":"false","external_name":"pad","restriction":""}],"args_string":"(*objects : AbstractNArray(T), pad = false) : NArray","args_html":"(*objects : AbstractNArray(T), pad = <span class=\"n\">false</span>) : <a href=\"../Phase/NArray.html\">NArray</a>","location":{"filename":"src/n_array.cr","line_number":256,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L256"},"def":{"name":"wrap","args":[{"name":"objects","external_name":"objects","restriction":"AbstractNArray(T)"},{"name":"pad","default_value":"false","external_name":"pad","restriction":""}],"splat_index":0,"return_type":"NArray","visibility":"Public","body":"shapes = objects.to_a.map do |x|\n  x.shape\nend\nif pad\n  container = common_container(*objects)\n\n  raise(NotImplementedError.new(\"As of this time, {{@type}}.wrap() cannot pad arrays for you. Come back after reshaping has been implemented, or get off the couch and go do it yourself.\"))\nelse\n  container = shapes[0]\n\n  if shapes.any? do |shape|\n    shape != container\n  end\n    raise(DimensionError.new(\"Cannot wrap these arrays: shapes do not match. Pass argument pad:true if you want to reshape arrays as necessary.\"))\n  end\nend\ncontainer.insert(0, objects.size)\n\n\ncombined_buffer = objects.reduce([] of T) do |memo, i|\n  memo.concat(i.buffer.to_a)\nend\n\nNArray(T).new(container) do |i|\n  combined_buffer[i]\nend\n"},"external_var":false}],"instance_methods":[{"html_id":"<<(other:self):self-instance-method","name":"<<","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : self","args_html":"(other : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/n_array.cr","line_number":518,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L518"},"def":{"name":"<<","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"self","visibility":"Public","body":"push(other)"},"external_var":false},{"html_id":"==(other:NArray):Bool-instance-method","name":"==","doc":"Checks for elementwise equality between `self` and *other*.","summary":"<p>Checks for elementwise equality between <code>self</code> and <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"NArray"}],"args_string":"(other : NArray) : Bool","args_html":"(other : <a href=\"../Phase/NArray.html\">NArray</a>) : Bool","location":{"filename":"src/n_array.cr","line_number":339,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L339"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"NArray"}],"return_type":"Bool","visibility":"Public","body":"equals?(other) do |x, y|\n  x == y\nend"},"external_var":false},{"html_id":"[]=(bool_mask:NArray(Bool),value:T)-instance-method","name":"[]=","doc":"replaces all values in a boolean mask with a given value","summary":"<p>replaces all values in a boolean mask with a given value</p>","abstract":false,"args":[{"name":"bool_mask","external_name":"bool_mask","restriction":"NArray(Bool)"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(bool_mask : NArray(Bool), value : T)","args_html":"(bool_mask : <a href=\"../Phase/NArray.html\">NArray</a>(Bool), value : T)","location":{"filename":"src/n_array.cr","line_number":409,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L409"},"def":{"name":"[]=","args":[{"name":"bool_mask","external_name":"bool_mask","restriction":"NArray(Bool)"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"if bool_mask.shape != @shape\n  raise(DimensionError.new(\"Cannot perform masking: mask shape does not match array shape.\"))\nend\n\nbool_mask.buffer.each_with_index do |bool_val, idx|\n  if bool_val\n    @buffer[idx] = value\n  end\nend\n"},"external_var":false},{"html_id":"buffer:Slice(T)-instance-method","name":"buffer","doc":"Stores the elements of an `{{@type}}` in lexicographic (row-major) order.","summary":"<p>Stores the elements of an <code>{{@type}}</code> in lexicographic (row-major) order.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":19,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L19"},"def":{"name":"buffer","return_type":"Slice(T)","visibility":"Public","body":"@buffer"},"external_var":false},{"html_id":"clone:self-instance-method","name":"clone","doc":"Creates a deep copy of this {{@type}};\nAllocates a new buffer of the same shape, and calls #clone on every item in the buffer.","summary":"<p>Creates a deep copy of this {{@type}}; Allocates a new buffer of the same shape, and calls #clone on every item in the buffer.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":292,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L292"},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"({{ @type }}).new(@shape, @buffer.clone)"},"external_var":false},{"html_id":"compatible?(*others:MultiIndexable,axis=-1):Bool-instance-method","name":"compatible?","doc":"Checks that the shape of this and other match in every dimension\n(except `axis`, if it is specified)","summary":"<p>Checks that the shape of this and other match in every dimension (except <code>axis</code>, if it is specified)</p>","abstract":false,"args":[{"name":"others","external_name":"others","restriction":"MultiIndexable"},{"name":"axis","default_value":"-1","external_name":"axis","restriction":""}],"args_string":"(*others : MultiIndexable, axis = -1) : Bool","args_html":"(*others : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>, axis = <span class=\"n\">-1</span>) : Bool","location":{"filename":"src/n_array.cr","line_number":502,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L502"},"def":{"name":"compatible?","args":[{"name":"others","external_name":"others","restriction":"MultiIndexable"},{"name":"axis","default_value":"-1","external_name":"axis","restriction":""}],"splat_index":0,"return_type":"Bool","visibility":"Public","body":"shape.each_with_index do |dim, idx|\n  others.each do |narr|\n    if (dim != narr.shape[idx]) && (idx != axis)\n      return false\n    end\n  end\nend\ntrue\n"},"external_var":false},{"html_id":"concatenate(*others,axis=0):self-instance-method","name":"concatenate","abstract":false,"args":[{"name":"others","external_name":"others","restriction":""},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"args_string":"(*others, axis = 0) : self","args_html":"(*others, axis = <span class=\"n\">0</span>) : <span class=\"k\">self</span>","location":{"filename":"src/n_array.cr","line_number":548,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L548"},"def":{"name":"concatenate","args":[{"name":"others","external_name":"others","restriction":""},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"splat_index":0,"return_type":"self","visibility":"Public","body":"NArray.new(*(NArray(T).concatenate_to_slice(self, *others, axis: axis)))"},"external_var":false},{"html_id":"concatenate!(*others,axis=0):self-instance-method","name":"concatenate!","abstract":false,"args":[{"name":"others","external_name":"others","restriction":""},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"args_string":"(*others, axis = 0) : self","args_html":"(*others, axis = <span class=\"n\">0</span>) : <span class=\"k\">self</span>","location":{"filename":"src/n_array.cr","line_number":552,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L552"},"def":{"name":"concatenate!","args":[{"name":"others","external_name":"others","restriction":""},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"splat_index":0,"return_type":"self","visibility":"Public","body":"@shape, @buffer = NArray(T).concatenate_to_slice(self, *others, axis: axis)\n@axis_strides = Buffered.axis_strides(@shape)\nself\n"},"external_var":false},{"html_id":"dup:self-instance-method","name":"dup","doc":"Creates a shallow copy of this {{@type}};\nAllocates a new buffer of the same shape, and duplicates every item in the buffer.","summary":"<p>Creates a shallow copy of this {{@type}}; Allocates a new buffer of the same shape, and duplicates every item in the buffer.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":298,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L298"},"def":{"name":"dup","return_type":"self","visibility":"Public","body":"({{ @type }}).new(@shape, @buffer.dup)"},"external_var":false},{"html_id":"each-instance-method","name":"each","doc":"The default \"each\" with no iterator type passed is lexicographic.\nFor other orders, default to MultiIndexable's implementation.","summary":"<p>The default &quot;each&quot; with no iterator type passed is lexicographic.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":425,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L425"},"def":{"name":"each","visibility":"Public","body":"@buffer.each"},"external_var":false},{"html_id":"each_coord-instance-method","name":"each_coord","doc":"Returns an iterator that will yield each coordinate of `self` in lexicographic (row-major) order.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\niter = narr.each_coord\niter.next # => [0, 0]\niter.next # => [0, 1]\niter.next # => [0, 2]\niter.next # => [1, 0]\niter.next # => [1, 1]\niter.next # => [1, 2]\niter.next # => Iterator::Stop\n```","summary":"<p>Returns an iterator that will yield each coordinate of <code>self</code> in lexicographic (row-major) order.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":433,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L433"},"def":{"name":"each_coord","visibility":"Public","body":"Indexed::LexIterator.cover(shape_internal)"},"external_var":false},{"html_id":"each_with_coord(iter:IndexedStrideIterator(I))forallI-instance-method","name":"each_with_coord","abstract":false,"args":[{"name":"iter","external_name":"iter","restriction":"IndexedStrideIterator(I)"}],"args_string":"(iter : IndexedStrideIterator(I)) forall I","args_html":"(iter : IndexedStrideIterator(I)) forall I","location":{"filename":"src/n_array.cr","line_number":437,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L437"},"def":{"name":"each_with_coord","args":[{"name":"iter","external_name":"iter","restriction":"IndexedStrideIterator(I)"}],"visibility":"Public","body":"Indexed::ElemAndCoordIterator.new(self, iter)"},"external_var":false},{"html_id":"each_with_index(&block:T,Int32->)-instance-method","name":"each_with_index","doc":"Iterates over the collection, yielding both the elements and their index.\n\n```\n[\"Alice\", \"Bob\"].each_with_index do |user, i|\n  puts \"User ##{i}: #{user}\"\nend\n```\n\nPrints:\n\n```text\nUser # 0: Alice\nUser # 1: Bob\n```\n\nAccepts an optional *offset* parameter, which tells it to start counting\nfrom there. So, a more human friendly version of the previous snippet would be:\n\n```\n[\"Alice\", \"Bob\"].each_with_index(1) do |user, i|\n  puts \"User ##{i}: #{user}\"\nend\n```\n\nWhich would print:\n\n```text\nUser # 1: Alice\nUser # 2: Bob\n```","summary":"<p>Iterates over the collection, yielding both the elements and their index.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":441,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L441"},"def":{"name":"each_with_index","yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(T, Int32 ->)"},"visibility":"Public","body":"@buffer.each_with_index do |elem, idx|\n  yield elem, idx\nend"},"external_var":false},{"html_id":"fast_each-instance-method","name":"fast_each","doc":"Returns an Iterator over the elements in this `MultiIndexable` that will iterate in the fastest order possible.\nFor most implementations, it is very likely that `#each` will be just as fast.\nHowever, certain implementations of `MultiIndexable` may have substantial\nperformance differences. As a rule of thumb, this method is only worth using\nif the `MultiIndexable` you call it on explicitly mentions that you should.\n\n```crystal\nNArray[1, 2, 3].fast_each.each do |el|\n  # ...\nend\n```","summary":"<p>Returns an Iterator over the elements in this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> that will iterate in the fastest order possible.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":429,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L429"},"def":{"name":"fast_each","visibility":"Public","body":"@buffer.each"},"external_var":false},{"html_id":"fit(new_shape,*,align:Hash(Int32,NArray::Alignment|Int32))-instance-method","name":"fit","doc":"This version requires you are only <= on each axis; cannot pad","summary":"<p>This version requires you are only &lt;= on each axis; cannot pad</p>","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"align","external_name":"align","restriction":"Hash(Int32, NArray::Alignment | Int32)"}],"args_string":"(new_shape, *, align : Hash(Int32, NArray::Alignment | Int32))","args_html":"(new_shape, *, align : Hash(Int32, NArray::Alignment | Int32))","location":{"filename":"src/n_array.cr","line_number":205,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L205"},"def":{"name":"fit","args":[{"name":"new_shape","external_name":"new_shape","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"align","external_name":"align","restriction":"Hash(Int32, NArray::Alignment | Int32)"}],"splat_index":1,"visibility":"Public","body":"@shape.each_with_index do |size, idx|\n  if size > new_shape[idx]\n  end\nend\n\n\nraise(\"Can't fit array: provided shape is larger that shape of self. Provide a `pad_with` argument if padding is desired.\")\n\n\n\nreturn self.unsafe_fetch_chunk(region)\n"},"external_var":false},{"html_id":"fit(new_shape,*,align:Hash(Int32,NArray::Alignment|Int32)|Nil=nil,pad_withvalue=nil)-instance-method","name":"fit","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"align","default_value":"nil","external_name":"align","restriction":"Hash(Int32, NArray::Alignment | Int32) | ::Nil"},{"name":"value","default_value":"nil","external_name":"pad_with","restriction":""}],"args_string":"(new_shape, *, align : Hash(Int32, NArray::Alignment | Int32) | Nil = nil, pad_with value = nil)","args_html":"(new_shape, *, align : Hash(Int32, NArray::Alignment | Int32) | Nil = <span class=\"n\">nil</span>, pad_with value = <span class=\"n\">nil</span>)","location":{"filename":"src/n_array.cr","line_number":222,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L222"},"def":{"name":"fit","args":[{"name":"new_shape","external_name":"new_shape","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"align","default_value":"nil","external_name":"align","restriction":"Hash(Int32, NArray::Alignment | Int32) | ::Nil"},{"name":"value","default_value":"nil","external_name":"pad_with","restriction":""}],"splat_index":1,"visibility":"Public","body":"if new_shape.size != @shape.size\n  raise(\"Cannot fit a #{@shape.size} dimensional {{@type}} into a #{new_shape.size} dimensional shape. Consider calling `reshape` if you wish to change dimensionality.\")\nend"},"external_var":false},{"html_id":"fit!-instance-method","name":"fit!","abstract":false,"location":{"filename":"src/n_array.cr","line_number":232,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L232"},"def":{"name":"fit!","visibility":"Public","body":""},"external_var":false},{"html_id":"flatten:self-instance-method","name":"flatten","abstract":false,"location":{"filename":"src/n_array.cr","line_number":324,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L324"},"def":{"name":"flatten","return_type":"self","visibility":"Public","body":"reshape(@buffer.size)"},"external_var":false},{"html_id":"map(&block:T->U)forallU-instance-method","name":"map","doc":"Returns a `MultiIndexable` with the results of running the block against each element of `self`.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\nres = narr.map { |el| el.to_s } # => NArray[[\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"]]\n```","summary":"<p>Returns a <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> with the results of running the block against each element of <code>self</code>.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":447,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L447"},"def":{"name":"map","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> U)"},"visibility":"Public","body":"map_with_index do |elem|\n  yield elem\nend"},"external_var":false},{"html_id":"map!(&block:T->T):self-instance-method","name":"map!","doc":"TODO docs, test","summary":"<p><span class=\"flag orange\">TODO</span>  docs, test</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":466,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L466"},"def":{"name":"map!","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> T)"},"return_type":"self","visibility":"Public","body":"map_with_index! do |elem|\n  yield elem\nend\nself\n"},"external_var":false},{"html_id":"map_with_coord(&block:T,Indexable(Int32),Int32->U)forallU-instance-method","name":"map_with_coord","doc":"Returns a `MultiIndexable` with the results of running the block against each element and coordinate comprising `self`.\n\n```crystal\nnarr = NArray[[1, 2, 3], [4, 5, 6]]\nnarr.map_with_coord do |el, coord|\n  el + coord.sum\nend # => NArray[[1, 3, 5], [5, 7, 9]]\n```","summary":"<p>Returns a <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> with the results of running the block against each element and coordinate comprising <code>self</code>.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":460,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L460"},"def":{"name":"map_with_coord","yields":3,"block_arity":3,"block_arg":{"name":"block","external_name":"block","restriction":"(T, Indexable(Int32), Int32 -> U)"},"visibility":"Public","body":"NArray(U).build(@shape) do |coord, idx|\n  yield @buffer[idx], coord, idx\nend"},"external_var":false},{"html_id":"map_with_coord!(&block:T,Indexable(Int32),Int32->T):self-instance-method","name":"map_with_coord!","doc":"TODO docs\nDISCUSS is this good behaviour?","summary":"<p><span class=\"flag orange\">TODO</span>  docs DISCUSS is this good behaviour?</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":480,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L480"},"def":{"name":"map_with_coord!","yields":3,"block_arity":3,"block_arg":{"name":"block","external_name":"block","restriction":"(T, Indexable(Int32), Int32 -> T)"},"return_type":"self","visibility":"Public","body":"iter = LexIterator.cover(shape_internal)\n@buffer.map_with_index! do |el, idx|\n  yield el, iter.unsafe_next, idx\nend\nself\n"},"external_var":false},{"html_id":"map_with_index(&block:T,Int32->U)forallU-instance-method","name":"map_with_index","doc":"Like `map`, but the block gets passed both the element and its index.\n\n```\n[\"Alice\", \"Bob\"].map_with_index { |name, i| \"User ##{i}: #{name}\" }\n# => [\"User #0: Alice\", \"User #1: Bob\"]\n```\n\nAccepts an optional *offset* parameter, which tells it to start counting\nfrom there.","summary":"<p>Like <code><a href=\"../Phase/NArray.html#map%28%26block%3AT-%3EU%29forallU-instance-method\">#map</a></code>, but the block gets passed both the element and its index.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":453,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L453"},"def":{"name":"map_with_index","yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(T, Int32 -> U)"},"visibility":"Public","body":"new_buffer = @buffer.map_with_index do |elem, idx|\n  yield elem, idx\nend\nNArray.new(@shape.clone, new_buffer)\n"},"external_var":false},{"html_id":"map_with_index!(&block:T,Int32->T):self-instance-method","name":"map_with_index!","abstract":false,"location":{"filename":"src/n_array.cr","line_number":473,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L473"},"def":{"name":"map_with_index!","yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(T, Int32 -> T)"},"return_type":"self","visibility":"Public","body":"@buffer.map_with_index! do |elem, idx|\n  yield elem, idx\nend\nself\n"},"external_var":false},{"html_id":"pad(value,amounts:Hash(Int32,Tuple(Int32,Int32)))-instance-method","name":"pad","doc":"core\npad(0, {0 => {2, 2}, 1 => {3, 4}, -1 => {0, 5}})","summary":"<p>core pad(0, {0 =&gt; {2, 2}, 1 =&gt; {3, 4}, -1 =&gt; {0, 5}})</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""},{"name":"amounts","external_name":"amounts","restriction":"Hash(Int32, Tuple(Int32, Int32))"}],"args_string":"(value, amounts : Hash(Int32, Tuple(Int32, Int32)))","args_html":"(value, amounts : Hash(Int32, Tuple(Int32, Int32)))","location":{"filename":"src/n_array.cr","line_number":196,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L196"},"def":{"name":"pad","args":[{"name":"value","external_name":"value","restriction":""},{"name":"amounts","external_name":"amounts","restriction":"Hash(Int32, Tuple(Int32, Int32))"}],"visibility":"Public","body":"fit()"},"external_var":false},{"html_id":"pad!-instance-method","name":"pad!","abstract":false,"location":{"filename":"src/n_array.cr","line_number":229,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L229"},"def":{"name":"pad!","visibility":"Public","body":""},"external_var":false},{"html_id":"push(*others:self,axis=0):self-instance-method","name":"push","doc":"optimization for pushing other NArrays on axis 0, in-place\nTODO: axis = 0 should not be a user modifiable parameter and never should have been","summary":"<p>optimization for pushing other NArrays on axis 0, in-place TODO: axis = 0 should not be a user modifiable parameter and never should have been</p>","abstract":false,"args":[{"name":"others","external_name":"others","restriction":"self"},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"args_string":"(*others : self, axis = 0) : self","args_html":"(*others : <span class=\"k\">self</span>, axis = <span class=\"n\">0</span>) : <span class=\"k\">self</span>","location":{"filename":"src/n_array.cr","line_number":524,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L524"},"def":{"name":"push","args":[{"name":"others","external_name":"others","restriction":"self"},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"splat_index":0,"return_type":"self","visibility":"Public","body":"if !(compatible?(*others, axis: axis))\n  raise(DimensionError.new(\"Cannot concatenate these arrays along axis #{axis}: shapes do not match\"))\nend\n\nconcat_size = size + others.sum(&.size)\n\nfull_ptr = Pointer(T).malloc(concat_size)\nfull_ptr.move_from(@buffer.to_unsafe, size)\nptr = full_ptr + size\n\n\n\n\n\n\nothers.each do |narr|\n  ptr.move_from(narr.buffer.to_unsafe, narr.size)\n  ptr = ptr + narr.size\nend\n\n@shape[0] = @shape[0] + others.sum do |narr|\n  narr.shape[0]\nend\n@buffer = Slice.new(full_ptr, concat_size)\nself\n"},"external_var":false},{"html_id":"reshape(new_shape:Enumerable)-instance-method","name":"reshape","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":"Enumerable"}],"args_string":"(new_shape : Enumerable)","args_html":"(new_shape : Enumerable)","location":{"filename":"src/n_array.cr","line_number":328,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L328"},"def":{"name":"reshape","args":[{"name":"new_shape","external_name":"new_shape","restriction":"Enumerable"}],"visibility":"Public","body":"shape_arr = new_shape.to_a\nNArray.ensure_valid(shape_arr, @buffer)\n({{ @type }}).new(shape_arr, @buffer)\n"},"external_var":false},{"html_id":"reshape(*splat)-instance-method","name":"reshape","abstract":false,"args":[{"name":"splat","external_name":"splat","restriction":""}],"args_string":"(*splat)","args_html":"(*splat)","location":{"filename":"src/n_array.cr","line_number":334,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L334"},"def":{"name":"reshape","args":[{"name":"splat","external_name":"splat","restriction":""}],"splat_index":0,"visibility":"Public","body":"reshape(splat)"},"external_var":false},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the total number of elements in this `MultiIndexable`.\nThis quantity is always equal to `shape.product`. However, this method is\nalmost always more performant than computing the product directly.\n\n```crystal\nNArray.new(['a', 'b', 'c']).size # => 3\nNArray.new([[0, 1], [1, 0]]).size # => 4\n```","summary":"<p>Returns the total number of elements in this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"location":{"filename":"src/n_array.cr","line_number":286,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L286"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@buffer.size"},"external_var":false},{"html_id":"to_json(json:JSON::Builder)-instance-method","name":"to_json","abstract":false,"args":[{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"args_string":"(json : JSON::Builder)","args_html":"(json : JSON::Builder)","location":{"filename":"src/n_array.cr","line_number":643,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L643"},"def":{"name":"to_json","args":[{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"visibility":"Public","body":"json.object do\n  json.scalar(\"shape\")\n  @shape.to_json(json)\n\n  json.scalar(\"elements\")\n  json.array do\n    @buffer.each(&.to_json(json))\n  end\nend"},"external_var":false},{"html_id":"to_yaml(yaml:YAML::Nodes::Builder)-instance-method","name":"to_yaml","abstract":false,"args":[{"name":"yaml","external_name":"yaml","restriction":"YAML::Nodes::Builder"}],"args_string":"(yaml : YAML::Nodes::Builder)","args_html":"(yaml : YAML::Nodes::Builder)","location":{"filename":"src/n_array.cr","line_number":691,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L691"},"def":{"name":"to_yaml","args":[{"name":"yaml","external_name":"yaml","restriction":"YAML::Nodes::Builder"}],"visibility":"Public","body":"yaml.mapping do\n  yaml.scalar(\"shape\")\n  yaml.sequence(style: YAML::SequenceStyle::FLOW) do\n    @shape.each(&.to_yaml(yaml))\n  end\n\n  yaml.scalar(\"elements\")\n  style = T < Number::Primitive ? YAML::SequenceStyle::FLOW : YAML::SequenceStyle::BLOCK\n  yaml.sequence(style: style) do\n    @buffer.each(&.to_yaml(yaml))\n  end\nend"},"external_var":false},{"html_id":"unsafe_fetch_chunk(region:IndexRegion)-instance-method","name":"unsafe_fetch_chunk","doc":"Copies the elements in `region` to a new `{{@type}}`, assuming that `region` is in canonical form and in-bounds for this `{{@type}}`.\nFor full specification of canonical form see `IndexRegion` documentation.","summary":"<p>Copies the elements in <code>region</code> to a new <code>{{@type}}</code>, assuming that <code>region</code> is in canonical form and in-bounds for this <code>{{@type}}</code>.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"args_string":"(region : IndexRegion)","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>)","location":{"filename":"src/n_array.cr","line_number":350,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L350"},"def":{"name":"unsafe_fetch_chunk","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"visibility":"Public","body":"iter = Indexed::ElemAndCoordIterator.new(self, Indexed::LexIterator.new(region, @shape))\n(typeof(self)).new(region.shape) do\n  iter.unsafe_next[0]\nend\n"},"external_var":false},{"html_id":"unsafe_fetch_element(coord):T-instance-method","name":"unsafe_fetch_element","doc":"Retrieves the element specified by `coord`, assuming that `coord` is in canonical form and in-bounds for this `{{@type}}`.\nFor full specification of canonical form see `IndexRegion` documentation.","summary":"<p>Retrieves the element specified by <code>coord</code>, assuming that <code>coord</code> is in canonical form and in-bounds for this <code>{{@type}}</code>.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""}],"args_string":"(coord) : T","args_html":"(coord) : T","location":{"filename":"src/n_array.cr","line_number":357,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L357"},"def":{"name":"unsafe_fetch_element","args":[{"name":"coord","external_name":"coord","restriction":""}],"return_type":"T","visibility":"Public","body":"@buffer.unsafe_fetch(Buffered.coord_to_index_fast(coord, @shape, @axis_strides))"},"external_var":false},{"html_id":"unsafe_set_chunk(region:IndexRegion,src:MultiIndexable(T))-instance-method","name":"unsafe_set_chunk","doc":"Copies the elements from a MultiIndexable `src` into `region`, assuming that `region` is in canonical form and in-bounds for this `{{type}}`\nand the shape of `region` matches the shape of `src`.","summary":"<p>Copies the elements from a MultiIndexable <code>src</code> into <code>region</code>, assuming that <code>region</code> is in canonical form and in-bounds for this <code>{{type}}</code> and the shape of <code>region</code> matches the shape of <code>src</code>.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"src","external_name":"src","restriction":"MultiIndexable(T)"}],"args_string":"(region : IndexRegion, src : MultiIndexable(T))","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>, src : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>(T))","location":{"filename":"src/n_array.cr","line_number":386,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L386"},"def":{"name":"unsafe_set_chunk","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"src","external_name":"src","restriction":"MultiIndexable(T)"}],"visibility":"Public","body":"absolute_iter = Indexed::LexIterator.new(region, @shape)\nsrc_iter = src.each\n\nsrc_iter.each do |src_el|\n  absolute_iter.next\n  @buffer[absolute_iter.current_index] = src_el\nend\n"},"external_var":false},{"html_id":"unsafe_set_chunk(region:IndexRegion,value:T)-instance-method","name":"unsafe_set_chunk","doc":"Sets each element in `region` to `value`, assuming that `region` is in canonical form and in-bounds for this `{{type}}`","summary":"<p>Sets each element in <code>region</code> to <code>value</code>, assuming that <code>region</code> is in canonical form and in-bounds for this <code>{{type}}</code></p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(region : IndexRegion, value : T)","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>, value : T)","location":{"filename":"src/n_array.cr","line_number":397,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L397"},"def":{"name":"unsafe_set_chunk","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"iter = Indexed::LexIterator.new(region, @shape)\niter.each do\n  @buffer[iter.current_index] = value\nend\n"},"external_var":false},{"html_id":"unsafe_set_element(coord:Enumerable,value:T)-instance-method","name":"unsafe_set_element","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Enumerable"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(coord : Enumerable, value : T)","args_html":"(coord : Enumerable, value : T)","location":{"filename":"src/n_array.cr","line_number":404,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/n_array.cr#L404"},"def":{"name":"unsafe_set_element","args":[{"name":"coord","external_name":"coord","restriction":"Enumerable"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"@buffer[Buffered.coord_to_index_fast(coord, @shape, @axis_strides)] = value"},"external_var":false}]},{"html_id":"ph-core/Phase/OutputCoord","path":"Phase/OutputCoord.html","kind":"alias","full_name":"Phase::OutputCoord","name":"OutputCoord","abstract":false,"locations":[{"filename":"src/type_aliases.cr","line_number":13,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/type_aliases.cr#L13"}],"repository_name":"ph-core","program":false,"enum":false,"alias":true,"aliased":"Array(T)","aliased_html":"Array(T)","const":false,"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"}},{"html_id":"ph-core/Phase/ProcView","path":"Phase/ProcView.html","kind":"class","full_name":"Phase::ProcView(S, T, R)","name":"ProcView","abstract":false,"superclass":{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView","name":"ReadonlyView"},"ancestors":[{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView","name":"ReadonlyView"},{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"},{"html_id":"ph-core/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/proc_view.cr","line_number":2,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/proc_view.cr#L2"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"class_methods":[{"html_id":"of(src:S,proc:T->R):ProcView(S,T,R)forallT,R-class-method","name":"of","doc":"DOCUMENT","summary":"<p>DOCUMENT</p>","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"S"},{"name":"proc","external_name":"proc","restriction":"(T -> R)"}],"args_string":"(src : S, proc : T -> R) : ProcView(S, T, R) forall T, R","args_html":"(src : S, proc : T -> R) : <a href=\"../Phase/ProcView.html\">ProcView</a>(S, T, R) forall T, R","location":{"filename":"src/proc_view.cr","line_number":6,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/proc_view.cr#L6"},"def":{"name":"of","args":[{"name":"src","external_name":"src","restriction":"S"},{"name":"proc","external_name":"proc","restriction":"(T -> R)"}],"return_type":"ProcView(S, T, R)","visibility":"Public","body":"{% if true %}\n                {% if S < MultiIndexable(T) %}{% else %}\n                    {% raise(\"Error creating ProcView: proc input type does not match source element type.\") %}\n                {% end %}\n            {% end %}\n\ncase src\nwhen ReadonlyView\n  return src.process(proc)\nelse\n  return ProcView(S, T, R).new(src, src.shape, proc)\nend\n"},"external_var":false},{"html_id":"of(src:B,&block:T->R):ProcView(S,T,R)forallT,R-class-method","name":"of","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"B"}],"args_string":"(src : B, &block : T -> R) : ProcView(S, T, R) forall T, R","args_html":"(src : B, &block : T -> R) : <a href=\"../Phase/ProcView.html\">ProcView</a>(S, T, R) forall T, R","location":{"filename":"src/proc_view.cr","line_number":21,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/proc_view.cr#L21"},"def":{"name":"of","args":[{"name":"src","external_name":"src","restriction":"B"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> R)"},"return_type":"ProcView(S, T, R)","visibility":"Public","body":"self.of(src, block)"},"external_var":false}],"instance_methods":[{"html_id":"clone:self-instance-method","name":"clone","abstract":false,"location":{"filename":"src/proc_view.cr","line_number":28,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/proc_view.cr#L28"},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"new(@src, @shape.clone, @proc.clone, @transform.clone)"},"external_var":false},{"html_id":"process(new_proc:R->U):ProcView(S,T,U)forallU-instance-method","name":"process","abstract":false,"args":[{"name":"new_proc","external_name":"new_proc","restriction":"(R -> U)"}],"args_string":"(new_proc : R -> U) : ProcView(S, T, U) forall U","args_html":"(new_proc : R -> U) : <a href=\"../Phase/ProcView.html\">ProcView</a>(S, T, U) forall U","location":{"filename":"src/proc_view.cr","line_number":36,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/proc_view.cr#L36"},"def":{"name":"process","args":[{"name":"new_proc","external_name":"new_proc","restriction":"(R -> U)"}],"return_type":"ProcView(S, T, U)","visibility":"Public","body":"composition = Proc(T, U).new do |x|\n  new_proc.call(@proc.clone.call(x))\nend\nProcView(S, T, U).new(@src, @shape.clone, composition, @transform.clone)\n"},"external_var":false},{"html_id":"unsafe_fetch_element(coord):R-instance-method","name":"unsafe_fetch_element","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":""}],"args_string":"(coord) : R","args_html":"(coord) : R","location":{"filename":"src/proc_view.cr","line_number":32,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/proc_view.cr#L32"},"def":{"name":"unsafe_fetch_element","args":[{"name":"coord","external_name":"coord","restriction":""}],"return_type":"R","visibility":"Public","body":"@proc.call(@src.unsafe_fetch_element(@transform.apply(coord)))"},"external_var":false}]},{"html_id":"ph-core/Phase/RangeSyntax","path":"Phase/RangeSyntax.html","kind":"module","full_name":"Phase::RangeSyntax","name":"RangeSyntax","abstract":false,"locations":[{"filename":"src/range_syntax/range_syntax.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L4"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"ph-core/Phase/RangeSyntax","kind":"module","full_name":"Phase::RangeSyntax","name":"RangeSyntax"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"instance_methods":[{"html_id":"bounded?(range_literal:Int32)-instance-method","name":"bounded?","abstract":false,"args":[{"name":"range_literal","external_name":"range_literal","restriction":"Int32"}],"args_string":"(range_literal : Int32)","args_html":"(range_literal : Int32)","location":{"filename":"src/range_syntax/range_syntax.cr","line_number":19,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L19"},"def":{"name":"bounded?","args":[{"name":"range_literal","external_name":"range_literal","restriction":"Int32"}],"visibility":"Public","body":"true"},"external_var":false},{"html_id":"bounded?(range_literal)-instance-method","name":"bounded?","abstract":false,"args":[{"name":"range_literal","external_name":"range_literal","restriction":""}],"args_string":"(range_literal)","args_html":"(range_literal)","location":{"filename":"src/range_syntax/range_syntax.cr","line_number":23,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L23"},"def":{"name":"bounded?","args":[{"name":"range_literal","external_name":"range_literal","restriction":""}],"visibility":"Public","body":"vals = parse_range(range_literal)\nstep = vals[:step]\n\nif step.nil? || step >= 0\n  if vals[:last].nil?\n    return false\n  end\nelse\n  if vals[:first].nil?\n    return false\n  end\nend\ntrue\n"},"external_var":false},{"html_id":"canonicalize_range(range,bound:T):NamedTuple(first:T,step:Int32,last:T,size:T)forallT-instance-method","name":"canonicalize_range","doc":"canonicalize_range(range, bound)\ninfer_range(range, bound)\nall hte other stuff","summary":"<p>canonicalize_range(range, bound) infer_range(range, bound) all hte other stuff</p>","abstract":false,"args":[{"name":"range","external_name":"range","restriction":""},{"name":"bound","external_name":"bound","restriction":"T"}],"args_string":"(range, bound : T) : NamedTuple(first: T, step: Int32, last: T, size: T) forall T","args_html":"(range, bound : T) : NamedTuple(first: T, step: Int32, last: T, size: T) forall T","location":{"filename":"src/range_syntax/range_syntax.cr","line_number":145,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L145"},"def":{"name":"canonicalize_range","args":[{"name":"range","external_name":"range","restriction":""},{"name":"bound","external_name":"bound","restriction":"T"}],"return_type":"NamedTuple(first: T, step: Int32, last: T, size: T)","visibility":"Public","body":"r = infer_range(range, bound)\n\nif range_valid?(r[:first], r[:last], bound)\nelse\n  raise(IndexError.new(\"Could not canonicalize range: #{range} is not a sensible index range for axis of length #{bound}.\"))\nend\n\nr\n"},"external_var":false},{"html_id":"ensure_nonnegative(index:Int|Nil)-instance-method","name":"ensure_nonnegative","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int | ::Nil"}],"args_string":"(index : Int | Nil)","args_html":"(index : Int | Nil)","location":{"filename":"src/range_syntax/range_syntax.cr","line_number":71,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L71"},"def":{"name":"ensure_nonnegative","args":[{"name":"index","external_name":"index","restriction":"Int | ::Nil"}],"visibility":"Public","body":"if index.nil?\n  return\nend\nif index < 0\n  raise(IndexError.new(\"Negative indices have no meaning when a bounding shape is not provided.\"))\nend\n"},"external_var":false},{"html_id":"ensure_nonnegative(range_literal)-instance-method","name":"ensure_nonnegative","abstract":false,"args":[{"name":"range_literal","external_name":"range_literal","restriction":""}],"args_string":"(range_literal)","args_html":"(range_literal)","location":{"filename":"src/range_syntax/range_syntax.cr","line_number":78,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L78"},"def":{"name":"ensure_nonnegative","args":[{"name":"range_literal","external_name":"range_literal","restriction":""}],"visibility":"Public","body":"vals = parse_range(range_literal)\nensure_nonnegative(vals[:first])\nensure_nonnegative(vals[:last])\n"},"external_var":false},{"html_id":"get_size(first,last,step)-instance-method","name":"get_size","abstract":false,"args":[{"name":"first","external_name":"first","restriction":""},{"name":"last","external_name":"last","restriction":""},{"name":"step","external_name":"step","restriction":""}],"args_string":"(first, last, step)","args_html":"(first, last, step)","location":{"filename":"src/range_syntax/range_syntax.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L7"},"def":{"name":"get_size","args":[{"name":"first","external_name":"first","restriction":""},{"name":"last","external_name":"last","restriction":""},{"name":"step","external_name":"step","restriction":""}],"visibility":"Public","body":"if (last != first) && (step.sign != (last <=> first))\n  raise(IndexError.new(\"Could not get size of range - step direction disagrees with first and last.\"))\n  return 0\nelse\n  if last >= first\n    return ((last - first) // step) + 1\n  else\n    return ((first - last) // (-step)) + 1\n  end\nend"},"external_var":false},{"html_id":"infer_range(index:Int,bound:T)forallT-instance-method","name":"infer_range","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"bound","external_name":"bound","restriction":"T"}],"args_string":"(index : Int, bound : T) forall T","args_html":"(index : Int, bound : T) forall T","location":{"filename":"src/range_syntax/range_syntax.cr","line_number":84,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L84"},"def":{"name":"infer_range","args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"bound","external_name":"bound","restriction":"T"}],"visibility":"Public","body":"canonical = T.new(CoordUtil.canonicalize_index_unsafe(index, bound))\n{first: canonical, step: 1, last: canonical, size: T.new(1)}\n"},"external_var":false},{"html_id":"infer_range(range_literal,bound:T):NamedTuple(first:T,step:Int32,last:T,size:T)forallT-instance-method","name":"infer_range","abstract":false,"args":[{"name":"range_literal","external_name":"range_literal","restriction":""},{"name":"bound","external_name":"bound","restriction":"T"}],"args_string":"(range_literal, bound : T) : NamedTuple(first: T, step: Int32, last: T, size: T) forall T","args_html":"(range_literal, bound : T) : NamedTuple(first: T, step: Int32, last: T, size: T) forall T","location":{"filename":"src/range_syntax/range_syntax.cr","line_number":89,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L89"},"def":{"name":"infer_range","args":[{"name":"range_literal","external_name":"range_literal","restriction":""},{"name":"bound","external_name":"bound","restriction":"T"}],"return_type":"NamedTuple(first: T, step: Int32, last: T, size: T)","visibility":"Public","body":"vals = parse_range(range_literal)\nf = vals[:first]\nl = vals[:last]\nstep = vals[:step]\n\n\n\nif step.nil?\n  first = f.nil? ? T.zero : CoordUtil.canonicalize_index_unsafe(f, bound)\n  temp_last = l.nil? ? bound - 1 : CoordUtil.canonicalize_index_unsafe(l, bound)\n\n  step = (temp_last >= first) ? 1 : -1\nelse\n  first = f.nil? ? (step > 0 ? T.zero : bound - 1) : CoordUtil.canonicalize_index_unsafe(f, bound)\n  temp_last = l.nil? ? (step > 0 ? bound - 1 : T.zero) : CoordUtil.canonicalize_index_unsafe(l, bound)\nend\n\n\nif !l.nil? && vals[:exclusive]\n  if temp_last == first\n    return {first: T.zero, step: 0, last: T.zero, size: T.zero}\n  end\n  temp_last = temp_last - step.sign\nend\n\n\n\n\n\nif first < 0 || temp_last < 0\n  raise(IndexError.new(\"Invalid index: At least one endpoint of #{Range.new(f, l, vals[:exclusive])} is negative after canonicalization.\"))\nend\n\nbegin\n  first = T.new(first)\n\n\n  size = T.new(get_size(first, temp_last, step))\n  last = T.new(first + (step * (size - 1)))\n\n  {first: first, step: step.to_i32, last: last, size: size}\nrescue ex : IndexError\n  raise(IndexError.new(\"Could not canonicalize range: Conflict between implicit direction of #{Range.new(f, l, vals[:exclusive])} and provided step #{step}\"))\nend\n"},"external_var":false},{"html_id":"range_valid?(first,last,bound)-instance-method","name":"range_valid?","abstract":false,"args":[{"name":"first","external_name":"first","restriction":""},{"name":"last","external_name":"last","restriction":""},{"name":"bound","external_name":"bound","restriction":""}],"args_string":"(first, last, bound)","args_html":"(first, last, bound)","location":{"filename":"src/range_syntax/range_syntax.cr","line_number":138,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/range_syntax/range_syntax.cr#L138"},"def":{"name":"range_valid?","args":[{"name":"first","external_name":"first","restriction":""},{"name":"last","external_name":"last","restriction":""},{"name":"bound","external_name":"bound","restriction":""}],"visibility":"Public","body":"(last.in?(0...bound)) && (first.in?(0...bound))"},"external_var":false}]},{"html_id":"ph-core/Phase/ReadonlyView","path":"Phase/ReadonlyView.html","kind":"class","full_name":"Phase::ReadonlyView(S, R)","name":"ReadonlyView","abstract":false,"superclass":{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"},{"html_id":"ph-core/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/readonly_view.cr","line_number":2,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L2"},{"filename":"src/view_util/transforms.cr","line_number":2,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L2"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"}],"subclasses":[{"html_id":"ph-core/Phase/ProcView","kind":"class","full_name":"Phase::ProcView(S, T, R)","name":"ProcView"},{"html_id":"ph-core/Phase/View","kind":"class","full_name":"Phase::View(S, R)","name":"View"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"constructors":[{"html_id":"of(src:S,region=nil):self-class-method","name":"of","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"S"},{"name":"region","default_value":"nil","external_name":"region","restriction":""}],"args_string":"(src : S, region = nil) : self","args_html":"(src : S, region = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/readonly_view.cr","line_number":10,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L10"},"def":{"name":"of","args":[{"name":"src","external_name":"src","restriction":"S"},{"name":"region","default_value":"nil","external_name":"region","restriction":""}],"return_type":"self","visibility":"Public","body":"case src\nwhen ReadonlyView\n  return src.view(region)\nelse\n  new_view = ReadonlyView(S, typeof(src.sample)).new(src)\n  if region\n    new_view.restrict_to(region)\n  end\n  return new_view\nend"},"external_var":false}],"instance_methods":[{"html_id":"clone:self-instance-method","name":"clone","abstract":false,"location":{"filename":"src/readonly_view.cr","line_number":28,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L28"},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"(typeof(self)).new(@src, @shape.clone, @transform.clone)"},"external_var":false},{"html_id":"permute(order:Enumerable|Nil=nil):self-instance-method","name":"permute","abstract":false,"args":[{"name":"order","default_value":"nil","external_name":"order","restriction":"Enumerable | ::Nil"}],"args_string":"(order : Enumerable | Nil = nil) : self","args_html":"(order : Enumerable | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/readonly_view.cr","line_number":75,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L75"},"def":{"name":"permute","args":[{"name":"order","default_value":"nil","external_name":"order","restriction":"Enumerable | ::Nil"}],"return_type":"self","visibility":"Public","body":"clone.permute!(order)"},"external_var":false},{"html_id":"permute(*args)-instance-method","name":"permute","doc":"Tuple-accepting overload of `#\"permute\"`.","summary":"<p>Tuple-accepting overload of <code>#&quot;permute&quot;</code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args)","args_html":"(*args)","location":{"filename":"src/readonly_view.cr","line_number":79,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L79"},"def":{"name":"permute","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"visibility":"Public","body":"permute(args)"},"external_var":false},{"html_id":"permute!(order:Enumerable|Nil=nil):self-instance-method","name":"permute!","abstract":false,"args":[{"name":"order","default_value":"nil","external_name":"order","restriction":"Enumerable | ::Nil"}],"args_string":"(order : Enumerable | Nil = nil) : self","args_html":"(order : Enumerable | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/readonly_view.cr","line_number":64,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L64"},"def":{"name":"permute!","args":[{"name":"order","default_value":"nil","external_name":"order","restriction":"Enumerable | ::Nil"}],"return_type":"self","visibility":"Public","body":"if order && (bad_axis = order.find do |axis|\n  axis < 0 || axis >= @shape.size\nend)\n  raise(IndexError.new(\"Could not use pattern #{order} to permute: Axis #{bad_axis} is not present in a #{dimensions}-dimensional MultiIndexable\"))\nend\n\npt = PermuteTransform.new(order || self.dimensions)\n@shape = pt.permute(@shape)\n@transform.compose!(pt)\nself\n"},"external_var":false},{"html_id":"permute!(*args)-instance-method","name":"permute!","doc":"Tuple-accepting overload of `#\"permute!\"`.","summary":"<p>Tuple-accepting overload of <code>#&quot;permute!&quot;</code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args)","args_html":"(*args)","location":{"filename":"src/readonly_view.cr","line_number":79,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L79"},"def":{"name":"permute!","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"visibility":"Public","body":"permute!(args)"},"external_var":false},{"html_id":"process(new_proc:R->U):ProcView(S,R,U)forallU-instance-method","name":"process","abstract":false,"args":[{"name":"new_proc","external_name":"new_proc","restriction":"(R -> U)"}],"args_string":"(new_proc : R -> U) : ProcView(S, R, U) forall U","args_html":"(new_proc : R -> U) : <a href=\"../Phase/ProcView.html\">ProcView</a>(S, R, U) forall U","location":{"filename":"src/readonly_view.cr","line_number":111,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L111"},"def":{"name":"process","args":[{"name":"new_proc","external_name":"new_proc","restriction":"(R -> U)"}],"return_type":"ProcView(S, R, U)","visibility":"Public","body":"ProcView(S, R, U).new(@src, @shape.clone, new_proc, @transform.clone)"},"external_var":false},{"html_id":"process(&block:R->U):ProcView(S,R,U)forallU-instance-method","name":"process","abstract":false,"location":{"filename":"src/readonly_view.cr","line_number":115,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L115"},"def":{"name":"process","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(R -> U)"},"return_type":"ProcView(S, R, U)","visibility":"Public","body":"process(block)"},"external_var":false},{"html_id":"reshape(new_shape):self-instance-method","name":"reshape","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":""}],"args_string":"(new_shape) : self","args_html":"(new_shape) : <span class=\"k\">self</span>","location":{"filename":"src/readonly_view.cr","line_number":60,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L60"},"def":{"name":"reshape","args":[{"name":"new_shape","external_name":"new_shape","restriction":""}],"return_type":"self","visibility":"Public","body":"clone.reshape!(new_shape)"},"external_var":false},{"html_id":"reshape(*args)-instance-method","name":"reshape","doc":"Tuple-accepting overload of `#\"reshape\"`.","summary":"<p>Tuple-accepting overload of <code>#&quot;reshape&quot;</code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args)","args_html":"(*args)","location":{"filename":"src/readonly_view.cr","line_number":79,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L79"},"def":{"name":"reshape","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"visibility":"Public","body":"reshape(args)"},"external_var":false},{"html_id":"reshape!(new_shape:Array(Int32)):self-instance-method","name":"reshape!","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(::Int32)"}],"args_string":"(new_shape : Array(Int32)) : self","args_html":"(new_shape : Array(Int32)) : <span class=\"k\">self</span>","location":{"filename":"src/readonly_view.cr","line_number":50,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L50"},"def":{"name":"reshape!","args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(::Int32)"}],"return_type":"self","visibility":"Public","body":"if new_shape.product != @shape.product\n  raise(ShapeError.new(\"Cannot change shape from #{@shape.join('x')} (#{@shape.product} elements) to #{new_shape.join('x')} (#{new_shape.product} elements) because reshape cannot add or remove elements.\"))\nend\n\n@transform.compose!(ReshapeTransform.new(@shape, new_shape))\n@shape = new_shape\nself\n"},"external_var":false},{"html_id":"reshape!(*args)-instance-method","name":"reshape!","doc":"Tuple-accepting overload of `#\"reshape!\"`.","summary":"<p>Tuple-accepting overload of <code>#&quot;reshape!&quot;</code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args)","args_html":"(*args)","location":{"filename":"src/readonly_view.cr","line_number":79,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L79"},"def":{"name":"reshape!","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"visibility":"Public","body":"reshape!(args)"},"external_var":false},{"html_id":"reverse:self-instance-method","name":"reverse","abstract":false,"location":{"filename":"src/readonly_view.cr","line_number":93,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L93"},"def":{"name":"reverse","return_type":"self","visibility":"Public","body":"clone.reverse!"},"external_var":false},{"html_id":"reverse!:self-instance-method","name":"reverse!","abstract":false,"location":{"filename":"src/readonly_view.cr","line_number":88,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L88"},"def":{"name":"reverse!","return_type":"self","visibility":"Public","body":"@transform.compose!(ReverseTransform.new(@shape))\nself\n"},"external_var":false},{"html_id":"shape_internal:Array(Int32)-instance-method","name":"shape_internal","doc":"Implementors must use this to expose the shape of a `MultiIndexable`.\nThe returned `Shape` is allowed to be mutable, as callers of this method\nare trusted to never mutate the result. This allows for performance\noptimizations where cloning and wrapping are too costly.","summary":"<p>Implementors must use this to expose the shape of a <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"location":{"filename":"src/readonly_view.cr","line_number":32,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L32"},"def":{"name":"shape_internal","return_type":"Array(Int32)","visibility":"Public","body":"@shape"},"external_var":false},{"html_id":"to_narr:NArray-instance-method","name":"to_narr","doc":"Creates an `NArray` duplicate of this `MultiIndexable`.\n\n```crystal\n# not_an_narray : MultiIndexable\nnarr = not_an_narray.to_narr # => NArray\nnot_an_narray.equals?(narr) { |el_1, el_2| el_1 == el_2 } # => true\n```","summary":"<p>Creates an <code><a href=\"../Phase/NArray.html\">NArray</a></code> duplicate of this <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code>.</p>","abstract":false,"location":{"filename":"src/readonly_view.cr","line_number":119,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L119"},"def":{"name":"to_narr","return_type":"NArray","visibility":"Public","body":"iter = self.each\nNArray.build(@shape) do |coord, i|\n  unsafe_fetch_element(coord)\nend\n"},"external_var":false},{"html_id":"unsafe_fetch_chunk(region:IndexRegion):self-instance-method","name":"unsafe_fetch_chunk","doc":"Copies the elements described by *region* into a new `MultiIndexable` without performing any bounds checking.\nUnless you are sure that your *region* will fit inside of this\n`MultiIndexable`, you should opt to use `#get_chunk` instead.\n\nThis method may return any `MultiIndexable` - the default implementation\nwill return an `NArray`, however implementers of other `MultiIndexable`s\nare encouraged to override this method where it makes sense to do so.\n\nThis method's usage is identical to `#get_chunk(region : IndexRegion)`,\nbut it is slightly faster.","summary":"<p>Copies the elements described by <em>region</em> into a new <code><a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a></code> without performing any bounds checking.</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"args_string":"(region : IndexRegion) : self","args_html":"(region : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>) : <span class=\"k\">self</span>","location":{"filename":"src/readonly_view.cr","line_number":97,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L97"},"def":{"name":"unsafe_fetch_chunk","args":[{"name":"region","external_name":"region","restriction":"IndexRegion"}],"return_type":"self","visibility":"Public","body":"view(region)"},"external_var":false},{"html_id":"unsafe_fetch_element(coord:Indexable):R-instance-method","name":"unsafe_fetch_element","doc":"Returns the element at the provided *coord*, possibly mutating *coord*, without performing canonicalization or bounds-checking.\nThis method cannot be used with negative coordinates, and is not safe\nunless you are certain your coordinate is already canonicalized.","summary":"<p>Returns the element at the provided <em>coord</em>, possibly mutating <em>coord</em>, without performing canonicalization or bounds-checking.</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Indexable"}],"args_string":"(coord : Indexable) : R","args_html":"(coord : Indexable) : R","location":{"filename":"src/readonly_view.cr","line_number":101,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L101"},"def":{"name":"unsafe_fetch_element","args":[{"name":"coord","external_name":"coord","restriction":"Indexable"}],"return_type":"R","visibility":"Public","body":"(@src.unsafe_fetch_element(@transform.apply(coord.to_a))).as(R)"},"external_var":false},{"html_id":"view(region=nil):self-instance-method","name":"view","abstract":false,"args":[{"name":"region","default_value":"nil","external_name":"region","restriction":""}],"args_string":"(region = nil) : self","args_html":"(region = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/readonly_view.cr","line_number":36,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/readonly_view.cr#L36"},"def":{"name":"view","args":[{"name":"region","default_value":"nil","external_name":"region","restriction":""}],"return_type":"self","visibility":"Public","body":"new_view = clone\nif region\n  new_view.restrict_to(region)\nend\nnew_view\n"},"external_var":false}],"types":[{"html_id":"ph-core/Phase/ReadonlyView/ComposedTransform","path":"Phase/ReadonlyView/ComposedTransform.html","kind":"struct","full_name":"Phase::ReadonlyView::ComposedTransform","name":"ComposedTransform","abstract":false,"superclass":{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},"ancestors":[{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/view_util/transforms.cr","line_number":28,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L28"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView(S, R)","name":"ReadonlyView"},"doc":"probably done for now","summary":"<p>probably done for now</p>","class_methods":[{"html_id":"[](*transforms)-class-method","name":"[]","abstract":false,"args":[{"name":"transforms","external_name":"transforms","restriction":""}],"args_string":"(*transforms)","args_html":"(*transforms)","location":{"filename":"src/view_util/transforms.cr","line_number":37,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L37"},"def":{"name":"[]","args":[{"name":"transforms","external_name":"transforms","restriction":""}],"splat_index":0,"visibility":"Public","body":"new((transforms.map do |__arg0|\n  __arg0.as(CoordTransform)\nend).to_a)"},"external_var":false}],"constructors":[{"html_id":"new(transforms:Array(Phase::ReadonlyView::CoordTransform)=[]ofCoordTransform)-class-method","name":"new","abstract":false,"args":[{"name":"transforms","default_value":"[] of CoordTransform","external_name":"transforms","restriction":"::Array(::Phase::ReadonlyView::CoordTransform)"}],"args_string":"(transforms : Array(Phase::ReadonlyView::CoordTransform) = [] of CoordTransform)","args_html":"(transforms : Array(<a href=\"../../Phase/ReadonlyView/CoordTransform.html\">Phase::ReadonlyView::CoordTransform</a>) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">CoordTransform</span>)","location":{"filename":"src/view_util/transforms.cr","line_number":34,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L34"},"def":{"name":"new","args":[{"name":"transforms","default_value":"[] of CoordTransform","external_name":"transforms","restriction":"::Array(::Phase::ReadonlyView::CoordTransform)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(transforms)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"apply(coord:InputCoord(Int32)):ReadonlyWrapper(OutputCoord(Int32),Int32)-instance-method","name":"apply","doc":"must not mutate coord","summary":"<p>must not mutate coord</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"args_string":"(coord : InputCoord(Int32)) : ReadonlyWrapper(OutputCoord(Int32), Int32)","args_html":"(coord : <a href=\"../../Phase/InputCoord.html\">InputCoord</a>(Int32)) : ReadonlyWrapper(<a href=\"../../Phase/OutputCoord.html\">OutputCoord</a>(Int32), Int32)","location":{"filename":"src/view_util/transforms.cr","line_number":77,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L77"},"def":{"name":"apply","args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"return_type":"ReadonlyWrapper(OutputCoord(Int32), Int32)","visibility":"Public","body":"if @transforms.empty?\n  @id.apply(coord)\nelse\n  output = @transforms.reduce(coord) do |coord, trans|\n    trans.apply(coord)\n  end\n\n\n\n\n  output.as(ReadonlyWrapper(OutputCoord(Int32), Int32))\nend"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/view_util/transforms.cr","line_number":41,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L41"},"def":{"name":"clone","visibility":"Public","body":"ComposedTransform.new(@transforms.dup)"},"external_var":false},{"html_id":"compose(t:CoordTransform):ComposedTransform-instance-method","name":"compose","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"args_string":"(t : CoordTransform) : ComposedTransform","args_html":"(t : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>) : <a href=\"../../Phase/ReadonlyView/ComposedTransform.html\">ComposedTransform</a>","location":{"filename":"src/view_util/transforms.cr","line_number":73,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L73"},"def":{"name":"compose","args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"return_type":"ComposedTransform","visibility":"Public","body":"clone.compose!(t)"},"external_var":false},{"html_id":"compose!(t:ComposedTransform)-instance-method","name":"compose!","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"ComposedTransform"}],"args_string":"(t : ComposedTransform)","args_html":"(t : <a href=\"../../Phase/ReadonlyView/ComposedTransform.html\">ComposedTransform</a>)","location":{"filename":"src/view_util/transforms.cr","line_number":69,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L69"},"def":{"name":"compose!","args":[{"name":"t","external_name":"t","restriction":"ComposedTransform"}],"visibility":"Public","body":"@transforms = t.transforms + @transforms"},"external_var":false},{"html_id":"compose!(t:CoordTransform)-instance-method","name":"compose!","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"args_string":"(t : CoordTransform)","args_html":"(t : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>)","location":{"filename":"src/view_util/transforms.cr","line_number":46,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L46"},"def":{"name":"compose!","args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"visibility":"Public","body":"@transforms.unshift(t)"},"external_var":false},{"html_id":"transforms-instance-method","name":"transforms","doc":"TODO: see clone","summary":"<p><span class=\"flag orange\">TODO</span>  see clone</p>","abstract":false,"location":{"filename":"src/view_util/transforms.cr","line_number":94,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L94"},"def":{"name":"transforms","visibility":"Public","body":"@transforms.dup"},"external_var":false}]},{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","path":"Phase/ReadonlyView/CoordTransform.html","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform","abstract":true,"superclass":{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/view_util/transforms.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L4"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"ph-core/Phase/ReadonlyView/ComposedTransform","kind":"struct","full_name":"Phase::ReadonlyView::ComposedTransform","name":"ComposedTransform"},{"html_id":"ph-core/Phase/ReadonlyView/IdentityTransform","kind":"struct","full_name":"Phase::ReadonlyView::IdentityTransform","name":"IdentityTransform"},{"html_id":"ph-core/Phase/ReadonlyView/PermuteTransform","kind":"struct","full_name":"Phase::ReadonlyView::PermuteTransform","name":"PermuteTransform"},{"html_id":"ph-core/Phase/ReadonlyView/RegionTransform","kind":"struct","full_name":"Phase::ReadonlyView::RegionTransform","name":"RegionTransform"},{"html_id":"ph-core/Phase/ReadonlyView/ReshapeTransform","kind":"struct","full_name":"Phase::ReadonlyView::ReshapeTransform","name":"ReshapeTransform"},{"html_id":"ph-core/Phase/ReadonlyView/ReverseTransform","kind":"struct","full_name":"Phase::ReadonlyView::ReverseTransform","name":"ReverseTransform"}],"namespace":{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView(S, R)","name":"ReadonlyView"},"doc":"probably done","summary":"<p>probably done</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/view_util/transforms.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L4"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"apply(coord:InputCoord(Int32)):ReadonlyWrapper(OutputCoord(Int32),Int32)-instance-method","name":"apply","doc":"must not mutate coord","summary":"<p>must not mutate coord</p>","abstract":true,"args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"args_string":"(coord : InputCoord(Int32)) : ReadonlyWrapper(OutputCoord(Int32), Int32)","args_html":"(coord : <a href=\"../../Phase/InputCoord.html\">InputCoord</a>(Int32)) : ReadonlyWrapper(<a href=\"../../Phase/OutputCoord.html\">OutputCoord</a>(Int32), Int32)","location":{"filename":"src/view_util/transforms.cr","line_number":24,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L24"},"def":{"name":"apply","args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"return_type":"ReadonlyWrapper(OutputCoord(Int32), Int32)","visibility":"Public","body":""},"external_var":false},{"html_id":"commutes_with?(t:CoordTransform):Bool-instance-method","name":"commutes_with?","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"args_string":"(t : CoordTransform) : Bool","args_html":"(t : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>) : Bool","location":{"filename":"src/view_util/transforms.cr","line_number":15,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L15"},"def":{"name":"commutes_with?","args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"return_type":"Bool","visibility":"Public","body":"return commutes.any? do |type|\n  type == t.class\nend || t.commutes.any? do |type|\n  type == self.class\nend"},"external_var":false},{"html_id":"compose(t:CoordTransform):CoordTransform-instance-method","name":"compose","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"args_string":"(t : CoordTransform) : CoordTransform","args_html":"(t : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>) : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>","location":{"filename":"src/view_util/transforms.cr","line_number":7,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L7"},"def":{"name":"compose","args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"return_type":"CoordTransform","visibility":"Public","body":"return ComposedTransform[t, self]"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/view_util/transforms.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L4"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]},{"html_id":"ph-core/Phase/ReadonlyView/IdentityTransform","path":"Phase/ReadonlyView/IdentityTransform.html","kind":"struct","full_name":"Phase::ReadonlyView::IdentityTransform","name":"IdentityTransform","abstract":false,"superclass":{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},"ancestors":[{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/view_util/transforms.cr","line_number":104,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L104"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView(S, R)","name":"ReadonlyView"},"doc":"done","summary":"<p>done</p>","instance_methods":[{"html_id":"apply(coord:InputCoord(Int32)):ReadonlyWrapper(OutputCoord(Int32),Int32)-instance-method","name":"apply","doc":"must not mutate coord","summary":"<p>must not mutate coord</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"args_string":"(coord : InputCoord(Int32)) : ReadonlyWrapper(OutputCoord(Int32), Int32)","args_html":"(coord : <a href=\"../../Phase/InputCoord.html\">InputCoord</a>(Int32)) : ReadonlyWrapper(<a href=\"../../Phase/OutputCoord.html\">OutputCoord</a>(Int32), Int32)","location":{"filename":"src/view_util/transforms.cr","line_number":109,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L109"},"def":{"name":"apply","args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"return_type":"ReadonlyWrapper(OutputCoord(Int32), Int32)","visibility":"Public","body":"ReadonlyWrapper.new(coord.to_a)"},"external_var":false},{"html_id":"compose(t:CoordTransform):CoordTransform-instance-method","name":"compose","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"args_string":"(t : CoordTransform) : CoordTransform","args_html":"(t : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>) : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>","location":{"filename":"src/view_util/transforms.cr","line_number":105,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L105"},"def":{"name":"compose","args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"return_type":"CoordTransform","visibility":"Public","body":"t"},"external_var":false}]},{"html_id":"ph-core/Phase/ReadonlyView/PermuteTransform","path":"Phase/ReadonlyView/PermuteTransform.html","kind":"struct","full_name":"Phase::ReadonlyView::PermuteTransform","name":"PermuteTransform","abstract":false,"superclass":{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},"ancestors":[{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/view_util/transforms.cr","line_number":226,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L226"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView(S, R)","name":"ReadonlyView"},"constructors":[{"html_id":"new(pattern:Enumerable(Int32))-class-method","name":"new","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"Enumerable(Int32)"}],"args_string":"(pattern : Enumerable(Int32))","args_html":"(pattern : Enumerable(Int32))","location":{"filename":"src/view_util/transforms.cr","line_number":232,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L232"},"def":{"name":"new","args":[{"name":"pattern","external_name":"pattern","restriction":"Enumerable(Int32)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pattern)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false},{"html_id":"new(size:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"Int32"}],"args_string":"(size : Int32)","args_html":"(size : Int32)","location":{"filename":"src/view_util/transforms.cr","line_number":238,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L238"},"def":{"name":"new","args":[{"name":"size","external_name":"size","restriction":"Int32"}],"visibility":"Public","body":"new(Array.new(size) do |i|\n  (size - i) - 1\nend)"},"external_var":false}],"instance_methods":[{"html_id":"apply(coord:InputCoord(Int32)):ReadonlyWrapper(OutputCoord(Int32),Int32)-instance-method","name":"apply","doc":"must not mutate coord","summary":"<p>must not mutate coord</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"args_string":"(coord : InputCoord(Int32)) : ReadonlyWrapper(OutputCoord(Int32), Int32)","args_html":"(coord : <a href=\"../../Phase/InputCoord.html\">InputCoord</a>(Int32)) : ReadonlyWrapper(<a href=\"../../Phase/OutputCoord.html\">OutputCoord</a>(Int32), Int32)","location":{"filename":"src/view_util/transforms.cr","line_number":269,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L269"},"def":{"name":"apply","args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"return_type":"ReadonlyWrapper(OutputCoord(Int32), Int32)","visibility":"Public","body":"unpermute(coord, @buffer)\n@wrapper\n"},"external_var":false},{"html_id":"compose(t:CoordTransform):CoordTransform-instance-method","name":"compose","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"args_string":"(t : CoordTransform) : CoordTransform","args_html":"(t : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>) : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>","location":{"filename":"src/view_util/transforms.cr","line_number":242,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L242"},"def":{"name":"compose","args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"return_type":"CoordTransform","visibility":"Public","body":"case t\nwhen PermuteTransform\n  return new(t.permute(@pattern))\nelse\n  return super(t)\nend"},"external_var":false},{"html_id":"pattern:Array(Int32)-instance-method","name":"pattern","doc":"each of these has size = dimensions","summary":"<p>each of these has size = dimensions</p>","abstract":false,"location":{"filename":"src/view_util/transforms.cr","line_number":228,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L228"},"def":{"name":"pattern","return_type":"Array(Int32)","visibility":"Public","body":"@pattern"},"external_var":false},{"html_id":"permute(src_coord)-instance-method","name":"permute","abstract":false,"args":[{"name":"src_coord","external_name":"src_coord","restriction":""}],"args_string":"(src_coord)","args_html":"(src_coord)","location":{"filename":"src/view_util/transforms.cr","line_number":251,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L251"},"def":{"name":"permute","args":[{"name":"src_coord","external_name":"src_coord","restriction":""}],"visibility":"Public","body":"view_coord = Array.new(@pattern.size) do |src_idx|\n  src_coord[pattern[src_idx]]\nend"},"external_var":false},{"html_id":"unpermute(view_coord,src_coord_buffer)-instance-method","name":"unpermute","abstract":false,"args":[{"name":"view_coord","external_name":"view_coord","restriction":""},{"name":"src_coord_buffer","external_name":"src_coord_buffer","restriction":""}],"args_string":"(view_coord, src_coord_buffer)","args_html":"(view_coord, src_coord_buffer)","location":{"filename":"src/view_util/transforms.cr","line_number":262,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L262"},"def":{"name":"unpermute","args":[{"name":"view_coord","external_name":"view_coord","restriction":""},{"name":"src_coord_buffer","external_name":"src_coord_buffer","restriction":""}],"visibility":"Public","body":"@pattern.each_with_index do |el, idx|\n  src_coord_buffer[el] = view_coord[idx]\nend\nsrc_coord_buffer\n"},"external_var":false},{"html_id":"unpermute(view_coord)-instance-method","name":"unpermute","abstract":false,"args":[{"name":"view_coord","external_name":"view_coord","restriction":""}],"args_string":"(view_coord)","args_html":"(view_coord)","location":{"filename":"src/view_util/transforms.cr","line_number":257,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L257"},"def":{"name":"unpermute","args":[{"name":"view_coord","external_name":"view_coord","restriction":""}],"visibility":"Public","body":"src_coord = view_coord.clone\nunpermute(view_coord, src_coord)\n"},"external_var":false}]},{"html_id":"ph-core/Phase/ReadonlyView/RegionTransform","path":"Phase/ReadonlyView/RegionTransform.html","kind":"struct","full_name":"Phase::ReadonlyView::RegionTransform","name":"RegionTransform","abstract":false,"superclass":{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},"ancestors":[{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/view_util/transforms.cr","line_number":191,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L191"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView(S, R)","name":"ReadonlyView"},"constructors":[{"html_id":"new(region:Phase::IndexRegion(Int32))-class-method","name":"new","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"::Phase::IndexRegion(::Int32)"}],"args_string":"(region : Phase::IndexRegion(Int32))","args_html":"(region : <a href=\"../../Phase/IndexRegion.html\">Phase::IndexRegion</a>(Int32))","location":{"filename":"src/view_util/transforms.cr","line_number":198,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L198"},"def":{"name":"new","args":[{"name":"region","external_name":"region","restriction":"::Phase::IndexRegion(::Int32)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(region)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"apply(coord:InputCoord(Int32)):ReadonlyWrapper(OutputCoord(Int32),Int32)-instance-method","name":"apply","doc":"must not mutate coord","summary":"<p>must not mutate coord</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"args_string":"(coord : InputCoord(Int32)) : ReadonlyWrapper(OutputCoord(Int32), Int32)","args_html":"(coord : <a href=\"../../Phase/InputCoord.html\">InputCoord</a>(Int32)) : ReadonlyWrapper(<a href=\"../../Phase/OutputCoord.html\">OutputCoord</a>(Int32), Int32)","location":{"filename":"src/view_util/transforms.cr","line_number":215,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L215"},"def":{"name":"apply","args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"return_type":"ReadonlyWrapper(OutputCoord(Int32), Int32)","visibility":"Public","body":"(@region.unsafe_fetch_element(coord)).each_with_index do |el, idx|\n  @buffer[idx] = el\nend\n\n@wrapper\n"},"external_var":false},{"html_id":"compose(t:CoordTransform):CoordTransform-instance-method","name":"compose","doc":"TODO: check reaaaaally carefully","summary":"<p><span class=\"flag orange\">TODO</span>  check reaaaaally carefully</p>","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"args_string":"(t : CoordTransform) : CoordTransform","args_html":"(t : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>) : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>","location":{"filename":"src/view_util/transforms.cr","line_number":204,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L204"},"def":{"name":"compose","args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"return_type":"CoordTransform","visibility":"Public","body":"case t\nwhen self\n  @region.unsafe_fetch_chunk(t.region)\nwhen ReverseTransform\nelse\n  return super(t)\nend"},"external_var":false},{"html_id":"region:IndexRegion(Int32)-instance-method","name":"region","doc":"each of these has size = dimensions\nTODO: Try to make this accept a generic coordinate type","summary":"<p>each of these has size = dimensions TODO: Try to make this accept a generic coordinate type</p>","abstract":false,"location":{"filename":"src/view_util/transforms.cr","line_number":194,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L194"},"def":{"name":"region","return_type":"IndexRegion(Int32)","visibility":"Public","body":"@region"},"external_var":false}]},{"html_id":"ph-core/Phase/ReadonlyView/ReshapeTransform","path":"Phase/ReadonlyView/ReshapeTransform.html","kind":"struct","full_name":"Phase::ReadonlyView::ReshapeTransform","name":"ReshapeTransform","abstract":false,"superclass":{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},"ancestors":[{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/view_util/transforms.cr","line_number":118,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L118"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView(S, R)","name":"ReadonlyView"},"doc":"probably done","summary":"<p>probably done</p>","constructors":[{"html_id":"new(src_shape:Enumerable(Int32),new_shape:Enumerable(Int32))-class-method","name":"new","abstract":false,"args":[{"name":"src_shape","external_name":"src_shape","restriction":"Enumerable(Int32)"},{"name":"new_shape","external_name":"new_shape","restriction":"Enumerable(Int32)"}],"args_string":"(src_shape : Enumerable(Int32), new_shape : Enumerable(Int32))","args_html":"(src_shape : Enumerable(Int32), new_shape : Enumerable(Int32))","location":{"filename":"src/view_util/transforms.cr","line_number":126,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L126"},"def":{"name":"new","args":[{"name":"src_shape","external_name":"src_shape","restriction":"Enumerable(Int32)"},{"name":"new_shape","external_name":"new_shape","restriction":"Enumerable(Int32)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(src_shape, new_shape)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"apply(coord:InputCoord(Int32)):ReadonlyWrapper(OutputCoord(Int32),Int32)-instance-method","name":"apply","doc":"must not mutate coord","summary":"<p>must not mutate coord</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"args_string":"(coord : InputCoord(Int32)) : ReadonlyWrapper(OutputCoord(Int32), Int32)","args_html":"(coord : <a href=\"../../Phase/InputCoord.html\">InputCoord</a>(Int32)) : ReadonlyWrapper(<a href=\"../../Phase/OutputCoord.html\">OutputCoord</a>(Int32), Int32)","location":{"filename":"src/view_util/transforms.cr","line_number":184,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L184"},"def":{"name":"apply","args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"return_type":"ReadonlyWrapper(OutputCoord(Int32), Int32)","visibility":"Public","body":"index = coord_to_index(coord, @view_axis_strides)\nindex_to_coord(index, @src_shape, @buffer)\n@wrapper\n"},"external_var":false},{"html_id":"compose(t:CoordTransform):CoordTransform-instance-method","name":"compose","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"args_string":"(t : CoordTransform) : CoordTransform","args_html":"(t : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>) : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>","location":{"filename":"src/view_util/transforms.cr","line_number":134,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L134"},"def":{"name":"compose","args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"return_type":"CoordTransform","visibility":"Public","body":"case t\nwhen self\n  return t\nelse\n  return super(t)\nend"},"external_var":false}]},{"html_id":"ph-core/Phase/ReadonlyView/ReverseTransform","path":"Phase/ReadonlyView/ReverseTransform.html","kind":"struct","full_name":"Phase::ReadonlyView::ReverseTransform","name":"ReverseTransform","abstract":false,"superclass":{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},"ancestors":[{"html_id":"ph-core/Phase/ReadonlyView/CoordTransform","kind":"struct","full_name":"Phase::ReadonlyView::CoordTransform","name":"CoordTransform"},{"html_id":"ph-core/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/view_util/transforms.cr","line_number":275,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L275"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView(S, R)","name":"ReadonlyView"},"constructors":[{"html_id":"new(shape:Array(Int32))-class-method","name":"new","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(::Int32)"}],"args_string":"(shape : Array(Int32))","args_html":"(shape : Array(Int32))","location":{"filename":"src/view_util/transforms.cr","line_number":281,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L281"},"def":{"name":"new","args":[{"name":"shape","external_name":"shape","restriction":"::Array(::Int32)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(shape)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"apply(coord:InputCoord(Int32)):ReadonlyWrapper(OutputCoord(Int32),Int32)-instance-method","name":"apply","doc":"must not mutate coord","summary":"<p>must not mutate coord</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"args_string":"(coord : InputCoord(Int32)) : ReadonlyWrapper(OutputCoord(Int32), Int32)","args_html":"(coord : <a href=\"../../Phase/InputCoord.html\">InputCoord</a>(Int32)) : ReadonlyWrapper(<a href=\"../../Phase/OutputCoord.html\">OutputCoord</a>(Int32), Int32)","location":{"filename":"src/view_util/transforms.cr","line_number":300,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L300"},"def":{"name":"apply","args":[{"name":"coord","external_name":"coord","restriction":"InputCoord(Int32)"}],"return_type":"ReadonlyWrapper(OutputCoord(Int32), Int32)","visibility":"Public","body":"coord.each_with_index do |el, i|\n  @buffer[i] = (@shape[i] - 1) - el\nend\n\n@wrapper\n"},"external_var":false},{"html_id":"compose(t:CoordTransform):CoordTransform-instance-method","name":"compose","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"args_string":"(t : CoordTransform) : CoordTransform","args_html":"(t : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>) : <a href=\"../../Phase/ReadonlyView/CoordTransform.html\">CoordTransform</a>","location":{"filename":"src/view_util/transforms.cr","line_number":286,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view_util/transforms.cr#L286"},"def":{"name":"compose","args":[{"name":"t","external_name":"t","restriction":"CoordTransform"}],"return_type":"CoordTransform","visibility":"Public","body":"case t\nwhen self\n  return IdentityTransform.new\nelse\n  return super(t)\nend"},"external_var":false}]}]},{"html_id":"ph-core/Phase/RegionIterator","path":"Phase/RegionIterator.html","kind":"class","full_name":"Phase::RegionIterator(I)","name":"RegionIterator","abstract":false,"superclass":{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/iterators/region_iterator.cr","line_number":23,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L23"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"`RegionIterator` iterates over all `IndexRegion`s with a given *chunk_shape* whose\ncoordinates lie within a given *src_shape*. For example:\n\n```crystal\niter = RegionIterator.new(src_shape: [2, 5], chunk_shape: [1, 2]) # the parameter names are only included for clarity\niter.next # => [0..0, 0..1]\niter.next # => [0..0, 2..3]\niter.next # => [1..1, 0..1]\niter.next # => [1..1, 2..3]\n```\n\nThe example above is very simple in that it leaves most of the options as their defaults.\nNotice that the regions produced have no overlap - this is because the default\nvertex stride is equal to the chunk shape.\n\n`RegionIterator` also provides ways to control the iteration order, its\nbehaviour at the boundary (note that in the above example, column 4 is\ntotally excluded because two columns did not evenly divide five), and\ndimension dropping (see `IndexRegion` for details).","summary":"<p><code><a href=\"../Phase/RegionIterator.html\">RegionIterator</a></code> iterates over all <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>s with a given <em>chunk_shape</em> whose coordinates lie within a given <em>src_shape</em>.</p>","constructors":[{"html_id":"new(src_shape:Shape(I),chunk_shape:Shape(I),strides:Coord|Nil=nil,degeneracy=nil,fringe_behaviour:FringeBehaviour=FringeBehaviour::DISCARD,&block:IndexRegion(I)->Iterator(Indexable(I)))-class-method","name":"new","doc":"TODO: iter inputs, etc","summary":"<p><span class=\"flag orange\">TODO</span>  iter inputs, etc</p>","abstract":false,"args":[{"name":"src_shape","external_name":"src_shape","restriction":"Shape(I)"},{"name":"chunk_shape","external_name":"chunk_shape","restriction":"Shape(I)"},{"name":"strides","default_value":"nil","external_name":"strides","restriction":"Coord | ::Nil"},{"name":"degeneracy","default_value":"nil","external_name":"degeneracy","restriction":""},{"name":"fringe_behaviour","default_value":"FringeBehaviour::DISCARD","external_name":"fringe_behaviour","restriction":"FringeBehaviour"}],"args_string":"(src_shape : Shape(I), chunk_shape : Shape(I), strides : Coord | Nil = nil, degeneracy = nil, fringe_behaviour : FringeBehaviour = FringeBehaviour::DISCARD, &block : IndexRegion(I) -> Iterator(Indexable(I)))","args_html":"(src_shape : <a href=\"../Phase/Shape.html\">Shape</a>(I), chunk_shape : <a href=\"../Phase/Shape.html\">Shape</a>(I), strides : <a href=\"../Phase/Coord.html\">Coord</a> | Nil = <span class=\"n\">nil</span>, degeneracy = <span class=\"n\">nil</span>, fringe_behaviour : <a href=\"../Phase/RegionIterator/FringeBehaviour.html\">FringeBehaviour</a> = <span class=\"t\">FringeBehaviour</span><span class=\"t\">::</span><span class=\"t\">DISCARD</span>, &block : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>(I) -> Iterator(Indexable(I)))","location":{"filename":"src/iterators/region_iterator.cr","line_number":61,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L61"},"def":{"name":"new","args":[{"name":"src_shape","external_name":"src_shape","restriction":"Shape(I)"},{"name":"chunk_shape","external_name":"chunk_shape","restriction":"Shape(I)"},{"name":"strides","default_value":"nil","external_name":"strides","restriction":"Coord | ::Nil"},{"name":"degeneracy","default_value":"nil","external_name":"degeneracy","restriction":""},{"name":"fringe_behaviour","default_value":"FringeBehaviour::DISCARD","external_name":"fringe_behaviour","restriction":"FringeBehaviour"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(IndexRegion(I) -> Iterator(Indexable(I)))"},"visibility":"Public","body":"strides || (strides = chunk_shape)\nif strides.any? do |x|\n  x <= 0\nend\n  raise(DimensionError.new(\"Stride size must be greater than 0.\"))\nend\n\nlast = self.compute_lasts(src_shape, chunk_shape, strides, fringe_behaviour)\nregion = IndexRegion.new(Array(I).new(src_shape.size, 0), strides, last: last)\ncoord_iter = yield region\n\nnew(src_shape, chunk_shape, coord_iter, degeneracy, fringe_behaviour)\n"},"external_var":false},{"html_id":"new(src_shape:Indexable(I),chunk_shape:Shape(I),strides:Coord|Nil=nil,degeneracy=nil,fringe_behaviour:FringeBehaviour=FringeBehaviour::DISCARD)-class-method","name":"new","abstract":false,"args":[{"name":"src_shape","external_name":"src_shape","restriction":"Indexable(I)"},{"name":"chunk_shape","external_name":"chunk_shape","restriction":"Shape(I)"},{"name":"strides","default_value":"nil","external_name":"strides","restriction":"Coord | ::Nil"},{"name":"degeneracy","default_value":"nil","external_name":"degeneracy","restriction":""},{"name":"fringe_behaviour","default_value":"FringeBehaviour::DISCARD","external_name":"fringe_behaviour","restriction":"FringeBehaviour"}],"args_string":"(src_shape : Indexable(I), chunk_shape : Shape(I), strides : Coord | Nil = nil, degeneracy = nil, fringe_behaviour : FringeBehaviour = FringeBehaviour::DISCARD)","args_html":"(src_shape : Indexable(I), chunk_shape : <a href=\"../Phase/Shape.html\">Shape</a>(I), strides : <a href=\"../Phase/Coord.html\">Coord</a> | Nil = <span class=\"n\">nil</span>, degeneracy = <span class=\"n\">nil</span>, fringe_behaviour : <a href=\"../Phase/RegionIterator/FringeBehaviour.html\">FringeBehaviour</a> = <span class=\"t\">FringeBehaviour</span><span class=\"t\">::</span><span class=\"t\">DISCARD</span>)","location":{"filename":"src/iterators/region_iterator.cr","line_number":76,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L76"},"def":{"name":"new","args":[{"name":"src_shape","external_name":"src_shape","restriction":"Indexable(I)"},{"name":"chunk_shape","external_name":"chunk_shape","restriction":"Shape(I)"},{"name":"strides","default_value":"nil","external_name":"strides","restriction":"Coord | ::Nil"},{"name":"degeneracy","default_value":"nil","external_name":"degeneracy","restriction":""},{"name":"fringe_behaviour","default_value":"FringeBehaviour::DISCARD","external_name":"fringe_behaviour","restriction":"FringeBehaviour"}],"visibility":"Public","body":"new(src_shape, chunk_shape, strides, degeneracy, fringe_behaviour) do |region|\n  LexIterator.new(region)\nend"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/iterators/region_iterator.cr","line_number":53,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L53"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t|\n  ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive\nend %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"location":{"filename":"src/iterators/region_iterator.cr","line_number":134,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L134"},"def":{"name":"next","visibility":"Public","body":"coord = @coord_iter.next\ncase coord\nwhen Stop\n  stop\nelse\n  compute_region(coord)\nend\n"},"external_var":false},{"html_id":"reset(*args,**options)-instance-method","name":"reset","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/iterators/region_iterator.cr","line_number":54,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L54"},"def":{"name":"reset","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@coord_iter.reset(*args, **options)"},"external_var":false},{"html_id":"reset(*args,**options,&)-instance-method","name":"reset","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/iterators/region_iterator.cr","line_number":54,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L54"},"def":{"name":"reset","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@coord_iter.reset(*args, **options) do |*yield_args|\n  yield *yield_args\nend"},"external_var":false},{"html_id":"unsafe_next-instance-method","name":"unsafe_next","abstract":false,"location":{"filename":"src/iterators/region_iterator.cr","line_number":144,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L144"},"def":{"name":"unsafe_next","visibility":"Public","body":"compute_region(@coord_iter.unsafe_next)"},"external_var":false}],"types":[{"html_id":"ph-core/Phase/RegionIterator/FringeBehaviour","path":"Phase/RegionIterator/FringeBehaviour.html","kind":"enum","full_name":"Phase::RegionIterator::FringeBehaviour","name":"FringeBehaviour","abstract":false,"ancestors":[{"html_id":"ph-core/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"ph-core/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"ph-core/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/iterators/region_iterator.cr","line_number":149,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L149"}],"repository_name":"ph-core","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"DISCARD","name":"DISCARD","value":"0"},{"id":"COVER","name":"COVER","value":"1"},{"id":"ALL_START_POINTS","name":"ALL_START_POINTS","value":"2"}],"namespace":{"html_id":"ph-core/Phase/RegionIterator","kind":"class","full_name":"Phase::RegionIterator(I)","name":"RegionIterator"},"doc":"TODO: This is actualy really hard to document without images","summary":"<p><span class=\"flag orange\">TODO</span>  This is actualy really hard to document without images</p>","instance_methods":[{"html_id":"all_start_points?-instance-method","name":"all_start_points?","doc":"Returns `true` if this enum value equals `ALL_START_POINTS`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../Phase/RegionIterator/FringeBehaviour.html#ALL_START_POINTS\">ALL_START_POINTS</a></code></p>","abstract":false,"location":{"filename":"src/iterators/region_iterator.cr","line_number":152,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L152"},"def":{"name":"all_start_points?","visibility":"Public","body":"self == ALL_START_POINTS"},"external_var":false},{"html_id":"cover?-instance-method","name":"cover?","doc":"Returns `true` if this enum value equals `COVER`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../Phase/RegionIterator/FringeBehaviour.html#COVER\">COVER</a></code></p>","abstract":false,"location":{"filename":"src/iterators/region_iterator.cr","line_number":151,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L151"},"def":{"name":"cover?","visibility":"Public","body":"self == COVER"},"external_var":false},{"html_id":"discard?-instance-method","name":"discard?","doc":"Returns `true` if this enum value equals `DISCARD`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../Phase/RegionIterator/FringeBehaviour.html#DISCARD\">DISCARD</a></code></p>","abstract":false,"location":{"filename":"src/iterators/region_iterator.cr","line_number":150,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/region_iterator.cr#L150"},"def":{"name":"discard?","visibility":"Public","body":"self == DISCARD"},"external_var":false}]}]},{"html_id":"ph-core/Phase/RegionLiteral","path":"Phase/RegionLiteral.html","kind":"alias","full_name":"Phase::RegionLiteral","name":"RegionLiteral","abstract":false,"locations":[{"filename":"src/type_aliases.cr","line_number":14,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/type_aliases.cr#L14"}],"repository_name":"ph-core","program":false,"enum":false,"alias":true,"aliased":"Indexable(T)","aliased_html":"Indexable(T)","const":false,"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"}},{"html_id":"ph-core/Phase/Shape","path":"Phase/Shape.html","kind":"alias","full_name":"Phase::Shape","name":"Shape","abstract":false,"locations":[{"filename":"src/type_aliases.cr","line_number":16,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/type_aliases.cr#L16"}],"repository_name":"ph-core","program":false,"enum":false,"alias":true,"aliased":"Indexable(T)","aliased_html":"Indexable(T)","const":false,"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"}},{"html_id":"ph-core/Phase/ShapeError","path":"Phase/ShapeError.html","kind":"class","full_name":"Phase::ShapeError","name":"ShapeError","abstract":false,"superclass":{"html_id":"ph-core/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"ph-core/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/exceptions/exceptions.cr","line_number":4,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/exceptions/exceptions.cr#L4"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"ph-core/Phase/DimensionError","kind":"class","full_name":"Phase::DimensionError","name":"DimensionError"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"A `ShapeError` is raised when the shape (see `MultiIndexable#shape`) of a data\ntype is incorrect for a given operation.","summary":"<p>A <code><a href=\"../Phase/ShapeError.html\">ShapeError</a></code> is raised when the shape (see <code><a href=\"../Phase/MultiIndexable.html#shape%3AArray-instance-method\">MultiIndexable#shape</a></code>) of a data type is incorrect for a given operation.</p>","class_methods":[{"html_id":"initialize(message:String|Nil=nil)-class-method","name":"initialize","abstract":false,"args":[{"name":"message","default_value":"nil","external_name":"message","restriction":"String | ::Nil"}],"args_string":"(message : String | Nil = nil)","args_html":"(message : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/exceptions/exceptions.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/exceptions/exceptions.cr#L5"},"def":{"name":"initialize","args":[{"name":"message","default_value":"nil","external_name":"message","restriction":"String | ::Nil"}],"visibility":"Public","body":"super(message || \"Shape was invalid for this operation.\")"},"external_var":false}]},{"html_id":"ph-core/Phase/ShapeUtil","path":"Phase/ShapeUtil.html","kind":"module","full_name":"Phase::ShapeUtil","name":"ShapeUtil","abstract":false,"locations":[{"filename":"src/shape_util.cr","line_number":2,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/shape_util.cr#L2"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"ph-core/Phase/ShapeUtil","kind":"module","full_name":"Phase::ShapeUtil","name":"ShapeUtil"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"instance_methods":[{"html_id":"compatible_shapes?(shape1,shape2)-instance-method","name":"compatible_shapes?","doc":"checks if two shapes define the same data layout, i.e. are equal up to trailing ones.","summary":"<p>checks if two shapes define the same data layout, i.e.</p>","abstract":false,"args":[{"name":"shape1","external_name":"shape1","restriction":""},{"name":"shape2","external_name":"shape2","restriction":""}],"args_string":"(shape1, shape2)","args_html":"(shape1, shape2)","location":{"filename":"src/shape_util.cr","line_number":6,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/shape_util.cr#L6"},"def":{"name":"compatible_shapes?","args":[{"name":"shape1","external_name":"shape1","restriction":""},{"name":"shape2","external_name":"shape2","restriction":""}],"visibility":"Public","body":"if (shape1.size == 0) || (shape2.size == 0)\n  return shape1 == shape2\nend\n\nif shape1.size > shape2.size\n  larger = shape1\n  shared_dims = shape2.size\nelse\n  larger = shape2\n  shared_dims = shape1.size\nend\n\n\nshared_dims.times do |i|\n  if shape1[i] != shape2[i]\n    return false\n  end\nend\n\n(shared_dims...larger.size).step(1) do |i|\n  if larger[i] != 1\n    return false\n  end\nend\ntrue\n"},"external_var":false}]},{"html_id":"ph-core/Phase/StrideIterator","path":"Phase/StrideIterator.html","kind":"class","full_name":"Phase::StrideIterator(I)","name":"StrideIterator","abstract":true,"superclass":{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/iterators/stride_iterator.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L5"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"subclasses":[{"html_id":"ph-core/Phase/Buffered/Indexed/StrideIterator","kind":"class","full_name":"Phase::Buffered::Indexed::StrideIterator(I)","name":"StrideIterator"},{"html_id":"ph-core/Phase/ColexIterator","kind":"class","full_name":"Phase::ColexIterator(I)","name":"ColexIterator"},{"html_id":"ph-core/Phase/LexIterator","kind":"class","full_name":"Phase::LexIterator(I)","name":"LexIterator"},{"html_id":"ph-core/Phase/MultiIndexable/TilingLexIterator","kind":"class","full_name":"Phase::MultiIndexable::TilingLexIterator(I)","name":"TilingLexIterator"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"doc":"A coordinate iterator that advances to the next value by taking\northogonal strides. The only iteration orders that obey that criteria are\nlexicographic, colexicographic, and their reverses.","summary":"<p>A coordinate iterator that advances to the next value by taking orthogonal strides.</p>","class_methods":[{"html_id":"cover(shape:Indexable(I))forallI-class-method","name":"cover","doc":"Constructs an iterator that will provide every coordinate within `shape`.","summary":"<p>Constructs an iterator that will provide every coordinate within <code>shape</code>.</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"Indexable(I)"}],"args_string":"(shape : Indexable(I)) forall I","args_html":"(shape : Indexable(I)) forall I","location":{"filename":"src/iterators/stride_iterator.cr","line_number":108,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L108"},"def":{"name":"cover","args":[{"name":"shape","external_name":"shape","restriction":"Indexable(I)"}],"visibility":"Public","body":"new(IndexRegion(I).cover(shape))"},"external_var":false},{"html_id":"cover(src:MultiIndexable)-class-method","name":"cover","doc":"Constructs an iterator that will provide every coordinate in `src.shape`.","summary":"<p>Constructs an iterator that will provide every coordinate in <code>src.shape</code>.</p>","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"}],"args_string":"(src : MultiIndexable)","args_html":"(src : <a href=\"../Phase/MultiIndexable.html\">MultiIndexable</a>)","location":{"filename":"src/iterators/stride_iterator.cr","line_number":103,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L103"},"def":{"name":"cover","args":[{"name":"src","external_name":"src","restriction":"MultiIndexable"}],"visibility":"Public","body":"cover(src.shape)"},"external_var":false}],"constructors":[{"html_id":"new(idx_r:IndexRegion(I))-class-method","name":"new","doc":"Constructs an iterator that will provide every coordinate described by an `IndexRegion`.","summary":"<p>Constructs an iterator that will provide every coordinate described by an <code><a href=\"../Phase/IndexRegion.html\">IndexRegion</a></code>.</p>","abstract":false,"args":[{"name":"idx_r","external_name":"idx_r","restriction":"IndexRegion(I)"}],"args_string":"(idx_r : IndexRegion(I))","args_html":"(idx_r : <a href=\"../Phase/IndexRegion.html\">IndexRegion</a>(I))","location":{"filename":"src/iterators/stride_iterator.cr","line_number":85,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L85"},"def":{"name":"new","args":[{"name":"idx_r","external_name":"idx_r","restriction":"IndexRegion(I)"}],"visibility":"Public","body":"new(idx_r.@first, idx_r.@step, idx_r.@last)"},"external_var":false},{"html_id":"new(region_literal:Indexable(I))forallI-class-method","name":"new","doc":"Constructs an iterator that will provide every coordinate described by a region literal.","summary":"<p>Constructs an iterator that will provide every coordinate described by a region literal.</p>","abstract":false,"args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable(I)"}],"args_string":"(region_literal : Indexable(I)) forall I","args_html":"(region_literal : Indexable(I)) forall I","location":{"filename":"src/iterators/stride_iterator.cr","line_number":98,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L98"},"def":{"name":"new","args":[{"name":"region_literal","external_name":"region_literal","restriction":"Indexable(I)"}],"visibility":"Public","body":"new(IndexRegion(I).new(region_literal))"},"external_var":false}],"instance_methods":[{"html_id":"advance!:Array(I)|Stop-instance-method","name":"advance!","doc":"Advances the internal state of this `StrideIterator` and returns the new coord (or `Iterator::Stop` if iteration is finished).","summary":"<p>Advances the internal state of this <code><a href=\"../Phase/StrideIterator.html\">StrideIterator</a></code> and returns the new coord (or <code>Iterator::Stop</code> if iteration is finished).</p>","abstract":true,"location":{"filename":"src/iterators/stride_iterator.cr","line_number":113,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L113"},"def":{"name":"advance!","return_type":"Array(I) | Stop","visibility":"Public","body":""},"external_var":false},{"html_id":"largest_coord:Indexable(I)|Nil-instance-method","name":"largest_coord","doc":"Returns a coordinate that stores the largest possible value this `StrideIterator` can output in each ordinate.\nIf there are no coordinates contained in this `IndexRegion` (e.g. `IndexRegion[0...0]`),\nreturns null.","summary":"<p>Returns a coordinate that stores the largest possible value this <code><a href=\"../Phase/StrideIterator.html\">StrideIterator</a></code> can output in each ordinate.</p>","abstract":false,"location":{"filename":"src/iterators/stride_iterator.cr","line_number":153,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L153"},"def":{"name":"largest_coord","return_type":"Indexable(I) | ::Nil","visibility":"Public","body":"@step.map_with_index do |step_value, idx|\n  if step_value == 0\n    return nil\n  end\n\n  if step_value.positive?\n    @last[idx]\n  else\n    @first[idx]\n  end\nend"},"external_var":false},{"html_id":"next:ReadonlyWrapper(Array(I),I)|Stop-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"location":{"filename":"src/iterators/stride_iterator.cr","line_number":115,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L115"},"def":{"name":"next","return_type":"ReadonlyWrapper(Array(I), I) | Stop","visibility":"Public","body":"if @hold\n  @hold = false\nelse\n  if advance!.is_a?(Stop)\n    return stop\n  end\nend\n\n@wrapper\n"},"external_var":false},{"html_id":"reset!-instance-method","name":"reset!","abstract":false,"location":{"filename":"src/iterators/stride_iterator.cr","line_number":131,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L131"},"def":{"name":"reset!","visibility":"Public","body":"@coord.map_with_index! do |_, i|\n  @first[i]\nend\n@hold = true\n"},"external_var":false},{"html_id":"reverse!-instance-method","name":"reverse!","doc":"Reverses the direction of iteration in-place.","summary":"<p>Reverses the direction of iteration in-place.</p>","abstract":false,"location":{"filename":"src/iterators/stride_iterator.cr","line_number":137,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L137"},"def":{"name":"reverse!","visibility":"Public","body":"@last, @first = @first, @last\n@step.map!(&.-)\nreset!\n"},"external_var":false},{"html_id":"to_a:Array(Indexable(I))-instance-method","name":"to_a","doc":"Returns an ordered `Array` of all coordinates this `StrideIterator` will cover.","summary":"<p>Returns an ordered <code>Array</code> of all coordinates this <code><a href=\"../Phase/StrideIterator.html\">StrideIterator</a></code> will cover.</p>","abstract":false,"location":{"filename":"src/iterators/stride_iterator.cr","line_number":144,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L144"},"def":{"name":"to_a","return_type":"Array(Indexable(I))","visibility":"Public","body":"arr = [] of Indexable(I)\neach do |el|\n  arr << el.to_a\nend\narr\n"},"external_var":false},{"html_id":"unsafe_next:Indexable(I)-instance-method","name":"unsafe_next","doc":"Returns `next` typecast to an `Indexable(I)`. This will raise if the iterator returns `Stop`.","summary":"<p>Returns <code><a href=\"../Phase/StrideIterator.html#next%3AReadonlyWrapper%28Array%28I%29%2CI%29%7CStop-instance-method\">#next</a></code> typecast to an <code>Indexable(I)</code>.</p>","abstract":false,"location":{"filename":"src/iterators/stride_iterator.cr","line_number":127,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L127"},"def":{"name":"unsafe_next","return_type":"Indexable(I)","visibility":"Public","body":"self.next.as(ReadonlyWrapper(Array(I), I))"},"external_var":false}],"macros":[{"html_id":"def_standard_clone-macro","name":"def_standard_clone","abstract":false,"location":{"filename":"src/iterators/stride_iterator.cr","line_number":170,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/iterators/stride_iterator.cr#L170"},"def":{"name":"def_standard_clone","visibility":"Public","body":"      protected def copy_from(other : self)\n        @first = other.@first.clone\n        @step = other.@step.clone\n        @last = other.@last.clone\n        @coord = other.@coord.clone\n        @wrapper = ReadonlyWrapper.new(@coord)\n        self\n      \nend\n\n      def clone : self\n        inst = \n{{ @type }}\n.allocate\n        inst.copy_from(self)\n      \nend\n    \n"}}]},{"html_id":"ph-core/Phase/View","path":"Phase/View.html","kind":"class","full_name":"Phase::View(S, R)","name":"View","abstract":false,"superclass":{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView","name":"ReadonlyView"},"ancestors":[{"html_id":"ph-core/Phase/MultiWritable","kind":"module","full_name":"Phase::MultiWritable","name":"MultiWritable"},{"html_id":"ph-core/Phase/ReadonlyView","kind":"class","full_name":"Phase::ReadonlyView","name":"ReadonlyView"},{"html_id":"ph-core/Phase/MultiIndexable","kind":"module","full_name":"Phase::MultiIndexable","name":"MultiIndexable"},{"html_id":"ph-core/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"ph-core/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"ph-core/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"ph-core/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/view.cr","line_number":2,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view.cr#L2"}],"repository_name":"ph-core","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"ph-core/Phase/MultiWritable","kind":"module","full_name":"Phase::MultiWritable","name":"MultiWritable"}],"namespace":{"html_id":"ph-core/Phase","kind":"module","full_name":"Phase","name":"Phase"},"constructors":[{"html_id":"of(src:S,region:Enumerable|Nil=nil):self-class-method","name":"of","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"S"},{"name":"region","default_value":"nil","external_name":"region","restriction":"Enumerable | ::Nil"}],"args_string":"(src : S, region : Enumerable | Nil = nil) : self","args_html":"(src : S, region : Enumerable | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/view.cr","line_number":5,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view.cr#L5"},"def":{"name":"of","args":[{"name":"src","external_name":"src","restriction":"S"},{"name":"region","default_value":"nil","external_name":"region","restriction":"Enumerable | ::Nil"}],"return_type":"self","visibility":"Public","body":"case src\nwhen ReadonlyView\n  return src.view(region)\nelse\n  new_view = View(S, typeof(src.sample)).new(src)\n  if region\n    new_view.restrict_to(region)\n  end\n  return new_view\nend"},"external_var":false}],"instance_methods":[{"html_id":"unsafe_set_element(coord:Indexable,value:R)-instance-method","name":"unsafe_set_element","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Indexable"},{"name":"value","external_name":"value","restriction":"R"}],"args_string":"(coord : Indexable, value : R)","args_html":"(coord : Indexable, value : R)","location":{"filename":"src/view.cr","line_number":16,"url":"https://github.com/in-phase/ph-core/blob/faefb580069f511d51683190c6a7f4a72a11e8f0/src/view.cr#L16"},"def":{"name":"unsafe_set_element","args":[{"name":"coord","external_name":"coord","restriction":"Indexable"},{"name":"value","external_name":"value","restriction":"R"}],"visibility":"Public","body":"@src.ensure_writable\n@src.unsafe_set_element(@transform.apply(coord), value)\n"},"external_var":false}]}]}]}}